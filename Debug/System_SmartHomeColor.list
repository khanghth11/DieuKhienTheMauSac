
System_SmartHomeColor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015bc  0800c760  0800c760  0000d760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd1c  0800dd1c  0000f244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dd1c  0800dd1c  0000ed1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd24  0800dd24  0000f244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd24  0800dd24  0000ed24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd28  0800dd28  0000ed28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0800dd2c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  20000244  0800df70  0000f244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  0800df70  0000fa48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001291e  00000000  00000000  0000f274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c02  00000000  00000000  00021b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00024798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d40  00000000  00000000  000258b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018015  00000000  00000000  000265f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014556  00000000  00000000  0003e605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094044  00000000  00000000  00052b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6b9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d68  00000000  00000000  000e6be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000ec94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c744 	.word	0x0800c744

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	0800c744 	.word	0x0800c744

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <I2C_Write8BIT>:
extern I2C_HandleTypeDef hi2c1;


//Funkcja ustawiająca wartość rejestru 8-bitowego
void I2C_Write8BIT (uint8_t reg, uint32_t value)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  uint8_t pkt[2];
  pkt[0] = (TCS34725_COMMAND_BIT | reg);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001042:	b2db      	uxtb	r3, r3
 8001044:	733b      	strb	r3, [r7, #12]
  pkt[1] = (value & 0xFF);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, pkt, 2, HAL_MAX_DELAY);
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2302      	movs	r3, #2
 8001058:	2152      	movs	r1, #82	@ 0x52
 800105a:	4803      	ldr	r0, [pc, #12]	@ (8001068 <I2C_Write8BIT+0x38>)
 800105c:	f003 fdea 	bl	8004c34 <HAL_I2C_Master_Transmit>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200002c8 	.word	0x200002c8

0800106c <I2C_Read8BIT>:


//Funkcja odczytująca rejestr 8-bitowy
uint8_t I2C_Read8BIT(uint8_t reg)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	uint8_t pkt;
	pkt = (TCS34725_COMMAND_BIT | reg);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, &pkt, 1, HAL_MAX_DELAY);
 8001080:	f107 020f 	add.w	r2, r7, #15
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	2152      	movs	r1, #82	@ 0x52
 800108e:	4809      	ldr	r0, [pc, #36]	@ (80010b4 <I2C_Read8BIT+0x48>)
 8001090:	f003 fdd0 	bl	8004c34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, &pkt, 1, HAL_MAX_DELAY);
 8001094:	f107 020f 	add.w	r2, r7, #15
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2152      	movs	r1, #82	@ 0x52
 80010a2:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <I2C_Read8BIT+0x48>)
 80010a4:	f003 fec4 	bl	8004e30 <HAL_I2C_Master_Receive>

	return pkt;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200002c8 	.word	0x200002c8

080010b8 <I2C_Read16BIT>:


//Funkcja odczytująca dwa rejestry 8-bitowe do jednej zmiennej 16-bitowej
uint16_t I2C_Read16BIT(uint8_t reg) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	uint16_t ret;
	uint8_t data[2];

	data[0] = (TCS34725_COMMAND_BIT | reg);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, data, 1, HAL_MAX_DELAY);
 80010cc:	f107 020c 	add.w	r2, r7, #12
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2152      	movs	r1, #82	@ 0x52
 80010da:	480e      	ldr	r0, [pc, #56]	@ (8001114 <I2C_Read16BIT+0x5c>)
 80010dc:	f003 fdaa 	bl	8004c34 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, data, 2, HAL_MAX_DELAY);
 80010e0:	f107 020c 	add.w	r2, r7, #12
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2302      	movs	r3, #2
 80010ec:	2152      	movs	r1, #82	@ 0x52
 80010ee:	4809      	ldr	r0, [pc, #36]	@ (8001114 <I2C_Read16BIT+0x5c>)
 80010f0:	f003 fe9e 	bl	8004e30 <HAL_I2C_Master_Receive>

	ret = (uint16_t) data[1];
 80010f4:	7b7b      	ldrb	r3, [r7, #13]
 80010f6:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	81fb      	strh	r3, [r7, #14]
	ret |= (uint16_t) data[0];
 80010fe:	7b3b      	ldrb	r3, [r7, #12]
 8001100:	461a      	mov	r2, r3
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	4313      	orrs	r3, r2
 8001106:	81fb      	strh	r3, [r7, #14]
	return ret;
 8001108:	89fb      	ldrh	r3, [r7, #14]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002c8 	.word	0x200002c8

08001118 <startTimeoutInternal>:
static bool checkTimeoutExpiredInternal(); // Renamed to avoid conflict with macro in header

//---------------------------------------------------------
// Timeout Helper Functions (Internal)
//---------------------------------------------------------
static void startTimeoutInternal() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    g_timeoutStartMs = HAL_GetTick();
 800111c:	f003 f960 	bl	80043e0 <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b01      	ldr	r3, [pc, #4]	@ (800112c <startTimeoutInternal+0x14>)
 8001126:	801a      	strh	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000264 	.word	0x20000264

08001130 <checkTimeoutExpiredInternal>:

static bool checkTimeoutExpiredInternal() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    return (g_ioTimeout > 0 && ((uint16_t)HAL_GetTick() - g_timeoutStartMs) > g_ioTimeout);
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <checkTimeoutExpiredInternal+0x34>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00d      	beq.n	8001158 <checkTimeoutExpiredInternal+0x28>
 800113c:	f003 f950 	bl	80043e0 <HAL_GetTick>
 8001140:	4603      	mov	r3, r0
 8001142:	b29b      	uxth	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <checkTimeoutExpiredInternal+0x38>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <checkTimeoutExpiredInternal+0x34>)
 800114e:	8812      	ldrh	r2, [r2, #0]
 8001150:	4293      	cmp	r3, r2
 8001152:	dd01      	ble.n	8001158 <checkTimeoutExpiredInternal+0x28>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <checkTimeoutExpiredInternal+0x2a>
 8001158:	2300      	movs	r3, #0
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
}
 8001160:	4618      	mov	r0, r3
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000260 	.word	0x20000260
 8001168:	20000264 	.word	0x20000264

0800116c <writeReg>:

//---------------------------------------------------------
// I2C communication Functions (using static handler)
//---------------------------------------------------------
// Write an 8-bit register
static void writeReg(uint8_t reg, uint8_t value) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af04      	add	r7, sp, #16
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
  msgBuffer[0] = value; // Assign the value to the buffer.
 800117c:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <writeReg+0x44>)
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	7013      	strb	r3, [r2, #0]
  // *** MODIFIED: Use static handler ***
  i2cStat = HAL_I2C_Mem_Write(&vl53l0x_i2c_handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8001182:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <writeReg+0x48>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	b29a      	uxth	r2, r3
 800118c:	2364      	movs	r3, #100	@ 0x64
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <writeReg+0x44>)
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <writeReg+0x4c>)
 800119c:	f004 f87a 	bl	8005294 <HAL_I2C_Mem_Write>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <writeReg+0x50>)
 80011a6:	701a      	strb	r2, [r3, #0]
  // Optional: Check i2cStat for errors HAL_OK
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200002c0 	.word	0x200002c0
 80011b4:	20000000 	.word	0x20000000
 80011b8:	2000026c 	.word	0x2000026c
 80011bc:	200002c4 	.word	0x200002c4

080011c0 <writeReg16Bit>:

// Write a 16-bit register
static void writeReg16Bit(uint8_t reg, uint16_t value){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]
  // Handle endianness explicitly (VL53L0X expects big-endian)
  msgBuffer[0] = (value >> 8) & 0xFF; // MSB
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <writeReg16Bit+0x54>)
 80011da:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = value & 0xFF;        // LSB
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <writeReg16Bit+0x54>)
 80011e2:	705a      	strb	r2, [r3, #1]
  // *** MODIFIED: Use static handler ***
  i2cStat = HAL_I2C_Mem_Write(&vl53l0x_i2c_handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <writeReg16Bit+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	2364      	movs	r3, #100	@ 0x64
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2302      	movs	r3, #2
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <writeReg16Bit+0x54>)
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	4807      	ldr	r0, [pc, #28]	@ (800121c <writeReg16Bit+0x5c>)
 80011fe:	f004 f849 	bl	8005294 <HAL_I2C_Mem_Write>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <writeReg16Bit+0x60>)
 8001208:	701a      	strb	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200002c0 	.word	0x200002c0
 8001218:	20000000 	.word	0x20000000
 800121c:	2000026c 	.word	0x2000026c
 8001220:	200002c4 	.word	0x200002c4

08001224 <writeReg32Bit>:

// Write a 32-bit register
static void writeReg32Bit(uint8_t reg, uint32_t value){
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af04      	add	r7, sp, #16
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  // Handle endianness explicitly (VL53L0X expects big-endian)
  msgBuffer[0] = (value >> 24) & 0xFF;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	0e1b      	lsrs	r3, r3, #24
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <writeReg32Bit+0x60>)
 8001238:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = (value >> 16) & 0xFF;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	0c1b      	lsrs	r3, r3, #16
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <writeReg32Bit+0x60>)
 8001242:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = (value >> 8) & 0xFF;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	0a1b      	lsrs	r3, r3, #8
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <writeReg32Bit+0x60>)
 800124c:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = value & 0xFF;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <writeReg32Bit+0x60>)
 8001254:	70da      	strb	r2, [r3, #3]
  // *** MODIFIED: Use static handler ***
  i2cStat = HAL_I2C_Mem_Write(&vl53l0x_i2c_handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <writeReg32Bit+0x64>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	b29a      	uxth	r2, r3
 8001260:	2364      	movs	r3, #100	@ 0x64
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2304      	movs	r3, #4
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <writeReg32Bit+0x60>)
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	4807      	ldr	r0, [pc, #28]	@ (800128c <writeReg32Bit+0x68>)
 8001270:	f004 f810 	bl	8005294 <HAL_I2C_Mem_Write>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <writeReg32Bit+0x6c>)
 800127a:	701a      	strb	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200002c0 	.word	0x200002c0
 8001288:	20000000 	.word	0x20000000
 800128c:	2000026c 	.word	0x2000026c
 8001290:	200002c4 	.word	0x200002c4

08001294 <readReg>:

// Read an 8-bit register
static uint8_t readReg(uint8_t reg) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af04      	add	r7, sp, #16
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  uint8_t value;
  // *** MODIFIED: Use static handler ***
  i2cStat = HAL_I2C_Mem_Read(&vl53l0x_i2c_handler, g_i2cAddr | I2C_READ, reg, 1, &value, 1, I2C_TIMEOUT);
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <readReg+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4619      	mov	r1, r3
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	2364      	movs	r3, #100	@ 0x64
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	4807      	ldr	r0, [pc, #28]	@ (80012dc <readReg+0x48>)
 80012c0:	f004 f8e2 	bl	8005488 <HAL_I2C_Mem_Read>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <readReg+0x4c>)
 80012ca:	701a      	strb	r2, [r3, #0]
  return value;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000
 80012dc:	2000026c 	.word	0x2000026c
 80012e0:	200002c4 	.word	0x200002c4

080012e4 <readReg16Bit>:

// Read a 16-bit register
static uint16_t readReg16Bit(uint8_t reg) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  uint16_t value;
  uint8_t buffer[2];
  // *** MODIFIED: Use static handler ***
  i2cStat = HAL_I2C_Mem_Read(&vl53l0x_i2c_handler, g_i2cAddr | I2C_READ, reg, 1, buffer, 2, I2C_TIMEOUT);
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <readReg16Bit+0x54>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4619      	mov	r1, r3
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	2364      	movs	r3, #100	@ 0x64
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2302      	movs	r3, #2
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <readReg16Bit+0x58>)
 8001310:	f004 f8ba 	bl	8005488 <HAL_I2C_Mem_Read>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <readReg16Bit+0x5c>)
 800131a:	701a      	strb	r2, [r3, #0]
  // Combine bytes (big-endian)
  value = (uint16_t)buffer[0] << 8 | buffer[1];
 800131c:	7b3b      	ldrb	r3, [r7, #12]
 800131e:	b21b      	sxth	r3, r3
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b21b      	sxth	r3, r3
 800132c:	81fb      	strh	r3, [r7, #14]
  return value;
 800132e:	89fb      	ldrh	r3, [r7, #14]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000000 	.word	0x20000000
 800133c:	2000026c 	.word	0x2000026c
 8001340:	200002c4 	.word	0x200002c4

08001344 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
static void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af04      	add	r7, sp, #16
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	4613      	mov	r3, r2
 8001352:	71bb      	strb	r3, [r7, #6]
   // *** MODIFIED: Use static handler ***
  // Note: The source buffer 'src' is passed directly
  i2cStat = HAL_I2C_Mem_Write(&vl53l0x_i2c_handler, g_i2cAddr | I2C_WRITE, reg, 1, (uint8_t*)src, count, I2C_TIMEOUT);
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <writeMulti+0x44>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	b29a      	uxth	r2, r3
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	b29b      	uxth	r3, r3
 8001362:	2164      	movs	r1, #100	@ 0x64
 8001364:	9102      	str	r1, [sp, #8]
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	4601      	mov	r1, r0
 8001370:	4806      	ldr	r0, [pc, #24]	@ (800138c <writeMulti+0x48>)
 8001372:	f003 ff8f 	bl	8005294 <HAL_I2C_Mem_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <writeMulti+0x4c>)
 800137c:	701a      	strb	r2, [r3, #0]
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000000 	.word	0x20000000
 800138c:	2000026c 	.word	0x2000026c
 8001390:	200002c4 	.word	0x200002c4

08001394 <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
static void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
    // *** MODIFIED: Use static handler ***
	i2cStat = HAL_I2C_Mem_Read(&vl53l0x_i2c_handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <readMulti+0x48>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	2164      	movs	r1, #100	@ 0x64
 80013ba:	9102      	str	r1, [sp, #8]
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	4601      	mov	r1, r0
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <readMulti+0x4c>)
 80013c8:	f004 f85e 	bl	8005488 <HAL_I2C_Mem_Read>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <readMulti+0x50>)
 80013d2:	701a      	strb	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000000 	.word	0x20000000
 80013e0:	2000026c 	.word	0x2000026c
 80013e4:	200002c4 	.word	0x200002c4

080013e8 <initVL53L0X>:
uint8_t getAddress_VL53L0X() {
  return g_i2cAddr;
}

// *** MODIFIED: Accepts I2C_HandleTypeDef pointer ***
bool initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  // VL53L0X_DataInit() begin

  // *** MODIFIED: Copy the provided handler to the static variable ***
  if (handler == NULL) {
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <initVL53L0X+0x16>
      return false; // Must provide a valid I2C handle
 80013fa:	2300      	movs	r3, #0
 80013fc:	e253      	b.n	80018a6 <initVL53L0X+0x4be>
  }
  memcpy(&vl53l0x_i2c_handler, handler, sizeof(I2C_HandleTypeDef));
 80013fe:	2254      	movs	r2, #84	@ 0x54
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	4853      	ldr	r0, [pc, #332]	@ (8001550 <initVL53L0X+0x168>)
 8001404:	f007 fed5 	bl	80091b2 <memcpy>

  // Reset the message buffer.
  memset(msgBuffer, 0, sizeof(msgBuffer));
 8001408:	2204      	movs	r2, #4
 800140a:	2100      	movs	r1, #0
 800140c:	4851      	ldr	r0, [pc, #324]	@ (8001554 <initVL53L0X+0x16c>)
 800140e:	f007 fe3d 	bl	800908c <memset>

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00a      	beq.n	800142e <initVL53L0X+0x46>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8001418:	2089      	movs	r0, #137	@ 0x89
 800141a:	f7ff ff3b 	bl	8001294 <readReg>
 800141e:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	2089      	movs	r0, #137	@ 0x89
 800142a:	f7ff fe9f 	bl	800116c <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 800142e:	2100      	movs	r1, #0
 8001430:	2088      	movs	r0, #136	@ 0x88
 8001432:	f7ff fe9b 	bl	800116c <writeReg>

  writeReg(0x80, 0x01);
 8001436:	2101      	movs	r1, #1
 8001438:	2080      	movs	r0, #128	@ 0x80
 800143a:	f7ff fe97 	bl	800116c <writeReg>
  writeReg(0xFF, 0x01);
 800143e:	2101      	movs	r1, #1
 8001440:	20ff      	movs	r0, #255	@ 0xff
 8001442:	f7ff fe93 	bl	800116c <writeReg>
  writeReg(0x00, 0x00);
 8001446:	2100      	movs	r1, #0
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff fe8f 	bl	800116c <writeReg>
  g_stopVariable = readReg(0x91);
 800144e:	2091      	movs	r0, #145	@ 0x91
 8001450:	f7ff ff20 	bl	8001294 <readReg>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b3f      	ldr	r3, [pc, #252]	@ (8001558 <initVL53L0X+0x170>)
 800145a:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 800145c:	2101      	movs	r1, #1
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fe84 	bl	800116c <writeReg>
  writeReg(0xFF, 0x00);
 8001464:	2100      	movs	r1, #0
 8001466:	20ff      	movs	r0, #255	@ 0xff
 8001468:	f7ff fe80 	bl	800116c <writeReg>
  writeReg(0x80, 0x00);
 800146c:	2100      	movs	r1, #0
 800146e:	2080      	movs	r0, #128	@ 0x80
 8001470:	f7ff fe7c 	bl	800116c <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8001474:	2060      	movs	r0, #96	@ 0x60
 8001476:	f7ff ff0d 	bl	8001294 <readReg>
 800147a:	4603      	mov	r3, r0
 800147c:	f043 0312 	orr.w	r3, r3, #18
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	2060      	movs	r0, #96	@ 0x60
 8001486:	f7ff fe71 	bl	800116c <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 800148a:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 800148e:	f000 fa13 	bl	80018b8 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001492:	21ff      	movs	r1, #255	@ 0xff
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fe69 	bl	800116c <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 800149a:	f107 0213 	add.w	r2, r7, #19
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fc31 	bl	8001d0c <getSpadInfo>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f083 0301 	eor.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <initVL53L0X+0xd2>
 80014b6:	2300      	movs	r3, #0
 80014b8:	e1f5      	b.n	80018a6 <initVL53L0X+0x4be>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2206      	movs	r2, #6
 80014c0:	4619      	mov	r1, r3
 80014c2:	20b0      	movs	r0, #176	@ 0xb0
 80014c4:	f7ff ff66 	bl	8001394 <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80014c8:	2101      	movs	r1, #1
 80014ca:	20ff      	movs	r0, #255	@ 0xff
 80014cc:	f7ff fe4e 	bl	800116c <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80014d0:	2100      	movs	r1, #0
 80014d2:	204f      	movs	r0, #79	@ 0x4f
 80014d4:	f7ff fe4a 	bl	800116c <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80014d8:	212c      	movs	r1, #44	@ 0x2c
 80014da:	204e      	movs	r0, #78	@ 0x4e
 80014dc:	f7ff fe46 	bl	800116c <writeReg>
  writeReg(0xFF, 0x00);
 80014e0:	2100      	movs	r1, #0
 80014e2:	20ff      	movs	r0, #255	@ 0xff
 80014e4:	f7ff fe42 	bl	800116c <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80014e8:	21b4      	movs	r1, #180	@ 0xb4
 80014ea:	20b6      	movs	r0, #182	@ 0xb6
 80014ec:	f7ff fe3e 	bl	800116c <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80014f0:	7cfb      	ldrb	r3, [r7, #19]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <initVL53L0X+0x112>
 80014f6:	230c      	movs	r3, #12
 80014f8:	e000      	b.n	80014fc <initVL53L0X+0x114>
 80014fa:	2300      	movs	r3, #0
 80014fc:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	75bb      	strb	r3, [r7, #22]
 8001506:	e040      	b.n	800158a <initVL53L0X+0x1a2>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001508:	7dba      	ldrb	r2, [r7, #22]
 800150a:	7d7b      	ldrb	r3, [r7, #21]
 800150c:	429a      	cmp	r2, r3
 800150e:	d303      	bcc.n	8001518 <initVL53L0X+0x130>
 8001510:	7d3b      	ldrb	r3, [r7, #20]
 8001512:	7dfa      	ldrb	r2, [r7, #23]
 8001514:	429a      	cmp	r2, r3
 8001516:	d121      	bne.n	800155c <initVL53L0X+0x174>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8001518:	7dbb      	ldrb	r3, [r7, #22]
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	b2d8      	uxtb	r0, r3
 800151e:	4603      	mov	r3, r0
 8001520:	3318      	adds	r3, #24
 8001522:	443b      	add	r3, r7
 8001524:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001528:	b25a      	sxtb	r2, r3
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	2101      	movs	r1, #1
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	b25b      	sxtb	r3, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4013      	ands	r3, r2
 800153e:	b25a      	sxtb	r2, r3
 8001540:	4603      	mov	r3, r0
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	3318      	adds	r3, #24
 8001546:	443b      	add	r3, r7
 8001548:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800154c:	e01a      	b.n	8001584 <initVL53L0X+0x19c>
 800154e:	bf00      	nop
 8001550:	2000026c 	.word	0x2000026c
 8001554:	200002c0 	.word	0x200002c0
 8001558:	20000266 	.word	0x20000266
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 800155c:	7dbb      	ldrb	r3, [r7, #22]
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3318      	adds	r3, #24
 8001564:	443b      	add	r3, r7
 8001566:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800156a:	461a      	mov	r2, r3
 800156c:	7dbb      	ldrb	r3, [r7, #22]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	fa42 f303 	asr.w	r3, r2, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <initVL53L0X+0x19c>
    {
      spads_enabled++;
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	3301      	adds	r3, #1
 8001582:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8001584:	7dbb      	ldrb	r3, [r7, #22]
 8001586:	3301      	adds	r3, #1
 8001588:	75bb      	strb	r3, [r7, #22]
 800158a:	7dbb      	ldrb	r3, [r7, #22]
 800158c:	2b2f      	cmp	r3, #47	@ 0x2f
 800158e:	d9bb      	bls.n	8001508 <initVL53L0X+0x120>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2206      	movs	r2, #6
 8001596:	4619      	mov	r1, r3
 8001598:	20b0      	movs	r0, #176	@ 0xb0
 800159a:	f7ff fed3 	bl	8001344 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 800159e:	2101      	movs	r1, #1
 80015a0:	20ff      	movs	r0, #255	@ 0xff
 80015a2:	f7ff fde3 	bl	800116c <writeReg>
  writeReg(0x00, 0x00);
 80015a6:	2100      	movs	r1, #0
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fddf 	bl	800116c <writeReg>

  writeReg(0xFF, 0x00);
 80015ae:	2100      	movs	r1, #0
 80015b0:	20ff      	movs	r0, #255	@ 0xff
 80015b2:	f7ff fddb 	bl	800116c <writeReg>
  writeReg(0x09, 0x00);
 80015b6:	2100      	movs	r1, #0
 80015b8:	2009      	movs	r0, #9
 80015ba:	f7ff fdd7 	bl	800116c <writeReg>
  writeReg(0x10, 0x00);
 80015be:	2100      	movs	r1, #0
 80015c0:	2010      	movs	r0, #16
 80015c2:	f7ff fdd3 	bl	800116c <writeReg>
  writeReg(0x11, 0x00);
 80015c6:	2100      	movs	r1, #0
 80015c8:	2011      	movs	r0, #17
 80015ca:	f7ff fdcf 	bl	800116c <writeReg>

  writeReg(0x24, 0x01);
 80015ce:	2101      	movs	r1, #1
 80015d0:	2024      	movs	r0, #36	@ 0x24
 80015d2:	f7ff fdcb 	bl	800116c <writeReg>
  writeReg(0x25, 0xFF);
 80015d6:	21ff      	movs	r1, #255	@ 0xff
 80015d8:	2025      	movs	r0, #37	@ 0x25
 80015da:	f7ff fdc7 	bl	800116c <writeReg>
  writeReg(0x75, 0x00);
 80015de:	2100      	movs	r1, #0
 80015e0:	2075      	movs	r0, #117	@ 0x75
 80015e2:	f7ff fdc3 	bl	800116c <writeReg>

  writeReg(0xFF, 0x01);
 80015e6:	2101      	movs	r1, #1
 80015e8:	20ff      	movs	r0, #255	@ 0xff
 80015ea:	f7ff fdbf 	bl	800116c <writeReg>
  writeReg(0x4E, 0x2C);
 80015ee:	212c      	movs	r1, #44	@ 0x2c
 80015f0:	204e      	movs	r0, #78	@ 0x4e
 80015f2:	f7ff fdbb 	bl	800116c <writeReg>
  writeReg(0x48, 0x00);
 80015f6:	2100      	movs	r1, #0
 80015f8:	2048      	movs	r0, #72	@ 0x48
 80015fa:	f7ff fdb7 	bl	800116c <writeReg>
  writeReg(0x30, 0x20);
 80015fe:	2120      	movs	r1, #32
 8001600:	2030      	movs	r0, #48	@ 0x30
 8001602:	f7ff fdb3 	bl	800116c <writeReg>

  writeReg(0xFF, 0x00);
 8001606:	2100      	movs	r1, #0
 8001608:	20ff      	movs	r0, #255	@ 0xff
 800160a:	f7ff fdaf 	bl	800116c <writeReg>
  writeReg(0x30, 0x09);
 800160e:	2109      	movs	r1, #9
 8001610:	2030      	movs	r0, #48	@ 0x30
 8001612:	f7ff fdab 	bl	800116c <writeReg>
  writeReg(0x54, 0x00);
 8001616:	2100      	movs	r1, #0
 8001618:	2054      	movs	r0, #84	@ 0x54
 800161a:	f7ff fda7 	bl	800116c <writeReg>
  writeReg(0x31, 0x04);
 800161e:	2104      	movs	r1, #4
 8001620:	2031      	movs	r0, #49	@ 0x31
 8001622:	f7ff fda3 	bl	800116c <writeReg>
  writeReg(0x32, 0x03);
 8001626:	2103      	movs	r1, #3
 8001628:	2032      	movs	r0, #50	@ 0x32
 800162a:	f7ff fd9f 	bl	800116c <writeReg>
  writeReg(0x40, 0x83);
 800162e:	2183      	movs	r1, #131	@ 0x83
 8001630:	2040      	movs	r0, #64	@ 0x40
 8001632:	f7ff fd9b 	bl	800116c <writeReg>
  writeReg(0x46, 0x25);
 8001636:	2125      	movs	r1, #37	@ 0x25
 8001638:	2046      	movs	r0, #70	@ 0x46
 800163a:	f7ff fd97 	bl	800116c <writeReg>
  writeReg(0x60, 0x00);
 800163e:	2100      	movs	r1, #0
 8001640:	2060      	movs	r0, #96	@ 0x60
 8001642:	f7ff fd93 	bl	800116c <writeReg>
  writeReg(0x27, 0x00);
 8001646:	2100      	movs	r1, #0
 8001648:	2027      	movs	r0, #39	@ 0x27
 800164a:	f7ff fd8f 	bl	800116c <writeReg>
  writeReg(0x50, 0x06);
 800164e:	2106      	movs	r1, #6
 8001650:	2050      	movs	r0, #80	@ 0x50
 8001652:	f7ff fd8b 	bl	800116c <writeReg>
  writeReg(0x51, 0x00);
 8001656:	2100      	movs	r1, #0
 8001658:	2051      	movs	r0, #81	@ 0x51
 800165a:	f7ff fd87 	bl	800116c <writeReg>
  writeReg(0x52, 0x96);
 800165e:	2196      	movs	r1, #150	@ 0x96
 8001660:	2052      	movs	r0, #82	@ 0x52
 8001662:	f7ff fd83 	bl	800116c <writeReg>
  writeReg(0x56, 0x08);
 8001666:	2108      	movs	r1, #8
 8001668:	2056      	movs	r0, #86	@ 0x56
 800166a:	f7ff fd7f 	bl	800116c <writeReg>
  writeReg(0x57, 0x30);
 800166e:	2130      	movs	r1, #48	@ 0x30
 8001670:	2057      	movs	r0, #87	@ 0x57
 8001672:	f7ff fd7b 	bl	800116c <writeReg>
  writeReg(0x61, 0x00);
 8001676:	2100      	movs	r1, #0
 8001678:	2061      	movs	r0, #97	@ 0x61
 800167a:	f7ff fd77 	bl	800116c <writeReg>
  writeReg(0x62, 0x00);
 800167e:	2100      	movs	r1, #0
 8001680:	2062      	movs	r0, #98	@ 0x62
 8001682:	f7ff fd73 	bl	800116c <writeReg>
  writeReg(0x64, 0x00);
 8001686:	2100      	movs	r1, #0
 8001688:	2064      	movs	r0, #100	@ 0x64
 800168a:	f7ff fd6f 	bl	800116c <writeReg>
  writeReg(0x65, 0x00);
 800168e:	2100      	movs	r1, #0
 8001690:	2065      	movs	r0, #101	@ 0x65
 8001692:	f7ff fd6b 	bl	800116c <writeReg>
  writeReg(0x66, 0xA0);
 8001696:	21a0      	movs	r1, #160	@ 0xa0
 8001698:	2066      	movs	r0, #102	@ 0x66
 800169a:	f7ff fd67 	bl	800116c <writeReg>

  writeReg(0xFF, 0x01);
 800169e:	2101      	movs	r1, #1
 80016a0:	20ff      	movs	r0, #255	@ 0xff
 80016a2:	f7ff fd63 	bl	800116c <writeReg>
  writeReg(0x22, 0x32);
 80016a6:	2132      	movs	r1, #50	@ 0x32
 80016a8:	2022      	movs	r0, #34	@ 0x22
 80016aa:	f7ff fd5f 	bl	800116c <writeReg>
  writeReg(0x47, 0x14);
 80016ae:	2114      	movs	r1, #20
 80016b0:	2047      	movs	r0, #71	@ 0x47
 80016b2:	f7ff fd5b 	bl	800116c <writeReg>
  writeReg(0x49, 0xFF);
 80016b6:	21ff      	movs	r1, #255	@ 0xff
 80016b8:	2049      	movs	r0, #73	@ 0x49
 80016ba:	f7ff fd57 	bl	800116c <writeReg>
  writeReg(0x4A, 0x00);
 80016be:	2100      	movs	r1, #0
 80016c0:	204a      	movs	r0, #74	@ 0x4a
 80016c2:	f7ff fd53 	bl	800116c <writeReg>

  writeReg(0xFF, 0x00);
 80016c6:	2100      	movs	r1, #0
 80016c8:	20ff      	movs	r0, #255	@ 0xff
 80016ca:	f7ff fd4f 	bl	800116c <writeReg>
  writeReg(0x7A, 0x0A);
 80016ce:	210a      	movs	r1, #10
 80016d0:	207a      	movs	r0, #122	@ 0x7a
 80016d2:	f7ff fd4b 	bl	800116c <writeReg>
  writeReg(0x7B, 0x00);
 80016d6:	2100      	movs	r1, #0
 80016d8:	207b      	movs	r0, #123	@ 0x7b
 80016da:	f7ff fd47 	bl	800116c <writeReg>
  writeReg(0x78, 0x21);
 80016de:	2121      	movs	r1, #33	@ 0x21
 80016e0:	2078      	movs	r0, #120	@ 0x78
 80016e2:	f7ff fd43 	bl	800116c <writeReg>

  writeReg(0xFF, 0x01);
 80016e6:	2101      	movs	r1, #1
 80016e8:	20ff      	movs	r0, #255	@ 0xff
 80016ea:	f7ff fd3f 	bl	800116c <writeReg>
  writeReg(0x23, 0x34);
 80016ee:	2134      	movs	r1, #52	@ 0x34
 80016f0:	2023      	movs	r0, #35	@ 0x23
 80016f2:	f7ff fd3b 	bl	800116c <writeReg>
  writeReg(0x42, 0x00);
 80016f6:	2100      	movs	r1, #0
 80016f8:	2042      	movs	r0, #66	@ 0x42
 80016fa:	f7ff fd37 	bl	800116c <writeReg>
  writeReg(0x44, 0xFF);
 80016fe:	21ff      	movs	r1, #255	@ 0xff
 8001700:	2044      	movs	r0, #68	@ 0x44
 8001702:	f7ff fd33 	bl	800116c <writeReg>
  writeReg(0x45, 0x26);
 8001706:	2126      	movs	r1, #38	@ 0x26
 8001708:	2045      	movs	r0, #69	@ 0x45
 800170a:	f7ff fd2f 	bl	800116c <writeReg>
  writeReg(0x46, 0x05);
 800170e:	2105      	movs	r1, #5
 8001710:	2046      	movs	r0, #70	@ 0x46
 8001712:	f7ff fd2b 	bl	800116c <writeReg>
  writeReg(0x40, 0x40);
 8001716:	2140      	movs	r1, #64	@ 0x40
 8001718:	2040      	movs	r0, #64	@ 0x40
 800171a:	f7ff fd27 	bl	800116c <writeReg>
  writeReg(0x0E, 0x06);
 800171e:	2106      	movs	r1, #6
 8001720:	200e      	movs	r0, #14
 8001722:	f7ff fd23 	bl	800116c <writeReg>
  writeReg(0x20, 0x1A);
 8001726:	211a      	movs	r1, #26
 8001728:	2020      	movs	r0, #32
 800172a:	f7ff fd1f 	bl	800116c <writeReg>
  writeReg(0x43, 0x40);
 800172e:	2140      	movs	r1, #64	@ 0x40
 8001730:	2043      	movs	r0, #67	@ 0x43
 8001732:	f7ff fd1b 	bl	800116c <writeReg>

  writeReg(0xFF, 0x00);
 8001736:	2100      	movs	r1, #0
 8001738:	20ff      	movs	r0, #255	@ 0xff
 800173a:	f7ff fd17 	bl	800116c <writeReg>
  writeReg(0x34, 0x03);
 800173e:	2103      	movs	r1, #3
 8001740:	2034      	movs	r0, #52	@ 0x34
 8001742:	f7ff fd13 	bl	800116c <writeReg>
  writeReg(0x35, 0x44);
 8001746:	2144      	movs	r1, #68	@ 0x44
 8001748:	2035      	movs	r0, #53	@ 0x35
 800174a:	f7ff fd0f 	bl	800116c <writeReg>

  writeReg(0xFF, 0x01);
 800174e:	2101      	movs	r1, #1
 8001750:	20ff      	movs	r0, #255	@ 0xff
 8001752:	f7ff fd0b 	bl	800116c <writeReg>
  writeReg(0x31, 0x04);
 8001756:	2104      	movs	r1, #4
 8001758:	2031      	movs	r0, #49	@ 0x31
 800175a:	f7ff fd07 	bl	800116c <writeReg>
  writeReg(0x4B, 0x09);
 800175e:	2109      	movs	r1, #9
 8001760:	204b      	movs	r0, #75	@ 0x4b
 8001762:	f7ff fd03 	bl	800116c <writeReg>
  writeReg(0x4C, 0x05);
 8001766:	2105      	movs	r1, #5
 8001768:	204c      	movs	r0, #76	@ 0x4c
 800176a:	f7ff fcff 	bl	800116c <writeReg>
  writeReg(0x4D, 0x04);
 800176e:	2104      	movs	r1, #4
 8001770:	204d      	movs	r0, #77	@ 0x4d
 8001772:	f7ff fcfb 	bl	800116c <writeReg>

  writeReg(0xFF, 0x00);
 8001776:	2100      	movs	r1, #0
 8001778:	20ff      	movs	r0, #255	@ 0xff
 800177a:	f7ff fcf7 	bl	800116c <writeReg>
  writeReg(0x44, 0x00);
 800177e:	2100      	movs	r1, #0
 8001780:	2044      	movs	r0, #68	@ 0x44
 8001782:	f7ff fcf3 	bl	800116c <writeReg>
  writeReg(0x45, 0x20);
 8001786:	2120      	movs	r1, #32
 8001788:	2045      	movs	r0, #69	@ 0x45
 800178a:	f7ff fcef 	bl	800116c <writeReg>
  writeReg(0x47, 0x08);
 800178e:	2108      	movs	r1, #8
 8001790:	2047      	movs	r0, #71	@ 0x47
 8001792:	f7ff fceb 	bl	800116c <writeReg>
  writeReg(0x48, 0x28);
 8001796:	2128      	movs	r1, #40	@ 0x28
 8001798:	2048      	movs	r0, #72	@ 0x48
 800179a:	f7ff fce7 	bl	800116c <writeReg>
  writeReg(0x67, 0x00);
 800179e:	2100      	movs	r1, #0
 80017a0:	2067      	movs	r0, #103	@ 0x67
 80017a2:	f7ff fce3 	bl	800116c <writeReg>
  writeReg(0x70, 0x04);
 80017a6:	2104      	movs	r1, #4
 80017a8:	2070      	movs	r0, #112	@ 0x70
 80017aa:	f7ff fcdf 	bl	800116c <writeReg>
  writeReg(0x71, 0x01);
 80017ae:	2101      	movs	r1, #1
 80017b0:	2071      	movs	r0, #113	@ 0x71
 80017b2:	f7ff fcdb 	bl	800116c <writeReg>
  writeReg(0x72, 0xFE);
 80017b6:	21fe      	movs	r1, #254	@ 0xfe
 80017b8:	2072      	movs	r0, #114	@ 0x72
 80017ba:	f7ff fcd7 	bl	800116c <writeReg>
  writeReg(0x76, 0x00);
 80017be:	2100      	movs	r1, #0
 80017c0:	2076      	movs	r0, #118	@ 0x76
 80017c2:	f7ff fcd3 	bl	800116c <writeReg>
  writeReg(0x77, 0x00);
 80017c6:	2100      	movs	r1, #0
 80017c8:	2077      	movs	r0, #119	@ 0x77
 80017ca:	f7ff fccf 	bl	800116c <writeReg>

  writeReg(0xFF, 0x01);
 80017ce:	2101      	movs	r1, #1
 80017d0:	20ff      	movs	r0, #255	@ 0xff
 80017d2:	f7ff fccb 	bl	800116c <writeReg>
  writeReg(0x0D, 0x01);
 80017d6:	2101      	movs	r1, #1
 80017d8:	200d      	movs	r0, #13
 80017da:	f7ff fcc7 	bl	800116c <writeReg>

  writeReg(0xFF, 0x00);
 80017de:	2100      	movs	r1, #0
 80017e0:	20ff      	movs	r0, #255	@ 0xff
 80017e2:	f7ff fcc3 	bl	800116c <writeReg>
  writeReg(0x80, 0x01);
 80017e6:	2101      	movs	r1, #1
 80017e8:	2080      	movs	r0, #128	@ 0x80
 80017ea:	f7ff fcbf 	bl	800116c <writeReg>
  writeReg(0x01, 0xF8);
 80017ee:	21f8      	movs	r1, #248	@ 0xf8
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fcbb 	bl	800116c <writeReg>

  writeReg(0xFF, 0x01);
 80017f6:	2101      	movs	r1, #1
 80017f8:	20ff      	movs	r0, #255	@ 0xff
 80017fa:	f7ff fcb7 	bl	800116c <writeReg>
  writeReg(0x8E, 0x01);
 80017fe:	2101      	movs	r1, #1
 8001800:	208e      	movs	r0, #142	@ 0x8e
 8001802:	f7ff fcb3 	bl	800116c <writeReg>
  writeReg(0x00, 0x01);
 8001806:	2101      	movs	r1, #1
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fcaf 	bl	800116c <writeReg>
  writeReg(0xFF, 0x00);
 800180e:	2100      	movs	r1, #0
 8001810:	20ff      	movs	r0, #255	@ 0xff
 8001812:	f7ff fcab 	bl	800116c <writeReg>
  writeReg(0x80, 0x00);
 8001816:	2100      	movs	r1, #0
 8001818:	2080      	movs	r0, #128	@ 0x80
 800181a:	f7ff fca7 	bl	800116c <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800181e:	2104      	movs	r1, #4
 8001820:	200a      	movs	r0, #10
 8001822:	f7ff fca3 	bl	800116c <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001826:	2084      	movs	r0, #132	@ 0x84
 8001828:	f7ff fd34 	bl	8001294 <readReg>
 800182c:	4603      	mov	r3, r0
 800182e:	f023 0310 	bic.w	r3, r3, #16
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	2084      	movs	r0, #132	@ 0x84
 8001838:	f7ff fc98 	bl	800116c <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800183c:	2101      	movs	r1, #1
 800183e:	200b      	movs	r0, #11
 8001840:	f7ff fc94 	bl	800116c <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 8001844:	f000 f906 	bl	8001a54 <getMeasurementTimingBudget>
 8001848:	4603      	mov	r3, r0
 800184a:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <initVL53L0X+0x4c8>)
 800184c:	6013      	str	r3, [r2, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800184e:	21e8      	movs	r1, #232	@ 0xe8
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fc8b 	bl	800116c <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 8001856:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <initVL53L0X+0x4c8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f862 	bl	8001924 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001860:	2101      	movs	r1, #1
 8001862:	2001      	movs	r0, #1
 8001864:	f7ff fc82 	bl	800116c <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 8001868:	2040      	movs	r0, #64	@ 0x40
 800186a:	f000 fbfb 	bl	8002064 <performSingleRefCalibration>
 800186e:	4603      	mov	r3, r0
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <initVL53L0X+0x496>
 800187a:	2300      	movs	r3, #0
 800187c:	e013      	b.n	80018a6 <initVL53L0X+0x4be>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800187e:	2102      	movs	r1, #2
 8001880:	2001      	movs	r0, #1
 8001882:	f7ff fc73 	bl	800116c <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 8001886:	2000      	movs	r0, #0
 8001888:	f000 fbec 	bl	8002064 <performSingleRefCalibration>
 800188c:	4603      	mov	r3, r0
 800188e:	f083 0301 	eor.w	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <initVL53L0X+0x4b4>
 8001898:	2300      	movs	r3, #0
 800189a:	e004      	b.n	80018a6 <initVL53L0X+0x4be>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800189c:	21e8      	movs	r1, #232	@ 0xe8
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff fc64 	bl	800116c <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000268 	.word	0x20000268
 80018b4:	00000000 	.word	0x00000000

080018b8 <setSignalRateLimit>:

// Set the return signal rate limit check value in units of MCPS (mega counts
// per second). Returns true if limit is valid.
bool setSignalRateLimit(float limit_Mcps)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80018c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	d40a      	bmi.n	80018e6 <setSignalRateLimit+0x2e>
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7fe fe41 	bl	8000558 <__aeabi_f2d>
 80018d6:	a311      	add	r3, pc, #68	@ (adr r3, 800191c <setSignalRateLimit+0x64>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7ff f924 	bl	8000b28 <__aeabi_dcmpgt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <setSignalRateLimit+0x32>
 80018e6:	2300      	movs	r3, #0
 80018e8:	e00f      	b.n	800190a <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, (uint16_t)(limit_Mcps * (1 << 7)));
 80018ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001918 <setSignalRateLimit+0x60>
 80018f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fa:	ee17 3a90 	vmov	r3, s15
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	2044      	movs	r0, #68	@ 0x44
 8001904:	f7ff fc5c 	bl	80011c0 <writeReg16Bit>
  return true;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	43000000 	.word	0x43000000
 800191c:	0a3d70a4 	.word	0x0a3d70a4
 8001920:	407fffd7 	.word	0x407fffd7

08001924 <setMeasurementTimingBudget>:
  return (float)readReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT) / (1 << 7);
}

// Set the measurement timing budget in microseconds. Returns true if valid.
bool setMeasurementTimingBudget(uint32_t budget_us)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b092      	sub	sp, #72	@ 0x48
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800192c:	f44f 63a5 	mov.w	r3, #1320	@ 0x528
 8001930:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  uint16_t const EndOverhead        = 960;
 8001934:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001938:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t const MsrcOverhead       = 660;
 800193a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800193e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  uint16_t const TccOverhead        = 590;
 8001940:	f240 234e 	movw	r3, #590	@ 0x24e
 8001944:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint16_t const DssOverhead        = 690;
 8001946:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800194a:	873b      	strh	r3, [r7, #56]	@ 0x38
  uint16_t const PreRangeOverhead   = 660;
 800194c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001950:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint16_t const FinalRangeOverhead = 550;
 8001952:	f240 2326 	movw	r3, #550	@ 0x226
 8001956:	86bb      	strh	r3, [r7, #52]	@ 0x34

  uint32_t const MinTimingBudget = 20000;
 8001958:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800195c:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001962:	429a      	cmp	r2, r3
 8001964:	d201      	bcs.n	800196a <setMeasurementTimingBudget+0x46>
 8001966:	2300      	movs	r3, #0
 8001968:	e06e      	b.n	8001a48 <setMeasurementTimingBudget+0x124>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 800196a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800196e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001970:	4413      	add	r3, r2
 8001972:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 8001974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fa4e 	bl	8001e1a <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800197e:	f107 020c 	add.w	r2, r7, #12
 8001982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fa78 	bl	8001e7e <getSequenceStepTimeouts>

  if (enables.tcc)
 800198e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <setMeasurementTimingBudget+0x7e>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800199a:	4413      	add	r3, r2
 800199c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800199e:	4413      	add	r3, r2
 80019a0:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 80019a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <setMeasurementTimingBudget+0x96>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80019ae:	4413      	add	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019b4:	4413      	add	r3, r2
 80019b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019b8:	e009      	b.n	80019ce <setMeasurementTimingBudget+0xaa>
  }
  else if (enables.msrc)
 80019ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <setMeasurementTimingBudget+0xaa>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80019c6:	4413      	add	r3, r2
 80019c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019ca:	4413      	add	r3, r2
 80019cc:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 80019ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <setMeasurementTimingBudget+0xbe>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80019da:	4413      	add	r3, r2
 80019dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019de:	4413      	add	r3, r2
 80019e0:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 80019e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d02d      	beq.n	8001a46 <setMeasurementTimingBudget+0x122>
  {
    used_budget_us += FinalRangeOverhead;
 80019ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80019ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019ee:	4413      	add	r3, r2
 80019f0:	647b      	str	r3, [r7, #68]	@ 0x44

    if (used_budget_us > budget_us)
 80019f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d901      	bls.n	80019fe <setMeasurementTimingBudget+0xda>
    {
      return false; // Requested timeout too big.
 80019fa:	2300      	movs	r3, #0
 80019fc:	e024      	b.n	8001a48 <setMeasurementTimingBudget+0x124>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8001a06:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a0e:	f000 fb03 	bl	8002018 <timeoutMicrosecondsToMclks>
 8001a12:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8001a14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    if (enables.pre_range)
 8001a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <setMeasurementTimingBudget+0x108>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001a20:	8a7a      	ldrh	r2, [r7, #18]
 8001a22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001a26:	4413      	add	r3, r2
 8001a28:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001a2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fa9e 	bl	8001f72 <encodeTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	2071      	movs	r0, #113	@ 0x71
 8001a3c:	f7ff fbc0 	bl	80011c0 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    g_measTimBudUs = budget_us; // store for internal reuse
 8001a40:	4a03      	ldr	r2, [pc, #12]	@ (8001a50 <setMeasurementTimingBudget+0x12c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  }
  return true;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3748      	adds	r7, #72	@ 0x48
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000268 	.word	0x20000268

08001a54 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
uint32_t getMeasurementTimingBudget(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	@ 0x30
 8001a58:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910;
 8001a5a:	f240 7376 	movw	r3, #1910	@ 0x776
 8001a5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t const EndOverhead        = 960;
 8001a60:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001a64:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t const MsrcOverhead       = 660;
 8001a66:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001a6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const TccOverhead        = 590;
 8001a6c:	f240 234e 	movw	r3, #590	@ 0x24e
 8001a70:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t const DssOverhead        = 690;
 8001a72:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8001a76:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t const PreRangeOverhead   = 660;
 8001a78:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001a7c:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8001a7e:	f240 2326 	movw	r3, #550	@ 0x226
 8001a82:	83fb      	strh	r3, [r7, #30]

  uint32_t budget_us = StartOverhead + EndOverhead;
 8001a84:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001a86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a88:	4413      	add	r3, r2
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 8001a8c:	f107 0318 	add.w	r3, r7, #24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f9c2 	bl	8001e1a <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8001a96:	463a      	mov	r2, r7
 8001a98:	f107 0318 	add.w	r3, r7, #24
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f9ed 	bl	8001e7e <getSequenceStepTimeouts>

  if (enables.tcc) { budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead); }
 8001aa4:	7e3b      	ldrb	r3, [r7, #24]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <getMeasurementTimingBudget+0x62>
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aae:	4413      	add	r3, r2
 8001ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ab2:	4413      	add	r3, r2
 8001ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (enables.dss) { budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead); }
 8001ab6:	7ebb      	ldrb	r3, [r7, #26]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <getMeasurementTimingBudget+0x78>
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ac6:	4413      	add	r3, r2
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aca:	e008      	b.n	8001ade <getMeasurementTimingBudget+0x8a>
  else if (enables.msrc) { budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead); }
 8001acc:	7e7b      	ldrb	r3, [r7, #25]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <getMeasurementTimingBudget+0x8a>
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ad6:	4413      	add	r3, r2
 8001ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ada:	4413      	add	r3, r2
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (enables.pre_range) { budget_us += (timeouts.pre_range_us + PreRangeOverhead); }
 8001ade:	7efb      	ldrb	r3, [r7, #27]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <getMeasurementTimingBudget+0x9c>
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	8c3b      	ldrh	r3, [r7, #32]
 8001ae8:	4413      	add	r3, r2
 8001aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aec:	4413      	add	r3, r2
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (enables.final_range) { budget_us += (timeouts.final_range_us + FinalRangeOverhead); }
 8001af0:	7f3b      	ldrb	r3, [r7, #28]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <getMeasurementTimingBudget+0xae>
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	8bfb      	ldrh	r3, [r7, #30]
 8001afa:	4413      	add	r3, r2
 8001afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001afe:	4413      	add	r3, r2
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c

  g_measTimBudUs = budget_us; // store for internal reuse
 8001b02:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <getMeasurementTimingBudget+0xc0>)
 8001b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b06:	6013      	str	r3, [r2, #0]
  return budget_us;
 8001b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3730      	adds	r7, #48	@ 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000268 	.word	0x20000268

08001b18 <getVcselPulsePeriod>:
}


// Get the VCSEL pulse period in PCLKs for the given period type.
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if (type == VcselPeriodPreRange)
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d108      	bne.n	8001b3a <getVcselPulsePeriod+0x22>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001b28:	2050      	movs	r0, #80	@ 0x50
 8001b2a:	f7ff fbb3 	bl	8001294 <readReg>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	3301      	adds	r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	e00c      	b.n	8001b54 <getVcselPulsePeriod+0x3c>
  }
  else if (type == VcselPeriodFinalRange)
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <getVcselPulsePeriod+0x3a>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8001b40:	2070      	movs	r0, #112	@ 0x70
 8001b42:	f7ff fba7 	bl	8001294 <readReg>
 8001b46:	4603      	mov	r3, r0
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	e000      	b.n	8001b54 <getVcselPulsePeriod+0x3c>
  }
  else { return 255; } // Indicate error
 8001b52:	23ff      	movs	r3, #255	@ 0xff
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <startContinuous>:

// Start continuous ranging measurements.
void startContinuous(uint32_t period_ms)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8001b64:	2101      	movs	r1, #1
 8001b66:	2080      	movs	r0, #128	@ 0x80
 8001b68:	f7ff fb00 	bl	800116c <writeReg>
  writeReg(0xFF, 0x01);
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	20ff      	movs	r0, #255	@ 0xff
 8001b70:	f7ff fafc 	bl	800116c <writeReg>
  writeReg(0x00, 0x00);
 8001b74:	2100      	movs	r1, #0
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff faf8 	bl	800116c <writeReg>
  writeReg(0x91, g_stopVariable);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <startContinuous+0x88>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	2091      	movs	r0, #145	@ 0x91
 8001b84:	f7ff faf2 	bl	800116c <writeReg>
  writeReg(0x00, 0x01);
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff faee 	bl	800116c <writeReg>
  writeReg(0xFF, 0x00);
 8001b90:	2100      	movs	r1, #0
 8001b92:	20ff      	movs	r0, #255	@ 0xff
 8001b94:	f7ff faea 	bl	800116c <writeReg>
  writeReg(0x80, 0x00);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2080      	movs	r0, #128	@ 0x80
 8001b9c:	f7ff fae6 	bl	800116c <writeReg>

  if (period_ms != 0)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d015      	beq.n	8001bd2 <startContinuous+0x76>
  {
    // continuous timed mode
    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 8001ba6:	20f8      	movs	r0, #248	@ 0xf8
 8001ba8:	f7ff fb9c 	bl	80012e4 <readReg16Bit>
 8001bac:	4603      	mov	r3, r0
 8001bae:	81fb      	strh	r3, [r7, #14]
    if (osc_calibrate_val != 0)
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <startContinuous+0x64>
    {
      period_ms *= osc_calibrate_val;
 8001bb6:	89fa      	ldrh	r2, [r7, #14]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	607b      	str	r3, [r7, #4]
    }
    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	2004      	movs	r0, #4
 8001bc4:	f7ff fb2e 	bl	8001224 <writeReg32Bit>
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8001bc8:	2104      	movs	r1, #4
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff face 	bl	800116c <writeReg>
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8001bd0:	e003      	b.n	8001bda <startContinuous+0x7e>
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fac9 	bl	800116c <writeReg>
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000266 	.word	0x20000266

08001be8 <readRangeContinuousMillimeters>:
  writeReg(0x00, 0x01);
  writeReg(0xFF, 0x00);
}

// Returns a range reading in millimeters when continuous mode is active
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeoutInternal(); // Use internal function
 8001bf0:	f7ff fa92 	bl	8001118 <startTimeoutInternal>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8001bf4:	e012      	b.n	8001c1c <readRangeContinuousMillimeters+0x34>
    if (checkTimeoutExpiredInternal()) // Use internal function
 8001bf6:	f7ff fa9b 	bl	8001130 <checkTimeoutExpiredInternal>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <readRangeContinuousMillimeters+0x34>
    {
      g_isTimeout = true;
 8001c00:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <readRangeContinuousMillimeters+0xdc>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
      if (extraStats != 0) memset(extraStats, 0xFF, sizeof(statInfo_t_VL53L0X)); // Indicate error in stats
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <readRangeContinuousMillimeters+0x2e>
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	21ff      	movs	r1, #255	@ 0xff
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f007 fa3b 	bl	800908c <memset>
      return 65535; // Indicate timeout
 8001c16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c1a:	e04e      	b.n	8001cba <readRangeContinuousMillimeters+0xd2>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8001c1c:	2013      	movs	r0, #19
 8001c1e:	f7ff fb39 	bl	8001294 <readReg>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0e4      	beq.n	8001bf6 <readRangeContinuousMillimeters+0xe>
     // Add a small delay or yield if using RTOS to prevent busy-waiting hogging CPU
     #ifdef CMSIS_OS_RTX // Check if using CMSIS-RTOS
     osDelay(1); // Minimal delay for RTOS context switch
     #endif
  }
  if( extraStats == 0 ){
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <readRangeContinuousMillimeters+0x56>
    // Read only the distance value
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8001c32:	201e      	movs	r0, #30
 8001c34:	f7ff fb56 	bl	80012e4 <readReg16Bit>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	82fb      	strh	r3, [r7, #22]
 8001c3c:	e038      	b.n	8001cb0 <readRangeContinuousMillimeters+0xc8>
  } else {
    // Read all statistics
    readMulti(0x14, tempBuffer, 12);
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	220c      	movs	r2, #12
 8001c44:	4619      	mov	r1, r3
 8001c46:	2014      	movs	r0, #20
 8001c48:	f7ff fba4 	bl	8001394 <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00] >> 3; // Extract bits 7:3 for status
 8001c4c:	7a3b      	ldrb	r3, [r7, #8]
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = ((uint16_t)tempBuffer[0x02] << 8) | tempBuffer[0x03];
 8001c56:	7abb      	ldrb	r3, [r7, #10]
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = ((uint16_t)tempBuffer[0x06] << 8) | tempBuffer[0x07];
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = ((uint16_t)tempBuffer[0x08] << 8) | tempBuffer[0x09];
 8001c82:	7c3b      	ldrb	r3, [r7, #16]
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	7c7b      	ldrb	r3, [r7, #17]
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	809a      	strh	r2, [r3, #4]
    temp                    = ((uint16_t)tempBuffer[0x0A] << 8) | tempBuffer[0x0B];
 8001c98:	7cbb      	ldrb	r3, [r7, #18]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	7cfb      	ldrb	r3, [r7, #19]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	82fb      	strh	r3, [r7, #22]
    extraStats->rawDistance = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	8afa      	ldrh	r2, [r7, #22]
 8001cae:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	200b      	movs	r0, #11
 8001cb4:	f7ff fa5a 	bl	800116c <writeReg>
  return temp;
 8001cb8:	8afb      	ldrh	r3, [r7, #22]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000262 	.word	0x20000262

08001cc8 <timeoutOccurred>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()? Clears the timeout flag.
bool timeoutOccurred()
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
  bool tmp = g_isTimeout;
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <timeoutOccurred+0x20>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  g_isTimeout = false;
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <timeoutOccurred+0x20>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
  return tmp;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000262 	.word	0x20000262

08001cec <setTimeout>:

void setTimeout(uint16_t timeout){
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  g_ioTimeout = timeout;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <setTimeout+0x1c>)
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	8013      	strh	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000260 	.word	0x20000260

08001d0c <getSpadInfo>:

// Private Methods /////////////////////////////////////////////////////////////

// Get reference SPAD (single photon avalanche diode) count and type
static bool getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8001d16:	2101      	movs	r1, #1
 8001d18:	2080      	movs	r0, #128	@ 0x80
 8001d1a:	f7ff fa27 	bl	800116c <writeReg>
  writeReg(0xFF, 0x01);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	20ff      	movs	r0, #255	@ 0xff
 8001d22:	f7ff fa23 	bl	800116c <writeReg>
  writeReg(0x00, 0x00);
 8001d26:	2100      	movs	r1, #0
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fa1f 	bl	800116c <writeReg>

  writeReg(0xFF, 0x06);
 8001d2e:	2106      	movs	r1, #6
 8001d30:	20ff      	movs	r0, #255	@ 0xff
 8001d32:	f7ff fa1b 	bl	800116c <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8001d36:	2083      	movs	r0, #131	@ 0x83
 8001d38:	f7ff faac 	bl	8001294 <readReg>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	2083      	movs	r0, #131	@ 0x83
 8001d48:	f7ff fa10 	bl	800116c <writeReg>
  writeReg(0xFF, 0x07);
 8001d4c:	2107      	movs	r1, #7
 8001d4e:	20ff      	movs	r0, #255	@ 0xff
 8001d50:	f7ff fa0c 	bl	800116c <writeReg>
  writeReg(0x81, 0x01);
 8001d54:	2101      	movs	r1, #1
 8001d56:	2081      	movs	r0, #129	@ 0x81
 8001d58:	f7ff fa08 	bl	800116c <writeReg>

  writeReg(0x80, 0x01);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2080      	movs	r0, #128	@ 0x80
 8001d60:	f7ff fa04 	bl	800116c <writeReg>

  writeReg(0x94, 0x6b);
 8001d64:	216b      	movs	r1, #107	@ 0x6b
 8001d66:	2094      	movs	r0, #148	@ 0x94
 8001d68:	f7ff fa00 	bl	800116c <writeReg>
  writeReg(0x83, 0x00);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2083      	movs	r0, #131	@ 0x83
 8001d70:	f7ff f9fc 	bl	800116c <writeReg>
  startTimeoutInternal();
 8001d74:	f7ff f9d0 	bl	8001118 <startTimeoutInternal>
  while (readReg(0x83) == 0x00)
 8001d78:	e006      	b.n	8001d88 <getSpadInfo+0x7c>
  {
    if (checkTimeoutExpiredInternal()) { return false; }
 8001d7a:	f7ff f9d9 	bl	8001130 <checkTimeoutExpiredInternal>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <getSpadInfo+0x7c>
 8001d84:	2300      	movs	r3, #0
 8001d86:	e044      	b.n	8001e12 <getSpadInfo+0x106>
  while (readReg(0x83) == 0x00)
 8001d88:	2083      	movs	r0, #131	@ 0x83
 8001d8a:	f7ff fa83 	bl	8001294 <readReg>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f2      	beq.n	8001d7a <getSpadInfo+0x6e>
     #ifdef CMSIS_OS_RTX
     osDelay(1);
     #endif
  }
  writeReg(0x83, 0x01);
 8001d94:	2101      	movs	r1, #1
 8001d96:	2083      	movs	r0, #131	@ 0x83
 8001d98:	f7ff f9e8 	bl	800116c <writeReg>
  tmp = readReg(0x92);
 8001d9c:	2092      	movs	r0, #146	@ 0x92
 8001d9e:	f7ff fa79 	bl	8001294 <readReg>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	09db      	lsrs	r3, r3, #7
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2081      	movs	r0, #129	@ 0x81
 8001dce:	f7ff f9cd 	bl	800116c <writeReg>
  writeReg(0xFF, 0x06);
 8001dd2:	2106      	movs	r1, #6
 8001dd4:	20ff      	movs	r0, #255	@ 0xff
 8001dd6:	f7ff f9c9 	bl	800116c <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8001dda:	2083      	movs	r0, #131	@ 0x83
 8001ddc:	f7ff fa5a 	bl	8001294 <readReg>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	2083      	movs	r0, #131	@ 0x83
 8001dec:	f7ff f9be 	bl	800116c <writeReg>
  writeReg(0xFF, 0x01);
 8001df0:	2101      	movs	r1, #1
 8001df2:	20ff      	movs	r0, #255	@ 0xff
 8001df4:	f7ff f9ba 	bl	800116c <writeReg>
  writeReg(0x00, 0x01);
 8001df8:	2101      	movs	r1, #1
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff f9b6 	bl	800116c <writeReg>

  writeReg(0xFF, 0x00);
 8001e00:	2100      	movs	r1, #0
 8001e02:	20ff      	movs	r0, #255	@ 0xff
 8001e04:	f7ff f9b2 	bl	800116c <writeReg>
  writeReg(0x80, 0x00);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2080      	movs	r0, #128	@ 0x80
 8001e0c:	f7ff f9ae 	bl	800116c <writeReg>

  return true;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <getSequenceStepEnables>:

// Get sequence step enables
static void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff fa36 	bl	8001294 <readReg>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	08db      	lsrs	r3, r3, #3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	09db      	lsrs	r3, r3, #7
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	711a      	strb	r2, [r3, #4]
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <getSequenceStepTimeouts>:

// Get sequence step timeouts
static void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff fe45 	bl	8001b18 <getVcselPulsePeriod>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	801a      	strh	r2, [r3, #0]
  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001e96:	2046      	movs	r0, #70	@ 0x46
 8001e98:	f7ff f9fc 	bl	8001294 <readReg>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us = timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	889a      	ldrh	r2, [r3, #4]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 f888 	bl	8001fc8 <timeoutMclksToMicroseconds>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	60da      	str	r2, [r3, #12]
  timeouts->pre_range_mclks = decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001ebe:	2051      	movs	r0, #81	@ 0x51
 8001ec0:	f7ff fa10 	bl	80012e4 <readReg16Bit>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f83e 	bl	8001f48 <decodeTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us = timeoutMclksToMicroseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	88da      	ldrh	r2, [r3, #6]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	f000 f871 	bl	8001fc8 <timeoutMclksToMicroseconds>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	611a      	str	r2, [r3, #16]
  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff fe13 	bl	8001b18 <getVcselPulsePeriod>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	805a      	strh	r2, [r3, #2]
  timeouts->final_range_mclks = decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001efa:	2071      	movs	r0, #113	@ 0x71
 8001efc:	f7ff f9f2 	bl	80012e4 <readReg16Bit>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f820 	bl	8001f48 <decodeTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	811a      	strh	r2, [r3, #8]
  if (enables->pre_range) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <getSequenceStepTimeouts+0xaa>
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	891a      	ldrh	r2, [r3, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	88db      	ldrh	r3, [r3, #6]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	811a      	strh	r2, [r3, #8]
  }
  timeouts->final_range_us = timeoutMclksToMicroseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	891a      	ldrh	r2, [r3, #8]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	885b      	ldrh	r3, [r3, #2]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f000 f847 	bl	8001fc8 <timeoutMclksToMicroseconds>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	615a      	str	r2, [r3, #20]
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <decodeTimeout>:


// Decode sequence step timeout in MCLKs from register value
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
  return (uint16_t)((reg_val & 0x00FF) << (uint8_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	0a12      	lsrs	r2, r2, #8
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	b29b      	uxth	r3, r3
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <encodeTimeout>:

// Encode sequence step timeout register value from timeout in MCLKs
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b085      	sub	sp, #20
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	80fb      	strh	r3, [r7, #6]
  uint32_t ls_byte = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	817b      	strh	r3, [r7, #10]
  if (timeout_mclks > 0) {
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <encodeTimeout+0x46>
    ls_byte = timeout_mclks - 1;
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
    while ((ls_byte & 0xFFFFFF00) > 0) {
 8001f90:	e005      	b.n	8001f9e <encodeTimeout+0x2c>
      ls_byte >>= 1;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8001f98:	897b      	ldrh	r3, [r7, #10]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0) {
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2bff      	cmp	r3, #255	@ 0xff
 8001fa2:	d8f6      	bhi.n	8001f92 <encodeTimeout+0x20>
    }
    return (ms_byte << 8) | (ls_byte & 0xFF);
 8001fa4:	897b      	ldrh	r3, [r7, #10]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	e000      	b.n	8001fba <encodeTimeout+0x48>
  } else {
    return 0;
 8001fb8:	2300      	movs	r3, #0
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	80fb      	strh	r3, [r7, #6]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <timeoutMclksToMicroseconds+0x48>)
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <timeoutMclksToMicroseconds+0x4c>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	099b      	lsrs	r3, r3, #6
 8001fec:	60fb      	str	r3, [r7, #12]
  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	fb03 f202 	mul.w	r2, r3, r2
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <timeoutMclksToMicroseconds+0x4c>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	099b      	lsrs	r3, r3, #6
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	003a2f00 	.word	0x003a2f00
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <timeoutMicrosecondsToMclks+0x44>)
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002030:	4a0b      	ldr	r2, [pc, #44]	@ (8002060 <timeoutMicrosecondsToMclks+0x48>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	099b      	lsrs	r3, r3, #6
 8002038:	60fb      	str	r3, [r7, #12]
  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002040:	fb03 f202 	mul.w	r2, r3, r2
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	441a      	add	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	003a2f00 	.word	0x003a2f00
 8002060:	10624dd3 	.word	0x10624dd3

08002064 <performSingleRefCalibration>:

// Perform single reference calibration
static bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	2000      	movs	r0, #0
 800207a:	f7ff f877 	bl	800116c <writeReg>
  startTimeoutInternal();
 800207e:	f7ff f84b 	bl	8001118 <startTimeoutInternal>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8002082:	e006      	b.n	8002092 <performSingleRefCalibration+0x2e>
    if (checkTimeoutExpiredInternal()) { return false; }
 8002084:	f7ff f854 	bl	8001130 <checkTimeoutExpiredInternal>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <performSingleRefCalibration+0x2e>
 800208e:	2300      	movs	r3, #0
 8002090:	e010      	b.n	80020b4 <performSingleRefCalibration+0x50>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8002092:	2013      	movs	r0, #19
 8002094:	f7ff f8fe 	bl	8001294 <readReg>
 8002098:	4603      	mov	r3, r0
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <performSingleRefCalibration+0x20>
     #ifdef CMSIS_OS_RTX
     osDelay(1);
     #endif
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80020a2:	2101      	movs	r1, #1
 80020a4:	200b      	movs	r0, #11
 80020a6:	f7ff f861 	bl	800116c <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 80020aa:	2100      	movs	r1, #0
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff f85d 	bl	800116c <writeReg>
  return true;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <logToLCD>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// --- Logging Function ---
void logToLCD(const char* message) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    strncpy(g_lcdLogBuffer, message, LCD_LOG_BUFFER_SIZE - 1);
 80020c4:	2227      	movs	r2, #39	@ 0x27
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4806      	ldr	r0, [pc, #24]	@ (80020e4 <logToLCD+0x28>)
 80020ca:	f006 ffe7 	bl	800909c <strncpy>
    g_lcdLogBuffer[LCD_LOG_BUFFER_SIZE - 1] = '\0'; // Ensure null termination
 80020ce:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <logToLCD+0x28>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    g_lcdLogUpdated = true; // Signal LCD update needed
 80020d6:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <logToLCD+0x2c>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
    // Optional: Print to UART for debugging
    // printf("LOG: %s\r\n", message);
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000010 	.word	0x20000010
 80020e8:	20000038 	.word	0x20000038

080020ec <setRelayState>:

// --- Relay Control ---
void setRelayState(uint8_t relayNum, bool state) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	@ 0x30
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	4603      	mov	r3, r0
 80020f4:	460a      	mov	r2, r1
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71bb      	strb	r3, [r7, #6]
    GPIO_PinState pinState = state ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    char logMsg[30];
    bool changed = false;
 8002102:	2300      	movs	r3, #0
 8002104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (relayNum == 1) {
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d112      	bne.n	8002134 <setRelayState+0x48>
        if (g_relay1State != state) {
 800210e:	4b23      	ldr	r3, [pc, #140]	@ (800219c <setRelayState+0xb0>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	79ba      	ldrb	r2, [r7, #6]
 8002114:	429a      	cmp	r2, r3
 8002116:	d022      	beq.n	800215e <setRelayState+0x72>
            HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, pinState);
 8002118:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800211c:	461a      	mov	r2, r3
 800211e:	2101      	movs	r1, #1
 8002120:	481f      	ldr	r0, [pc, #124]	@ (80021a0 <setRelayState+0xb4>)
 8002122:	f002 fc0f 	bl	8004944 <HAL_GPIO_WritePin>
            g_relay1State = state;
 8002126:	4a1d      	ldr	r2, [pc, #116]	@ (800219c <setRelayState+0xb0>)
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	7013      	strb	r3, [r2, #0]
            changed = true;
 800212c:	2301      	movs	r3, #1
 800212e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002132:	e014      	b.n	800215e <setRelayState+0x72>
        }
    } else if (relayNum == 2) {
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d111      	bne.n	800215e <setRelayState+0x72>
        if (g_relay2State != state) {
 800213a:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <setRelayState+0xb8>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	79ba      	ldrb	r2, [r7, #6]
 8002140:	429a      	cmp	r2, r3
 8002142:	d00c      	beq.n	800215e <setRelayState+0x72>
            HAL_GPIO_WritePin(RELAY2_PORT, RELAY2_PIN, pinState);
 8002144:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002148:	461a      	mov	r2, r3
 800214a:	2102      	movs	r1, #2
 800214c:	4814      	ldr	r0, [pc, #80]	@ (80021a0 <setRelayState+0xb4>)
 800214e:	f002 fbf9 	bl	8004944 <HAL_GPIO_WritePin>
            g_relay2State = state;
 8002152:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <setRelayState+0xb8>)
 8002154:	79bb      	ldrb	r3, [r7, #6]
 8002156:	7013      	strb	r3, [r2, #0]
            changed = true;
 8002158:	2301      	movs	r3, #1
 800215a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    if (changed) {
 800215e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <setRelayState+0xa8>
        snprintf(logMsg, sizeof(logMsg), "Relay %d -> %s", relayNum, state ? "ON" : "OFF");
 8002166:	79fa      	ldrb	r2, [r7, #7]
 8002168:	79bb      	ldrb	r3, [r7, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <setRelayState+0x86>
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <setRelayState+0xbc>)
 8002170:	e000      	b.n	8002174 <setRelayState+0x88>
 8002172:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <setRelayState+0xc0>)
 8002174:	f107 0008 	add.w	r0, r7, #8
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	4a0c      	ldr	r2, [pc, #48]	@ (80021b0 <setRelayState+0xc4>)
 800217e:	211e      	movs	r1, #30
 8002180:	f006 fe54 	bl	8008e2c <sniprintf>
        logToLCD(logMsg);
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff97 	bl	80020bc <logToLCD>
        g_forceLcdUpdate = true; // Force redraw if relay changes
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <setRelayState+0xc8>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
    }
}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	@ 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000412 	.word	0x20000412
 80021a0:	40020800 	.word	0x40020800
 80021a4:	20000413 	.word	0x20000413
 80021a8:	0800c760 	.word	0x0800c760
 80021ac:	0800c764 	.word	0x0800c764
 80021b0:	0800c768 	.word	0x0800c768
 80021b4:	20000039 	.word	0x20000039

080021b8 <toggleRelay>:

void toggleRelay(uint8_t relayNum) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
    if (relayNum == 1) {
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d111      	bne.n	80021ec <toggleRelay+0x34>
        setRelayState(1, !g_relay1State);
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <toggleRelay+0x64>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f083 0301 	eor.w	r3, r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4619      	mov	r1, r3
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff ff81 	bl	80020ec <setRelayState>
    } else if (relayNum == 2) {
        setRelayState(2, !g_relay2State);
    }
}
 80021ea:	e013      	b.n	8002214 <toggleRelay+0x5c>
    } else if (relayNum == 2) {
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d110      	bne.n	8002214 <toggleRelay+0x5c>
        setRelayState(2, !g_relay2State);
 80021f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <toggleRelay+0x68>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f083 0301 	eor.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff ff6c 	bl	80020ec <setRelayState>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000412 	.word	0x20000412
 8002220:	20000413 	.word	0x20000413

08002224 <processColorReading>:


// --- Color Processing ---
CardColor_t processColorReading(uint16_t r, uint16_t g, uint16_t b) {
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
 800222e:	460b      	mov	r3, r1
 8002230:	80bb      	strh	r3, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	807b      	strh	r3, [r7, #2]
    // Basic check: if all values are very low, it's likely dark/no card or error
    if (r < 18 && g < 18 && b < 18) return COLOR_UNKNOWN;
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2b11      	cmp	r3, #17
 800223a:	d807      	bhi.n	800224c <processColorReading+0x28>
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	2b11      	cmp	r3, #17
 8002240:	d804      	bhi.n	800224c <processColorReading+0x28>
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	2b11      	cmp	r3, #17
 8002246:	d801      	bhi.n	800224c <processColorReading+0x28>
 8002248:	2300      	movs	r3, #0
 800224a:	e083      	b.n	8002354 <processColorReading+0x130>

    // Check for Green
    if (g > GREEN_G_MIN && g > r * COLOR_DOMINANCE_FACTOR && g > b * COLOR_DOMINANCE_FACTOR && r < GREEN_R_MAX && b < GREEN_B_MAX) {
 800224c:	88bb      	ldrh	r3, [r7, #4]
 800224e:	2b14      	cmp	r3, #20
 8002250:	d92d      	bls.n	80022ae <processColorReading+0x8a>
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002266:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002360 <processColorReading+0x13c>
 800226a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800226e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	dd1a      	ble.n	80022ae <processColorReading+0x8a>
 8002278:	88bb      	ldrh	r3, [r7, #4]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002360 <processColorReading+0x13c>
 8002290:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229c:	dd07      	ble.n	80022ae <processColorReading+0x8a>
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	2b45      	cmp	r3, #69	@ 0x45
 80022a2:	d804      	bhi.n	80022ae <processColorReading+0x8a>
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	2b45      	cmp	r3, #69	@ 0x45
 80022a8:	d801      	bhi.n	80022ae <processColorReading+0x8a>
        return COLOR_GREEN;
 80022aa:	2302      	movs	r3, #2
 80022ac:	e052      	b.n	8002354 <processColorReading+0x130>
    }
    // Check for Red
    if (r > RED_R_MIN && r > g * COLOR_DOMINANCE_FACTOR && r > b * COLOR_DOMINANCE_FACTOR && g < RED_G_MAX && b < RED_B_MAX) {
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	2b14      	cmp	r3, #20
 80022b2:	d92d      	bls.n	8002310 <processColorReading+0xec>
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022be:	88bb      	ldrh	r3, [r7, #4]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002360 <processColorReading+0x13c>
 80022cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	dd1a      	ble.n	8002310 <processColorReading+0xec>
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ee:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002360 <processColorReading+0x13c>
 80022f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fe:	dd07      	ble.n	8002310 <processColorReading+0xec>
 8002300:	88bb      	ldrh	r3, [r7, #4]
 8002302:	2b3b      	cmp	r3, #59	@ 0x3b
 8002304:	d804      	bhi.n	8002310 <processColorReading+0xec>
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	2b3b      	cmp	r3, #59	@ 0x3b
 800230a:	d801      	bhi.n	8002310 <processColorReading+0xec>
        return COLOR_RED;
 800230c:	2301      	movs	r3, #1
 800230e:	e021      	b.n	8002354 <processColorReading+0x130>
    }
    // Check for Yellow (High R and G, low B)
    if (r > YELLOW_R_MIN && g > YELLOW_G_MIN && b < YELLOW_B_MAX && (r + g) > (b * 2 * COLOR_DOMINANCE_FACTOR)) {
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	2b50      	cmp	r3, #80	@ 0x50
 8002314:	d91d      	bls.n	8002352 <processColorReading+0x12e>
 8002316:	88bb      	ldrh	r3, [r7, #4]
 8002318:	2b50      	cmp	r3, #80	@ 0x50
 800231a:	d91a      	bls.n	8002352 <processColorReading+0x12e>
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	2b45      	cmp	r3, #69	@ 0x45
 8002320:	d817      	bhi.n	8002352 <processColorReading+0x12e>
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002360 <processColorReading+0x13c>
 8002340:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	dd01      	ble.n	8002352 <processColorReading+0x12e>
         return COLOR_YELLOW;
 800234e:	2303      	movs	r3, #3
 8002350:	e000      	b.n	8002354 <processColorReading+0x130>
    }

    // Add checks for other colors here if needed (Blue, Bro                                                    wn, Purple...)

    return COLOR_UNKNOWN; // No match
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	3fa66666 	.word	0x3fa66666

08002364 <colorToString>:

// --- Enum to String Converters ---
const char* colorToString(CardColor_t color) {
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
    switch (color) {
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d00a      	beq.n	800238a <colorToString+0x26>
 8002374:	2b03      	cmp	r3, #3
 8002376:	dc0a      	bgt.n	800238e <colorToString+0x2a>
 8002378:	2b01      	cmp	r3, #1
 800237a:	d002      	beq.n	8002382 <colorToString+0x1e>
 800237c:	2b02      	cmp	r3, #2
 800237e:	d002      	beq.n	8002386 <colorToString+0x22>
 8002380:	e005      	b.n	800238e <colorToString+0x2a>
        case COLOR_RED: return "DO";
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <colorToString+0x38>)
 8002384:	e004      	b.n	8002390 <colorToString+0x2c>
        case COLOR_GREEN: return "XANH LA";
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <colorToString+0x3c>)
 8002388:	e002      	b.n	8002390 <colorToString+0x2c>
        case COLOR_YELLOW: return "VANG";
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <colorToString+0x40>)
 800238c:	e000      	b.n	8002390 <colorToString+0x2c>
        default: return "KHONG XD";
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <colorToString+0x44>)
    }
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	0800c778 	.word	0x0800c778
 80023a0:	0800c77c 	.word	0x0800c77c
 80023a4:	0800c784 	.word	0x0800c784
 80023a8:	0800c78c 	.word	0x0800c78c

080023ac <modeToString>:

const char* modeToString(OperatingMode_t mode) {
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
    return (mode == MODE_AUTOMATIC) ? "TU DONG" : "THU CONG";
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <modeToString+0x14>
 80023bc:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <modeToString+0x24>)
 80023be:	e000      	b.n	80023c2 <modeToString+0x16>
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <modeToString+0x28>)
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	0800c798 	.word	0x0800c798
 80023d4:	0800c7a0 	.word	0x0800c7a0

080023d8 <khoiTaoHeThong>:
         default: return "UNKNOWN_STATE";
     }
}

// --- System Initialization ---
void khoiTaoHeThong() {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08e      	sub	sp, #56	@ 0x38
 80023dc:	af00      	add	r7, sp, #0
    logToLCD("System Init...");
 80023de:	484f      	ldr	r0, [pc, #316]	@ (800251c <khoiTaoHeThong+0x144>)
 80023e0:	f7ff fe6c 	bl	80020bc <logToLCD>
    g_forceLcdUpdate = true; // Force initial draw
 80023e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002520 <khoiTaoHeThong+0x148>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]

    // 1. Initialize Relays (Off)
    setRelayState(1, false);
 80023ea:	2100      	movs	r1, #0
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7ff fe7d 	bl	80020ec <setRelayState>
    setRelayState(2, false);
 80023f2:	2100      	movs	r1, #0
 80023f4:	2002      	movs	r0, #2
 80023f6:	f7ff fe79 	bl	80020ec <setRelayState>
    logToLCD("Relays Init OK"); HAL_Delay(50);
 80023fa:	484a      	ldr	r0, [pc, #296]	@ (8002524 <khoiTaoHeThong+0x14c>)
 80023fc:	f7ff fe5e 	bl	80020bc <logToLCD>
 8002400:	2032      	movs	r0, #50	@ 0x32
 8002402:	f001 fff9 	bl	80043f8 <HAL_Delay>

    // 2. Initialize LCD
    ST7789_Init();
 8002406:	f001 fb01 	bl	8003a0c <ST7789_Init>
    ST7789_Fill_Color(BLACK);
 800240a:	2000      	movs	r0, #0
 800240c:	f001 fb9e 	bl	8003b4c <ST7789_Fill_Color>
    logToLCD("LCD Init OK"); HAL_Delay(50);
 8002410:	4845      	ldr	r0, [pc, #276]	@ (8002528 <khoiTaoHeThong+0x150>)
 8002412:	f7ff fe53 	bl	80020bc <logToLCD>
 8002416:	2032      	movs	r0, #50	@ 0x32
 8002418:	f001 ffee 	bl	80043f8 <HAL_Delay>

    // 3. Initialize VL53L0X Distance Sensor (using I2C3)
    logToLCD("VL53L0X Init..."); HAL_Delay(10);
 800241c:	4843      	ldr	r0, [pc, #268]	@ (800252c <khoiTaoHeThong+0x154>)
 800241e:	f7ff fe4d 	bl	80020bc <logToLCD>
 8002422:	200a      	movs	r0, #10
 8002424:	f001 ffe8 	bl	80043f8 <HAL_Delay>
    if (initVL53L0X(true, &hi2c3)) { // Assuming 2.8V IO, pass I2C3 handle
 8002428:	4941      	ldr	r1, [pc, #260]	@ (8002530 <khoiTaoHeThong+0x158>)
 800242a:	2001      	movs	r0, #1
 800242c:	f7fe ffdc 	bl	80013e8 <initVL53L0X>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <khoiTaoHeThong+0x7a>
        setTimeout(500); // Set I/O timeout
 8002436:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800243a:	f7ff fc57 	bl	8001cec <setTimeout>
        startContinuous(0); // Start continuous back-to-back mode
 800243e:	2000      	movs	r0, #0
 8002440:	f7ff fb8c 	bl	8001b5c <startContinuous>
        g_vl53l0x_available = true;
 8002444:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <khoiTaoHeThong+0x15c>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
        logToLCD("VL53L0X Started");
 800244a:	483b      	ldr	r0, [pc, #236]	@ (8002538 <khoiTaoHeThong+0x160>)
 800244c:	f7ff fe36 	bl	80020bc <logToLCD>
 8002450:	e005      	b.n	800245e <khoiTaoHeThong+0x86>
    } else {
        g_vl53l0x_available = false;
 8002452:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <khoiTaoHeThong+0x15c>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
        logToLCD("VL53L0X FAIL!");
 8002458:	4838      	ldr	r0, [pc, #224]	@ (800253c <khoiTaoHeThong+0x164>)
 800245a:	f7ff fe2f 	bl	80020bc <logToLCD>
        // Consider entering an error state or halting
        // Error_Handler(); // Or handle more gracefully
    }
    HAL_Delay(100);
 800245e:	2064      	movs	r0, #100	@ 0x64
 8002460:	f001 ffca 	bl	80043f8 <HAL_Delay>

    // 4. Initialize TCS34725 Color Sensor (using I2C1)
    logToLCD("TCS34725 Init..."); HAL_Delay(10);
 8002464:	4836      	ldr	r0, [pc, #216]	@ (8002540 <khoiTaoHeThong+0x168>)
 8002466:	f7ff fe29 	bl	80020bc <logToLCD>
 800246a:	200a      	movs	r0, #10
 800246c:	f001 ffc4 	bl	80043f8 <HAL_Delay>
    uint8_t chipId = I2C_Read8BIT(TCS34725_ID); // Read Chip ID register (0x12)
 8002470:	2012      	movs	r0, #18
 8002472:	f7fe fdfb 	bl	800106c <I2C_Read8BIT>
 8002476:	4603      	mov	r3, r0
 8002478:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    // Valid IDs are typically 0x44 for TCS34725 or 0x4D for TCS34727
    if (chipId == 0x44 || chipId == 0x4D) {
 800247c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002480:	2b44      	cmp	r3, #68	@ 0x44
 8002482:	d003      	beq.n	800248c <khoiTaoHeThong+0xb4>
 8002484:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002488:	2b4d      	cmp	r3, #77	@ 0x4d
 800248a:	d125      	bne.n	80024d8 <khoiTaoHeThong+0x100>
        char msg[25];
        snprintf(msg, sizeof(msg), "TCS OK (ID:0x%02X)", chipId);
 800248c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002490:	f107 001c 	add.w	r0, r7, #28
 8002494:	4a2b      	ldr	r2, [pc, #172]	@ (8002544 <khoiTaoHeThong+0x16c>)
 8002496:	2119      	movs	r1, #25
 8002498:	f006 fcc8 	bl	8008e2c <sniprintf>
        logToLCD(msg);
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe0b 	bl	80020bc <logToLCD>

        // Basic Configuration:
        I2C_Write8BIT(ENABLE_REG, 0x01); // PON = 1 (Power ON), AEN = 0 (ADC Disabled initially)
 80024a6:	2101      	movs	r1, #1
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7fe fdc1 	bl	8001030 <I2C_Write8BIT>
        g_tcsEnabled = false;
 80024ae:	4b26      	ldr	r3, [pc, #152]	@ (8002548 <khoiTaoHeThong+0x170>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
        HAL_Delay(TCS_ENABLE_DELAY_MS);
 80024b4:	2005      	movs	r0, #5
 80024b6:	f001 ff9f 	bl	80043f8 <HAL_Delay>
        I2C_Write8BIT(ATIME_REG, 0xF6); // Integration Time: 24ms * (256 - 246) = 240ms -> ~4 cycles/sec. Adjust if needed. (0xF6 = 24ms)
 80024ba:	21f6      	movs	r1, #246	@ 0xf6
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fdb7 	bl	8001030 <I2C_Write8BIT>
        I2C_Write8BIT(CONTROL_REG, 0x00); // Gain: 1x (0x00), 4x (0x01), 16x (0x02), 60x (0x03)
 80024c2:	2100      	movs	r1, #0
 80024c4:	200f      	movs	r0, #15
 80024c6:	f7fe fdb3 	bl	8001030 <I2C_Write8BIT>
        g_tcsAvailable = true;
 80024ca:	4b20      	ldr	r3, [pc, #128]	@ (800254c <khoiTaoHeThong+0x174>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
        logToLCD("TCS Configured");
 80024d0:	481f      	ldr	r0, [pc, #124]	@ (8002550 <khoiTaoHeThong+0x178>)
 80024d2:	f7ff fdf3 	bl	80020bc <logToLCD>
    if (chipId == 0x44 || chipId == 0x4D) {
 80024d6:	e00d      	b.n	80024f4 <khoiTaoHeThong+0x11c>
    } else {
        char msg[25];
        snprintf(msg, sizeof(msg), "TCS FAIL! ID:0x%02X", chipId);
 80024d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024dc:	4638      	mov	r0, r7
 80024de:	4a1d      	ldr	r2, [pc, #116]	@ (8002554 <khoiTaoHeThong+0x17c>)
 80024e0:	2119      	movs	r1, #25
 80024e2:	f006 fca3 	bl	8008e2c <sniprintf>
        logToLCD(msg);
 80024e6:	463b      	mov	r3, r7
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fde7 	bl	80020bc <logToLCD>
        g_tcsAvailable = false;
 80024ee:	4b17      	ldr	r3, [pc, #92]	@ (800254c <khoiTaoHeThong+0x174>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
        // Error_Handler(); // Or handle more gracefully
    }
    HAL_Delay(100);
 80024f4:	2064      	movs	r0, #100	@ 0x64
 80024f6:	f001 ff7f 	bl	80043f8 <HAL_Delay>

    // 5. Set Initial State & Mode
    g_currentMode = MODE_AUTOMATIC;
 80024fa:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <khoiTaoHeThong+0x180>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
    g_currentState = STATE_IDLE;
 8002500:	4b16      	ldr	r3, [pc, #88]	@ (800255c <khoiTaoHeThong+0x184>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
    logToLCD("System Ready");
 8002506:	4816      	ldr	r0, [pc, #88]	@ (8002560 <khoiTaoHeThong+0x188>)
 8002508:	f7ff fdd8 	bl	80020bc <logToLCD>
    g_forceLcdUpdate = true; // Force redraw after init
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <khoiTaoHeThong+0x148>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
}
 8002512:	bf00      	nop
 8002514:	3738      	adds	r7, #56	@ 0x38
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	0800c81c 	.word	0x0800c81c
 8002520:	20000039 	.word	0x20000039
 8002524:	0800c82c 	.word	0x0800c82c
 8002528:	0800c83c 	.word	0x0800c83c
 800252c:	0800c848 	.word	0x0800c848
 8002530:	2000031c 	.word	0x2000031c
 8002534:	2000041f 	.word	0x2000041f
 8002538:	0800c858 	.word	0x0800c858
 800253c:	0800c868 	.word	0x0800c868
 8002540:	0800c878 	.word	0x0800c878
 8002544:	0800c88c 	.word	0x0800c88c
 8002548:	20000416 	.word	0x20000416
 800254c:	20000415 	.word	0x20000415
 8002550:	0800c8a0 	.word	0x0800c8a0
 8002554:	0800c8b0 	.word	0x0800c8b0
 8002558:	20000411 	.word	0x20000411
 800255c:	20000410 	.word	0x20000410
 8002560:	0800c8c4 	.word	0x0800c8c4

08002564 <xuLyCamBien>:

// --- Sensor Reading Logic ---
void xuLyCamBien(void) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
    uint16_t distance;
    statInfo_t_VL53L0X distanceStats; // Optional stats struct
    bool theTruoc = g_cardPresent;
 800256a:	4b91      	ldr	r3, [pc, #580]	@ (80027b0 <xuLyCamBien+0x24c>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	737b      	strb	r3, [r7, #13]

    // 1. Read Distance Sensor
    if (g_vl53l0x_available) {
 8002570:	4b90      	ldr	r3, [pc, #576]	@ (80027b4 <xuLyCamBien+0x250>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05b      	beq.n	8002630 <xuLyCamBien+0xcc>
        distance = readRangeContinuousMillimeters(&distanceStats); // Pass NULL if stats not needed
 8002578:	463b      	mov	r3, r7
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fb34 	bl	8001be8 <readRangeContinuousMillimeters>
 8002580:	4603      	mov	r3, r0
 8002582:	81fb      	strh	r3, [r7, #14]
        g_vl53l0x_timeout_occurred = timeoutOccurred();
 8002584:	f7ff fba0 	bl	8001cc8 <timeoutOccurred>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b8a      	ldr	r3, [pc, #552]	@ (80027b8 <xuLyCamBien+0x254>)
 800258e:	701a      	strb	r2, [r3, #0]

        // Handle distance reading errors/timeouts
        if (g_vl53l0x_timeout_occurred || distance == 8191 || distance == 65535) { // 8191: Sigma Fail, 65535: Timeout
 8002590:	4b89      	ldr	r3, [pc, #548]	@ (80027b8 <xuLyCamBien+0x254>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <xuLyCamBien+0x48>
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <xuLyCamBien+0x48>
 80025a2:	89fb      	ldrh	r3, [r7, #14]
 80025a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d106      	bne.n	80025ba <xuLyCamBien+0x56>
            g_latestDistance = 0xFFFF; // Indicate error
 80025ac:	4b83      	ldr	r3, [pc, #524]	@ (80027bc <xuLyCamBien+0x258>)
 80025ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025b2:	801a      	strh	r2, [r3, #0]
            distance = CARD_ABSENT_THRESHOLD_MM + 1; // Treat as card absent
 80025b4:	2365      	movs	r3, #101	@ 0x65
 80025b6:	81fb      	strh	r3, [r7, #14]
 80025b8:	e002      	b.n	80025c0 <xuLyCamBien+0x5c>
        } else {
            g_latestDistance = distance;
 80025ba:	4a80      	ldr	r2, [pc, #512]	@ (80027bc <xuLyCamBien+0x258>)
 80025bc:	89fb      	ldrh	r3, [r7, #14]
 80025be:	8013      	strh	r3, [r2, #0]
        }

        // Debounce card presence/absence
        bool coThe_TucThoi = (distance < CARD_PRESENT_THRESHOLD_MM);
 80025c0:	89fb      	ldrh	r3, [r7, #14]
 80025c2:	2b63      	cmp	r3, #99	@ 0x63
 80025c4:	bf94      	ite	ls
 80025c6:	2301      	movls	r3, #1
 80025c8:	2300      	movhi	r3, #0
 80025ca:	733b      	strb	r3, [r7, #12]
        if (coThe_TucThoi) {
 80025cc:	7b3b      	ldrb	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00e      	beq.n	80025f0 <xuLyCamBien+0x8c>
            demKoThe = 0;
 80025d2:	4b7b      	ldr	r3, [pc, #492]	@ (80027c0 <xuLyCamBien+0x25c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
            if (demCoThe < DEM_XAC_NHAN_CO) demCoThe++;
 80025d8:	4b7a      	ldr	r3, [pc, #488]	@ (80027c4 <xuLyCamBien+0x260>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2203      	movs	r2, #3
 80025de:	4293      	cmp	r3, r2
 80025e0:	d214      	bcs.n	800260c <xuLyCamBien+0xa8>
 80025e2:	4b78      	ldr	r3, [pc, #480]	@ (80027c4 <xuLyCamBien+0x260>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b76      	ldr	r3, [pc, #472]	@ (80027c4 <xuLyCamBien+0x260>)
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	e00d      	b.n	800260c <xuLyCamBien+0xa8>
        } else {
            demCoThe = 0;
 80025f0:	4b74      	ldr	r3, [pc, #464]	@ (80027c4 <xuLyCamBien+0x260>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
            if (demKoThe < DEM_XAC_NHAN_KO) demKoThe++;
 80025f6:	4b72      	ldr	r3, [pc, #456]	@ (80027c0 <xuLyCamBien+0x25c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2203      	movs	r2, #3
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d205      	bcs.n	800260c <xuLyCamBien+0xa8>
 8002600:	4b6f      	ldr	r3, [pc, #444]	@ (80027c0 <xuLyCamBien+0x25c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b6d      	ldr	r3, [pc, #436]	@ (80027c0 <xuLyCamBien+0x25c>)
 800260a:	701a      	strb	r2, [r3, #0]
        }

        if (demCoThe >= DEM_XAC_NHAN_CO) g_cardPresent = true;
 800260c:	4b6d      	ldr	r3, [pc, #436]	@ (80027c4 <xuLyCamBien+0x260>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2203      	movs	r2, #3
 8002612:	4293      	cmp	r3, r2
 8002614:	d303      	bcc.n	800261e <xuLyCamBien+0xba>
 8002616:	4b66      	ldr	r3, [pc, #408]	@ (80027b0 <xuLyCamBien+0x24c>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
 800261c:	e00f      	b.n	800263e <xuLyCamBien+0xda>
        else if (demKoThe >= DEM_XAC_NHAN_KO) g_cardPresent = false;
 800261e:	4b68      	ldr	r3, [pc, #416]	@ (80027c0 <xuLyCamBien+0x25c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2203      	movs	r2, #3
 8002624:	4293      	cmp	r3, r2
 8002626:	d30a      	bcc.n	800263e <xuLyCamBien+0xda>
 8002628:	4b61      	ldr	r3, [pc, #388]	@ (80027b0 <xuLyCamBien+0x24c>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e006      	b.n	800263e <xuLyCamBien+0xda>

    } else {
        // VL53L0X not available, assume no card
        g_cardPresent = false;
 8002630:	4b5f      	ldr	r3, [pc, #380]	@ (80027b0 <xuLyCamBien+0x24c>)
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
        g_latestDistance = 0xFFFF;
 8002636:	4b61      	ldr	r3, [pc, #388]	@ (80027bc <xuLyCamBien+0x258>)
 8002638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800263c:	801a      	strh	r2, [r3, #0]
    }

    // 2. Control and Read Color Sensor based on presence and mode
    if (g_currentMode == MODE_AUTOMATIC) {
 800263e:	4b62      	ldr	r3, [pc, #392]	@ (80027c8 <xuLyCamBien+0x264>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f040 8092 	bne.w	800276e <xuLyCamBien+0x20a>
        if (g_cardPresent && !theTruoc) {
 800264a:	4b59      	ldr	r3, [pc, #356]	@ (80027b0 <xuLyCamBien+0x24c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d024      	beq.n	800269c <xuLyCamBien+0x138>
 8002652:	7b7b      	ldrb	r3, [r7, #13]
 8002654:	f083 0301 	eor.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01e      	beq.n	800269c <xuLyCamBien+0x138>
            // Card just inserted
            if (g_tcsAvailable && !g_tcsEnabled) {
 800265e:	4b5b      	ldr	r3, [pc, #364]	@ (80027cc <xuLyCamBien+0x268>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d04b      	beq.n	80026fe <xuLyCamBien+0x19a>
 8002666:	4b5a      	ldr	r3, [pc, #360]	@ (80027d0 <xuLyCamBien+0x26c>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	f083 0301 	eor.w	r3, r3, #1
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d044      	beq.n	80026fe <xuLyCamBien+0x19a>
                I2C_Write8BIT(ENABLE_REG, 0x03); // PON=1, AEN=1 (Enable ADC)
 8002674:	2103      	movs	r1, #3
 8002676:	2000      	movs	r0, #0
 8002678:	f7fe fcda 	bl	8001030 <I2C_Write8BIT>
                g_tcsEnabled = true;
 800267c:	4b54      	ldr	r3, [pc, #336]	@ (80027d0 <xuLyCamBien+0x26c>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
                HAL_Delay(TCS_ADC_READ_DELAY); // Wait for ADC integration
 8002682:	201e      	movs	r0, #30
 8002684:	f001 feb8 	bl	80043f8 <HAL_Delay>
                logToLCD("TCS Enabled");
 8002688:	4852      	ldr	r0, [pc, #328]	@ (80027d4 <xuLyCamBien+0x270>)
 800268a:	f7ff fd17 	bl	80020bc <logToLCD>
                g_currentState = STATE_SCANNING; // Trigger state change
 800268e:	4b52      	ldr	r3, [pc, #328]	@ (80027d8 <xuLyCamBien+0x274>)
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
                 g_forceLcdUpdate = true;
 8002694:	4b51      	ldr	r3, [pc, #324]	@ (80027dc <xuLyCamBien+0x278>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
            if (g_tcsAvailable && !g_tcsEnabled) {
 800269a:	e030      	b.n	80026fe <xuLyCamBien+0x19a>
            }
        } else if (!g_cardPresent && theTruoc) {
 800269c:	4b44      	ldr	r3, [pc, #272]	@ (80027b0 <xuLyCamBien+0x24c>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	f083 0301 	eor.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d02a      	beq.n	8002700 <xuLyCamBien+0x19c>
 80026aa:	7b7b      	ldrb	r3, [r7, #13]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d027      	beq.n	8002700 <xuLyCamBien+0x19c>
            // Card just removed
            if (g_tcsAvailable && g_tcsEnabled) {
 80026b0:	4b46      	ldr	r3, [pc, #280]	@ (80027cc <xuLyCamBien+0x268>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <xuLyCamBien+0x170>
 80026b8:	4b45      	ldr	r3, [pc, #276]	@ (80027d0 <xuLyCamBien+0x26c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <xuLyCamBien+0x170>
                I2C_Write8BIT(ENABLE_REG, 0x01); // PON=1, AEN=0 (Disable ADC)
 80026c0:	2101      	movs	r1, #1
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe fcb4 	bl	8001030 <I2C_Write8BIT>
                g_tcsEnabled = false;
 80026c8:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <xuLyCamBien+0x26c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
                logToLCD("TCS Disabled");
 80026ce:	4844      	ldr	r0, [pc, #272]	@ (80027e0 <xuLyCamBien+0x27c>)
 80026d0:	f7ff fcf4 	bl	80020bc <logToLCD>
            }
            g_latestR = g_latestG = g_latestB = 0;
 80026d4:	4b43      	ldr	r3, [pc, #268]	@ (80027e4 <xuLyCamBien+0x280>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
 80026da:	4b42      	ldr	r3, [pc, #264]	@ (80027e4 <xuLyCamBien+0x280>)
 80026dc:	881a      	ldrh	r2, [r3, #0]
 80026de:	4b42      	ldr	r3, [pc, #264]	@ (80027e8 <xuLyCamBien+0x284>)
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	4b41      	ldr	r3, [pc, #260]	@ (80027e8 <xuLyCamBien+0x284>)
 80026e4:	881a      	ldrh	r2, [r3, #0]
 80026e6:	4b41      	ldr	r3, [pc, #260]	@ (80027ec <xuLyCamBien+0x288>)
 80026e8:	801a      	strh	r2, [r3, #0]
            g_lastDetectedColor = COLOR_UNKNOWN;
 80026ea:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <xuLyCamBien+0x28c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
             g_currentState = STATE_IDLE; // Go back to idle when card removed
 80026f0:	4b39      	ldr	r3, [pc, #228]	@ (80027d8 <xuLyCamBien+0x274>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
             g_forceLcdUpdate = true;
 80026f6:	4b39      	ldr	r3, [pc, #228]	@ (80027dc <xuLyCamBien+0x278>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e000      	b.n	8002700 <xuLyCamBien+0x19c>
            if (g_tcsAvailable && !g_tcsEnabled) {
 80026fe:	bf00      	nop
        }

        // Read RGB only if card is present, TCS is available/enabled, and state requires it
        if (g_cardPresent && g_tcsAvailable && g_tcsEnabled && (g_currentState == STATE_SCANNING || g_currentState == STATE_PROCESSING)) {
 8002700:	4b2b      	ldr	r3, [pc, #172]	@ (80027b0 <xuLyCamBien+0x24c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d04f      	beq.n	80027a8 <xuLyCamBien+0x244>
 8002708:	4b30      	ldr	r3, [pc, #192]	@ (80027cc <xuLyCamBien+0x268>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d04b      	beq.n	80027a8 <xuLyCamBien+0x244>
 8002710:	4b2f      	ldr	r3, [pc, #188]	@ (80027d0 <xuLyCamBien+0x26c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d047      	beq.n	80027a8 <xuLyCamBien+0x244>
 8002718:	4b2f      	ldr	r3, [pc, #188]	@ (80027d8 <xuLyCamBien+0x274>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d004      	beq.n	800272c <xuLyCamBien+0x1c8>
 8002722:	4b2d      	ldr	r3, [pc, #180]	@ (80027d8 <xuLyCamBien+0x274>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d13d      	bne.n	80027a8 <xuLyCamBien+0x244>
             // Read RGB values
             g_latestR = I2C_Read16BIT(RED);
 800272c:	2016      	movs	r0, #22
 800272e:	f7fe fcc3 	bl	80010b8 <I2C_Read16BIT>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	4b2d      	ldr	r3, [pc, #180]	@ (80027ec <xuLyCamBien+0x288>)
 8002738:	801a      	strh	r2, [r3, #0]
             g_latestG = I2C_Read16BIT(GREEN);
 800273a:	2018      	movs	r0, #24
 800273c:	f7fe fcbc 	bl	80010b8 <I2C_Read16BIT>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	4b28      	ldr	r3, [pc, #160]	@ (80027e8 <xuLyCamBien+0x284>)
 8002746:	801a      	strh	r2, [r3, #0]
             g_latestB = I2C_Read16BIT(BLUE);
 8002748:	201a      	movs	r0, #26
 800274a:	f7fe fcb5 	bl	80010b8 <I2C_Read16BIT>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <xuLyCamBien+0x280>)
 8002754:	801a      	strh	r2, [r3, #0]
             // If we are in scanning state, transition to processing
             if(g_currentState == STATE_SCANNING) {
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <xuLyCamBien+0x274>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d123      	bne.n	80027a8 <xuLyCamBien+0x244>
                 g_currentState = STATE_PROCESSING;
 8002760:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <xuLyCamBien+0x274>)
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]
                  g_forceLcdUpdate = true;
 8002766:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <xuLyCamBien+0x278>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
            g_tcsEnabled = false;
            logToLCD("TCS Disabled (Manual)");
        }
         g_latestR = g_latestG = g_latestB = 0; // Clear RGB values
    }
}
 800276c:	e01c      	b.n	80027a8 <xuLyCamBien+0x244>
        if (g_tcsAvailable && g_tcsEnabled) {
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <xuLyCamBien+0x268>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <xuLyCamBien+0x22e>
 8002776:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <xuLyCamBien+0x26c>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <xuLyCamBien+0x22e>
            I2C_Write8BIT(ENABLE_REG, 0x01); // PON=1, AEN=0
 800277e:	2101      	movs	r1, #1
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fc55 	bl	8001030 <I2C_Write8BIT>
            g_tcsEnabled = false;
 8002786:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <xuLyCamBien+0x26c>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
            logToLCD("TCS Disabled (Manual)");
 800278c:	4819      	ldr	r0, [pc, #100]	@ (80027f4 <xuLyCamBien+0x290>)
 800278e:	f7ff fc95 	bl	80020bc <logToLCD>
         g_latestR = g_latestG = g_latestB = 0; // Clear RGB values
 8002792:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <xuLyCamBien+0x280>)
 8002794:	2200      	movs	r2, #0
 8002796:	801a      	strh	r2, [r3, #0]
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <xuLyCamBien+0x280>)
 800279a:	881a      	ldrh	r2, [r3, #0]
 800279c:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <xuLyCamBien+0x284>)
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <xuLyCamBien+0x284>)
 80027a2:	881a      	ldrh	r2, [r3, #0]
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <xuLyCamBien+0x288>)
 80027a6:	801a      	strh	r2, [r3, #0]
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000414 	.word	0x20000414
 80027b4:	2000041f 	.word	0x2000041f
 80027b8:	2000041e 	.word	0x2000041e
 80027bc:	2000000c 	.word	0x2000000c
 80027c0:	20000435 	.word	0x20000435
 80027c4:	20000434 	.word	0x20000434
 80027c8:	20000411 	.word	0x20000411
 80027cc:	20000415 	.word	0x20000415
 80027d0:	20000416 	.word	0x20000416
 80027d4:	0800c8d4 	.word	0x0800c8d4
 80027d8:	20000410 	.word	0x20000410
 80027dc:	20000039 	.word	0x20000039
 80027e0:	0800c8e0 	.word	0x0800c8e0
 80027e4:	2000041c 	.word	0x2000041c
 80027e8:	2000041a 	.word	0x2000041a
 80027ec:	20000418 	.word	0x20000418
 80027f0:	20000420 	.word	0x20000420
 80027f4:	0800c8f0 	.word	0x0800c8f0

080027f8 <xuLyNutNhan>:

// --- Button Handling Logic ---
void xuLyNutNhan(ButtonInfo_t *button) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 8002800:	f001 fdee 	bl	80043e0 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]
    bool pinState = HAL_GPIO_ReadPin(button->port, button->pin) == GPIO_PIN_RESET; // Assuming active low buttons (pressed = LOW)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	889b      	ldrh	r3, [r3, #4]
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f002 f87f 	bl	8004914 <HAL_GPIO_ReadPin>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	72fb      	strb	r3, [r7, #11]

    // Reset flags at the start of each check cycle
    button->shortPressDetected = false;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	739a      	strb	r2, [r3, #14]
    button->longPressDetected = false;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	73da      	strb	r2, [r3, #15]

    if (pinState && !button->isPressed) { // Button newly pressed
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d014      	beq.n	800285e <xuLyNutNhan+0x66>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7b1b      	ldrb	r3, [r3, #12]
 8002838:	f083 0301 	eor.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <xuLyNutNhan+0x66>
        // Start debouncing/press timing only if not waiting for release
        if (!button->waitForRelease) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7b5b      	ldrb	r3, [r3, #13]
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d04c      	beq.n	80028ea <xuLyNutNhan+0xf2>
            button->isPressed = true;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	731a      	strb	r2, [r3, #12]
            button->pressStartTime = now;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	609a      	str	r2, [r3, #8]
        if (!button->waitForRelease) {
 800285c:	e045      	b.n	80028ea <xuLyNutNhan+0xf2>
        }
    } else if (!pinState && button->isPressed) { // Button newly released
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	f083 0301 	eor.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d022      	beq.n	80028b0 <xuLyNutNhan+0xb8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7b1b      	ldrb	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01e      	beq.n	80028b0 <xuLyNutNhan+0xb8>
        if (now - button->pressStartTime >= BUTTON_DEBOUNCE_MS) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b31      	cmp	r3, #49	@ 0x31
 800287c:	d911      	bls.n	80028a2 <xuLyNutNhan+0xaa>
            // Check for short press upon release (after debounce)
            if (!button->waitForRelease) { // Make sure long press didn't already trigger
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7b5b      	ldrb	r3, [r3, #13]
 8002882:	f083 0301 	eor.w	r3, r3, #1
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00a      	beq.n	80028a2 <xuLyNutNhan+0xaa>
                 if (now - button->pressStartTime < BUTTON_LONG_PRESS_MS) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002898:	4293      	cmp	r3, r2
 800289a:	d802      	bhi.n	80028a2 <xuLyNutNhan+0xaa>
                    button->shortPressDetected = true;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	739a      	strb	r2, [r3, #14]
                 }
            }
        }
        button->isPressed = false;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	731a      	strb	r2, [r3, #12]
        button->waitForRelease = false; // Reset wait flag on release
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	735a      	strb	r2, [r3, #13]
 80028ae:	e01c      	b.n	80028ea <xuLyNutNhan+0xf2>
    } else if (pinState && button->isPressed) { // Button held down
 80028b0:	7afb      	ldrb	r3, [r7, #11]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d019      	beq.n	80028ea <xuLyNutNhan+0xf2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7b1b      	ldrb	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <xuLyNutNhan+0xf2>
        // Check for long press only if not already detected and waiting for release
        if (!button->waitForRelease && (now - button->pressStartTime >= BUTTON_LONG_PRESS_MS)) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7b5b      	ldrb	r3, [r3, #13]
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <xuLyNutNhan+0xf2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80028d8:	4293      	cmp	r3, r2
 80028da:	d906      	bls.n	80028ea <xuLyNutNhan+0xf2>
            button->longPressDetected = true;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	73da      	strb	r2, [r3, #15]
            button->waitForRelease = true; // Prevent further triggers until released
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	735a      	strb	r2, [r3, #13]
        }
    }
}
 80028e8:	e7ff      	b.n	80028ea <xuLyNutNhan+0xf2>
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <capNhatTrangThaiVaCheDo>:

// --- Main State Machine & Mode Logic ---
void capNhatTrangThaiVaCheDo(void) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
     SystemState_t ttTruoc = g_currentState;
 80028fa:	4b9d      	ldr	r3, [pc, #628]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
     OperatingMode_t modeTruoc = g_currentMode;
 8002900:	4b9c      	ldr	r3, [pc, #624]	@ (8002b74 <capNhatTrangThaiVaCheDo+0x280>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	71bb      	strb	r3, [r7, #6]

     // 1. Process Button Inputs
     xuLyNutNhan(&g_buttonMode);
 8002906:	489c      	ldr	r0, [pc, #624]	@ (8002b78 <capNhatTrangThaiVaCheDo+0x284>)
 8002908:	f7ff ff76 	bl	80027f8 <xuLyNutNhan>
     xuLyNutNhan(&g_buttonManR1);
 800290c:	489b      	ldr	r0, [pc, #620]	@ (8002b7c <capNhatTrangThaiVaCheDo+0x288>)
 800290e:	f7ff ff73 	bl	80027f8 <xuLyNutNhan>
     xuLyNutNhan(&g_buttonManR2);
 8002912:	489b      	ldr	r0, [pc, #620]	@ (8002b80 <capNhatTrangThaiVaCheDo+0x28c>)
 8002914:	f7ff ff70 	bl	80027f8 <xuLyNutNhan>

     // 2. Handle Mode Switching (Button 1 Short Press)
     if (g_buttonMode.shortPressDetected) {
 8002918:	4b97      	ldr	r3, [pc, #604]	@ (8002b78 <capNhatTrangThaiVaCheDo+0x284>)
 800291a:	7b9b      	ldrb	r3, [r3, #14]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01a      	beq.n	8002956 <capNhatTrangThaiVaCheDo+0x62>
         if (g_currentMode == MODE_AUTOMATIC) {
 8002920:	4b94      	ldr	r3, [pc, #592]	@ (8002b74 <capNhatTrangThaiVaCheDo+0x280>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <capNhatTrangThaiVaCheDo+0x4a>
             g_currentMode = MODE_MANUAL;
 800292a:	4b92      	ldr	r3, [pc, #584]	@ (8002b74 <capNhatTrangThaiVaCheDo+0x280>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
             g_currentState = STATE_MANUAL_INPUT_WAIT; // Go to manual waiting state
 8002930:	4b8f      	ldr	r3, [pc, #572]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002932:	2205      	movs	r2, #5
 8002934:	701a      	strb	r2, [r3, #0]
             logToLCD("Mode -> Manual");
 8002936:	4893      	ldr	r0, [pc, #588]	@ (8002b84 <capNhatTrangThaiVaCheDo+0x290>)
 8002938:	f7ff fbc0 	bl	80020bc <logToLCD>
 800293c:	e008      	b.n	8002950 <capNhatTrangThaiVaCheDo+0x5c>
         } else {
             g_currentMode = MODE_AUTOMATIC;
 800293e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b74 <capNhatTrangThaiVaCheDo+0x280>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
             g_currentState = STATE_IDLE; // Go back to auto idle state
 8002944:	4b8a      	ldr	r3, [pc, #552]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
             logToLCD("Mode -> Automatic");
 800294a:	488f      	ldr	r0, [pc, #572]	@ (8002b88 <capNhatTrangThaiVaCheDo+0x294>)
 800294c:	f7ff fbb6 	bl	80020bc <logToLCD>
         }
          g_forceLcdUpdate = true;
 8002950:	4b8e      	ldr	r3, [pc, #568]	@ (8002b8c <capNhatTrangThaiVaCheDo+0x298>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
     }

     // 3. State Machine Logic
     switch (g_currentMode) {
 8002956:	4b87      	ldr	r3, [pc, #540]	@ (8002b74 <capNhatTrangThaiVaCheDo+0x280>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <capNhatTrangThaiVaCheDo+0x74>
 8002960:	2b01      	cmp	r3, #1
 8002962:	f000 8093 	beq.w	8002a8c <capNhatTrangThaiVaCheDo+0x198>
 8002966:	e14c      	b.n	8002c02 <capNhatTrangThaiVaCheDo+0x30e>
         case MODE_AUTOMATIC:
             switch (g_currentState) {
 8002968:	4b81      	ldr	r3, [pc, #516]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b04      	cmp	r3, #4
 8002970:	d861      	bhi.n	8002a36 <capNhatTrangThaiVaCheDo+0x142>
 8002972:	a201      	add	r2, pc, #4	@ (adr r2, 8002978 <capNhatTrangThaiVaCheDo+0x84>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002a7d 	.word	0x08002a7d
 800297c:	0800298d 	.word	0x0800298d
 8002980:	080029a3 	.word	0x080029a3
 8002984:	08002a1b 	.word	0x08002a1b
 8002988:	08002a1b 	.word	0x08002a1b
                     break;

                 case STATE_SCANNING:
                     // Transition handled by xuLyCamBien when data ready -> STATE_PROCESSING
                     // Or when card removed -> STATE_IDLE
                     if (!g_cardPresent) g_currentState = STATE_IDLE;
 800298c:	4b80      	ldr	r3, [pc, #512]	@ (8002b90 <capNhatTrangThaiVaCheDo+0x29c>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d072      	beq.n	8002a80 <capNhatTrangThaiVaCheDo+0x18c>
 800299a:	4b75      	ldr	r3, [pc, #468]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
                     break;
 80029a0:	e06e      	b.n	8002a80 <capNhatTrangThaiVaCheDo+0x18c>

                 case STATE_PROCESSING:
                     g_lastDetectedColor = processColorReading(g_latestR, g_latestG, g_latestB);
 80029a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002b94 <capNhatTrangThaiVaCheDo+0x2a0>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002b98 <capNhatTrangThaiVaCheDo+0x2a4>)
 80029a8:	8811      	ldrh	r1, [r2, #0]
 80029aa:	4a7c      	ldr	r2, [pc, #496]	@ (8002b9c <capNhatTrangThaiVaCheDo+0x2a8>)
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fc38 	bl	8002224 <processColorReading>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b79      	ldr	r3, [pc, #484]	@ (8002ba0 <capNhatTrangThaiVaCheDo+0x2ac>)
 80029ba:	701a      	strb	r2, [r3, #0]
                     if (g_lastDetectedColor != COLOR_UNKNOWN) {
 80029bc:	4b78      	ldr	r3, [pc, #480]	@ (8002ba0 <capNhatTrangThaiVaCheDo+0x2ac>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <capNhatTrangThaiVaCheDo+0x112>
                         // Perform Action based on color
                         switch (g_lastDetectedColor) {
 80029c4:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <capNhatTrangThaiVaCheDo+0x2ac>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d00d      	beq.n	80029e8 <capNhatTrangThaiVaCheDo+0xf4>
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	dc12      	bgt.n	80029f6 <capNhatTrangThaiVaCheDo+0x102>
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d005      	beq.n	80029e0 <capNhatTrangThaiVaCheDo+0xec>
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d10e      	bne.n	80029f6 <capNhatTrangThaiVaCheDo+0x102>
                             case COLOR_GREEN: toggleRelay(1); break;
 80029d8:	2001      	movs	r0, #1
 80029da:	f7ff fbed 	bl	80021b8 <toggleRelay>
 80029de:	e00e      	b.n	80029fe <capNhatTrangThaiVaCheDo+0x10a>
                             case COLOR_RED:   toggleRelay(2); break;
 80029e0:	2002      	movs	r0, #2
 80029e2:	f7ff fbe9 	bl	80021b8 <toggleRelay>
 80029e6:	e00a      	b.n	80029fe <capNhatTrangThaiVaCheDo+0x10a>
                             case COLOR_YELLOW: toggleRelay(1); toggleRelay(2); break;
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff fbe5 	bl	80021b8 <toggleRelay>
 80029ee:	2002      	movs	r0, #2
 80029f0:	f7ff fbe2 	bl	80021b8 <toggleRelay>
 80029f4:	e003      	b.n	80029fe <capNhatTrangThaiVaCheDo+0x10a>
                             default: logToLCD("Color OK, no action"); break; // Other valid colors but no action defined
 80029f6:	486b      	ldr	r0, [pc, #428]	@ (8002ba4 <capNhatTrangThaiVaCheDo+0x2b0>)
 80029f8:	f7ff fb60 	bl	80020bc <logToLCD>
 80029fc:	bf00      	nop
                         }
                         g_currentState = STATE_ACTION_DONE;
 80029fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a00:	2203      	movs	r2, #3
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e005      	b.n	8002a12 <capNhatTrangThaiVaCheDo+0x11e>
                     } else {
                         logToLCD("Error: Mau Khong XD");
 8002a06:	4868      	ldr	r0, [pc, #416]	@ (8002ba8 <capNhatTrangThaiVaCheDo+0x2b4>)
 8002a08:	f7ff fb58 	bl	80020bc <logToLCD>
                         g_currentState = STATE_ERROR; // Or back to SCANNING? Maybe ERROR is better.
 8002a0c:	4b58      	ldr	r3, [pc, #352]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a0e:	2204      	movs	r2, #4
 8002a10:	701a      	strb	r2, [r3, #0]
                     }
                     g_forceLcdUpdate = true;
 8002a12:	4b5e      	ldr	r3, [pc, #376]	@ (8002b8c <capNhatTrangThaiVaCheDo+0x298>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
                     break;
 8002a18:	e037      	b.n	8002a8a <capNhatTrangThaiVaCheDo+0x196>

                 case STATE_ACTION_DONE:
                 case STATE_ERROR:
                     // Wait here until card is removed
                     if (!g_cardPresent) {
 8002a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b90 <capNhatTrangThaiVaCheDo+0x29c>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	f083 0301 	eor.w	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02d      	beq.n	8002a84 <capNhatTrangThaiVaCheDo+0x190>
                         g_currentState = STATE_IDLE;
 8002a28:	4b51      	ldr	r3, [pc, #324]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
                          g_forceLcdUpdate = true;
 8002a2e:	4b57      	ldr	r3, [pc, #348]	@ (8002b8c <capNhatTrangThaiVaCheDo+0x298>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
                     } else {
                         // Optional: Could go back to SCANNING after a delay if card stays
                         // For now, just waits for removal.
                     }
                     break;
 8002a34:	e026      	b.n	8002a84 <capNhatTrangThaiVaCheDo+0x190>

                 default: // Handle unexpected states in Auto mode
                    if(g_currentState != STATE_IDLE && g_currentState != STATE_SCANNING && g_currentState != STATE_PROCESSING && g_currentState != STATE_ACTION_DONE && g_currentState != STATE_ERROR)
 8002a36:	4b4e      	ldr	r3, [pc, #312]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d023      	beq.n	8002a88 <capNhatTrangThaiVaCheDo+0x194>
 8002a40:	4b4b      	ldr	r3, [pc, #300]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d01e      	beq.n	8002a88 <capNhatTrangThaiVaCheDo+0x194>
 8002a4a:	4b49      	ldr	r3, [pc, #292]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d019      	beq.n	8002a88 <capNhatTrangThaiVaCheDo+0x194>
 8002a54:	4b46      	ldr	r3, [pc, #280]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d014      	beq.n	8002a88 <capNhatTrangThaiVaCheDo+0x194>
 8002a5e:	4b44      	ldr	r3, [pc, #272]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d00f      	beq.n	8002a88 <capNhatTrangThaiVaCheDo+0x194>
                    {
                         logToLCD("Invalid Auto State!");
 8002a68:	4850      	ldr	r0, [pc, #320]	@ (8002bac <capNhatTrangThaiVaCheDo+0x2b8>)
 8002a6a:	f7ff fb27 	bl	80020bc <logToLCD>
                         g_currentState = STATE_IDLE;
 8002a6e:	4b40      	ldr	r3, [pc, #256]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
                         g_forceLcdUpdate = true;
 8002a74:	4b45      	ldr	r3, [pc, #276]	@ (8002b8c <capNhatTrangThaiVaCheDo+0x298>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 8002a7a:	e005      	b.n	8002a88 <capNhatTrangThaiVaCheDo+0x194>
                     break;
 8002a7c:	bf00      	nop
 8002a7e:	e0c0      	b.n	8002c02 <capNhatTrangThaiVaCheDo+0x30e>
                     break;
 8002a80:	bf00      	nop
 8002a82:	e0be      	b.n	8002c02 <capNhatTrangThaiVaCheDo+0x30e>
                     break;
 8002a84:	bf00      	nop
 8002a86:	e0bc      	b.n	8002c02 <capNhatTrangThaiVaCheDo+0x30e>
                    break;
 8002a88:	bf00      	nop
             }
             break; // End MODE_AUTOMATIC
 8002a8a:	e0ba      	b.n	8002c02 <capNhatTrangThaiVaCheDo+0x30e>

         case MODE_MANUAL:
             switch (g_currentState) {
 8002a8c:	4b38      	ldr	r3, [pc, #224]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b07      	cmp	r3, #7
 8002a94:	d04f      	beq.n	8002b36 <capNhatTrangThaiVaCheDo+0x242>
 8002a96:	2b07      	cmp	r3, #7
 8002a98:	f300 8092 	bgt.w	8002bc0 <capNhatTrangThaiVaCheDo+0x2cc>
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d002      	beq.n	8002aa6 <capNhatTrangThaiVaCheDo+0x1b2>
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d02c      	beq.n	8002afe <capNhatTrangThaiVaCheDo+0x20a>
 8002aa4:	e08c      	b.n	8002bc0 <capNhatTrangThaiVaCheDo+0x2cc>
                 case STATE_MANUAL_INPUT_WAIT:
                     if (g_buttonManR1.isPressed && !g_buttonManR1.waitForRelease) { // Check if button 2 starts being held
 8002aa6:	4b35      	ldr	r3, [pc, #212]	@ (8002b7c <capNhatTrangThaiVaCheDo+0x288>)
 8002aa8:	7b1b      	ldrb	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d010      	beq.n	8002ad0 <capNhatTrangThaiVaCheDo+0x1dc>
 8002aae:	4b33      	ldr	r3, [pc, #204]	@ (8002b7c <capNhatTrangThaiVaCheDo+0x288>)
 8002ab0:	7b5b      	ldrb	r3, [r3, #13]
 8002ab2:	f083 0301 	eor.w	r3, r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <capNhatTrangThaiVaCheDo+0x1dc>
                         g_currentState = STATE_MANUAL_BTN2_HELD;
 8002abc:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002abe:	2206      	movs	r2, #6
 8002ac0:	701a      	strb	r2, [r3, #0]
                         logToLCD("Nut 2 Giu...");
 8002ac2:	483b      	ldr	r0, [pc, #236]	@ (8002bb0 <capNhatTrangThaiVaCheDo+0x2bc>)
 8002ac4:	f7ff fafa 	bl	80020bc <logToLCD>
                         g_forceLcdUpdate = true;
 8002ac8:	4b30      	ldr	r3, [pc, #192]	@ (8002b8c <capNhatTrangThaiVaCheDo+0x298>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
                          g_currentState = STATE_MANUAL_BTN3_HELD;
                          logToLCD("Nut 3 Giu...");
                          g_forceLcdUpdate = true;
                     }
                     // Mode switch handled earlier
                     break;
 8002ace:	e090      	b.n	8002bf2 <capNhatTrangThaiVaCheDo+0x2fe>
                     } else if (g_buttonManR2.isPressed && !g_buttonManR2.waitForRelease) { // Check if button 3 starts being held
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <capNhatTrangThaiVaCheDo+0x28c>)
 8002ad2:	7b1b      	ldrb	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 808c 	beq.w	8002bf2 <capNhatTrangThaiVaCheDo+0x2fe>
 8002ada:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <capNhatTrangThaiVaCheDo+0x28c>)
 8002adc:	7b5b      	ldrb	r3, [r3, #13]
 8002ade:	f083 0301 	eor.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8084 	beq.w	8002bf2 <capNhatTrangThaiVaCheDo+0x2fe>
                          g_currentState = STATE_MANUAL_BTN3_HELD;
 8002aea:	4b21      	ldr	r3, [pc, #132]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002aec:	2207      	movs	r2, #7
 8002aee:	701a      	strb	r2, [r3, #0]
                          logToLCD("Nut 3 Giu...");
 8002af0:	4830      	ldr	r0, [pc, #192]	@ (8002bb4 <capNhatTrangThaiVaCheDo+0x2c0>)
 8002af2:	f7ff fae3 	bl	80020bc <logToLCD>
                          g_forceLcdUpdate = true;
 8002af6:	4b25      	ldr	r3, [pc, #148]	@ (8002b8c <capNhatTrangThaiVaCheDo+0x298>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
                     break;
 8002afc:	e079      	b.n	8002bf2 <capNhatTrangThaiVaCheDo+0x2fe>

                 case STATE_MANUAL_BTN2_HELD:
                     if (g_buttonManR1.longPressDetected) {
 8002afe:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <capNhatTrangThaiVaCheDo+0x288>)
 8002b00:	7bdb      	ldrb	r3, [r3, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <capNhatTrangThaiVaCheDo+0x220>
                         toggleRelay(1); // Action on long press
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7ff fb56 	bl	80021b8 <toggleRelay>
                         g_currentState = STATE_MANUAL_INPUT_WAIT; // Go back to waiting after action (button needs release)
 8002b0c:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002b0e:	2205      	movs	r2, #5
 8002b10:	701a      	strb	r2, [r3, #0]
                          g_currentState = STATE_MANUAL_INPUT_WAIT;
                          logToLCD("Nut 2 Thả");
                          g_forceLcdUpdate = true;
                     }
                     // Mode switch handled earlier
                     break;
 8002b12:	e070      	b.n	8002bf6 <capNhatTrangThaiVaCheDo+0x302>
                     } else if (!g_buttonManR1.isPressed) { // Released before long press
 8002b14:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <capNhatTrangThaiVaCheDo+0x288>)
 8002b16:	7b1b      	ldrb	r3, [r3, #12]
 8002b18:	f083 0301 	eor.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d069      	beq.n	8002bf6 <capNhatTrangThaiVaCheDo+0x302>
                          g_currentState = STATE_MANUAL_INPUT_WAIT;
 8002b22:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002b24:	2205      	movs	r2, #5
 8002b26:	701a      	strb	r2, [r3, #0]
                          logToLCD("Nut 2 Thả");
 8002b28:	4823      	ldr	r0, [pc, #140]	@ (8002bb8 <capNhatTrangThaiVaCheDo+0x2c4>)
 8002b2a:	f7ff fac7 	bl	80020bc <logToLCD>
                          g_forceLcdUpdate = true;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <capNhatTrangThaiVaCheDo+0x298>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
                     break;
 8002b34:	e05f      	b.n	8002bf6 <capNhatTrangThaiVaCheDo+0x302>

                 case STATE_MANUAL_BTN3_HELD:
                     if (g_buttonManR2.longPressDetected) {
 8002b36:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <capNhatTrangThaiVaCheDo+0x28c>)
 8002b38:	7bdb      	ldrb	r3, [r3, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <capNhatTrangThaiVaCheDo+0x258>
                         toggleRelay(2); // Action on long press
 8002b3e:	2002      	movs	r0, #2
 8002b40:	f7ff fb3a 	bl	80021b8 <toggleRelay>
                         g_currentState = STATE_MANUAL_INPUT_WAIT; // Go back to waiting after action
 8002b44:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002b46:	2205      	movs	r2, #5
 8002b48:	701a      	strb	r2, [r3, #0]
                          g_currentState = STATE_MANUAL_INPUT_WAIT;
                          logToLCD("Nut 3 Thả");
                          g_forceLcdUpdate = true;
                     }
                      // Mode switch handled earlier
                     break;
 8002b4a:	e056      	b.n	8002bfa <capNhatTrangThaiVaCheDo+0x306>
                     } else if (!g_buttonManR2.isPressed) { // Released before long press
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <capNhatTrangThaiVaCheDo+0x28c>)
 8002b4e:	7b1b      	ldrb	r3, [r3, #12]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d04f      	beq.n	8002bfa <capNhatTrangThaiVaCheDo+0x306>
                          g_currentState = STATE_MANUAL_INPUT_WAIT;
 8002b5a:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <capNhatTrangThaiVaCheDo+0x27c>)
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	701a      	strb	r2, [r3, #0]
                          logToLCD("Nut 3 Thả");
 8002b60:	4816      	ldr	r0, [pc, #88]	@ (8002bbc <capNhatTrangThaiVaCheDo+0x2c8>)
 8002b62:	f7ff faab 	bl	80020bc <logToLCD>
                          g_forceLcdUpdate = true;
 8002b66:	4b09      	ldr	r3, [pc, #36]	@ (8002b8c <capNhatTrangThaiVaCheDo+0x298>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
                     break;
 8002b6c:	e045      	b.n	8002bfa <capNhatTrangThaiVaCheDo+0x306>
 8002b6e:	bf00      	nop
 8002b70:	20000410 	.word	0x20000410
 8002b74:	20000411 	.word	0x20000411
 8002b78:	2000003c 	.word	0x2000003c
 8002b7c:	2000004c 	.word	0x2000004c
 8002b80:	2000005c 	.word	0x2000005c
 8002b84:	0800c908 	.word	0x0800c908
 8002b88:	0800c918 	.word	0x0800c918
 8002b8c:	20000039 	.word	0x20000039
 8002b90:	20000414 	.word	0x20000414
 8002b94:	20000418 	.word	0x20000418
 8002b98:	2000041a 	.word	0x2000041a
 8002b9c:	2000041c 	.word	0x2000041c
 8002ba0:	20000420 	.word	0x20000420
 8002ba4:	0800c92c 	.word	0x0800c92c
 8002ba8:	0800c940 	.word	0x0800c940
 8002bac:	0800c954 	.word	0x0800c954
 8002bb0:	0800c968 	.word	0x0800c968
 8002bb4:	0800c978 	.word	0x0800c978
 8002bb8:	0800c988 	.word	0x0800c988
 8002bbc:	0800c994 	.word	0x0800c994

                 default: // Handle unexpected states in Manual mode
                    if(g_currentState != STATE_MANUAL_INPUT_WAIT && g_currentState != STATE_MANUAL_BTN2_HELD && g_currentState != STATE_MANUAL_BTN3_HELD)
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <capNhatTrangThaiVaCheDo+0x334>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d019      	beq.n	8002bfe <capNhatTrangThaiVaCheDo+0x30a>
 8002bca:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <capNhatTrangThaiVaCheDo+0x334>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b06      	cmp	r3, #6
 8002bd2:	d014      	beq.n	8002bfe <capNhatTrangThaiVaCheDo+0x30a>
 8002bd4:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <capNhatTrangThaiVaCheDo+0x334>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b07      	cmp	r3, #7
 8002bdc:	d00f      	beq.n	8002bfe <capNhatTrangThaiVaCheDo+0x30a>
                    {
                         logToLCD("Invalid Manual State!");
 8002bde:	4813      	ldr	r0, [pc, #76]	@ (8002c2c <capNhatTrangThaiVaCheDo+0x338>)
 8002be0:	f7ff fa6c 	bl	80020bc <logToLCD>
                         g_currentState = STATE_MANUAL_INPUT_WAIT;
 8002be4:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <capNhatTrangThaiVaCheDo+0x334>)
 8002be6:	2205      	movs	r2, #5
 8002be8:	701a      	strb	r2, [r3, #0]
                         g_forceLcdUpdate = true;
 8002bea:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <capNhatTrangThaiVaCheDo+0x33c>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
                    }
                     break;
 8002bf0:	e005      	b.n	8002bfe <capNhatTrangThaiVaCheDo+0x30a>
                     break;
 8002bf2:	bf00      	nop
 8002bf4:	e004      	b.n	8002c00 <capNhatTrangThaiVaCheDo+0x30c>
                     break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <capNhatTrangThaiVaCheDo+0x30c>
                     break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <capNhatTrangThaiVaCheDo+0x30c>
                     break;
 8002bfe:	bf00      	nop
             }
             break; // End MODE_MANUAL
 8002c00:	bf00      	nop
     }

     // Log state change for debugging if needed
     if (g_currentState != ttTruoc || g_currentMode != modeTruoc) {
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <capNhatTrangThaiVaCheDo+0x334>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	79fa      	ldrb	r2, [r7, #7]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d105      	bne.n	8002c1a <capNhatTrangThaiVaCheDo+0x326>
 8002c0e:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <capNhatTrangThaiVaCheDo+0x340>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	79ba      	ldrb	r2, [r7, #6]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d002      	beq.n	8002c20 <capNhatTrangThaiVaCheDo+0x32c>
          // char msg[40];
          // snprintf(msg, sizeof(msg),"Mode:%s St:%s", modeToString(g_currentMode), stateToString(g_currentState));
          // printf("%s\r\n", msg); // UART log
          // logToLCD(stateToString(g_currentState)); // Log state name to LCD
          g_forceLcdUpdate = true;
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <capNhatTrangThaiVaCheDo+0x33c>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
     }
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000410 	.word	0x20000410
 8002c2c:	0800c9a0 	.word	0x0800c9a0
 8002c30:	20000039 	.word	0x20000039
 8002c34:	20000411 	.word	0x20000411

08002c38 <capNhatManHinhLCD>:

// --- LCD Update Logic ---
void capNhatManHinhLCD(void) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b092      	sub	sp, #72	@ 0x48
 8002c3c:	af04      	add	r7, sp, #16
    static uint16_t lastDrawnDist = 0xFFFF;
    static bool lastDrawnCardPresent = false;
    static uint16_t lastDrawnR = 0, lastDrawnG = 0, lastDrawnB = 0;
    static char lastDrawnLog[LCD_LOG_BUFFER_SIZE] = "";

    bool modeChanged = (g_currentMode != lastDrawnMode) || g_forceLcdUpdate;
 8002c3e:	4ba7      	ldr	r3, [pc, #668]	@ (8002edc <capNhatManHinhLCD+0x2a4>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4ba6      	ldr	r3, [pc, #664]	@ (8002ee0 <capNhatManHinhLCD+0x2a8>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d103      	bne.n	8002c54 <capNhatManHinhLCD+0x1c>
 8002c4c:	4ba5      	ldr	r3, [pc, #660]	@ (8002ee4 <capNhatManHinhLCD+0x2ac>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <capNhatManHinhLCD+0x20>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <capNhatManHinhLCD+0x22>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8002c5e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool stateChanged = (g_currentState != lastDrawnState) || g_forceLcdUpdate;
 8002c6a:	4b9f      	ldr	r3, [pc, #636]	@ (8002ee8 <capNhatManHinhLCD+0x2b0>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b9e      	ldr	r3, [pc, #632]	@ (8002eec <capNhatManHinhLCD+0x2b4>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d103      	bne.n	8002c80 <capNhatManHinhLCD+0x48>
 8002c78:	4b9a      	ldr	r3, [pc, #616]	@ (8002ee4 <capNhatManHinhLCD+0x2ac>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <capNhatManHinhLCD+0x4c>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <capNhatManHinhLCD+0x4e>
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8002c8a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    bool relaysChanged = (g_relay1State != lastDrawnRly1) || (g_relay2State != lastDrawnRly2) || g_forceLcdUpdate;
 8002c96:	4b96      	ldr	r3, [pc, #600]	@ (8002ef0 <capNhatManHinhLCD+0x2b8>)
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	4b96      	ldr	r3, [pc, #600]	@ (8002ef4 <capNhatManHinhLCD+0x2bc>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d109      	bne.n	8002cb6 <capNhatManHinhLCD+0x7e>
 8002ca2:	4b95      	ldr	r3, [pc, #596]	@ (8002ef8 <capNhatManHinhLCD+0x2c0>)
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	4b95      	ldr	r3, [pc, #596]	@ (8002efc <capNhatManHinhLCD+0x2c4>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d103      	bne.n	8002cb6 <capNhatManHinhLCD+0x7e>
 8002cae:	4b8d      	ldr	r3, [pc, #564]	@ (8002ee4 <capNhatManHinhLCD+0x2ac>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <capNhatManHinhLCD+0x82>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <capNhatManHinhLCD+0x84>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    bool distChanged = (g_latestDistance != lastDrawnDist) || (g_cardPresent != lastDrawnCardPresent) || g_forceLcdUpdate;
 8002ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8002f00 <capNhatManHinhLCD+0x2c8>)
 8002cce:	881a      	ldrh	r2, [r3, #0]
 8002cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8002f04 <capNhatManHinhLCD+0x2cc>)
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d109      	bne.n	8002cec <capNhatManHinhLCD+0xb4>
 8002cd8:	4b8b      	ldr	r3, [pc, #556]	@ (8002f08 <capNhatManHinhLCD+0x2d0>)
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	4b8b      	ldr	r3, [pc, #556]	@ (8002f0c <capNhatManHinhLCD+0x2d4>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d103      	bne.n	8002cec <capNhatManHinhLCD+0xb4>
 8002ce4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee4 <capNhatManHinhLCD+0x2ac>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <capNhatManHinhLCD+0xb8>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <capNhatManHinhLCD+0xba>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002cf6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool rgbChanged = (g_latestR != lastDrawnR) || (g_latestG != lastDrawnG) || (g_latestB != lastDrawnB) || g_forceLcdUpdate;
 8002d02:	4b83      	ldr	r3, [pc, #524]	@ (8002f10 <capNhatManHinhLCD+0x2d8>)
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	4b83      	ldr	r3, [pc, #524]	@ (8002f14 <capNhatManHinhLCD+0x2dc>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d10f      	bne.n	8002d2e <capNhatManHinhLCD+0xf6>
 8002d0e:	4b82      	ldr	r3, [pc, #520]	@ (8002f18 <capNhatManHinhLCD+0x2e0>)
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	4b82      	ldr	r3, [pc, #520]	@ (8002f1c <capNhatManHinhLCD+0x2e4>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d109      	bne.n	8002d2e <capNhatManHinhLCD+0xf6>
 8002d1a:	4b81      	ldr	r3, [pc, #516]	@ (8002f20 <capNhatManHinhLCD+0x2e8>)
 8002d1c:	881a      	ldrh	r2, [r3, #0]
 8002d1e:	4b81      	ldr	r3, [pc, #516]	@ (8002f24 <capNhatManHinhLCD+0x2ec>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d103      	bne.n	8002d2e <capNhatManHinhLCD+0xf6>
 8002d26:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <capNhatManHinhLCD+0x2ac>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <capNhatManHinhLCD+0xfa>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <capNhatManHinhLCD+0xfc>
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002d38:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    bool logChanged = g_lcdLogUpdated || g_forceLcdUpdate;
 8002d44:	4b78      	ldr	r3, [pc, #480]	@ (8002f28 <capNhatManHinhLCD+0x2f0>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d103      	bne.n	8002d54 <capNhatManHinhLCD+0x11c>
 8002d4c:	4b65      	ldr	r3, [pc, #404]	@ (8002ee4 <capNhatManHinhLCD+0x2ac>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <capNhatManHinhLCD+0x120>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <capNhatManHinhLCD+0x122>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002d5e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    // If nothing changed, skip redraw
    if (!modeChanged && !stateChanged && !relaysChanged && !distChanged && !rgbChanged && !logChanged) {
 8002d6a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d023      	beq.n	8002dc0 <capNhatManHinhLCD+0x188>
 8002d78:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002d7c:	f083 0301 	eor.w	r3, r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01c      	beq.n	8002dc0 <capNhatManHinhLCD+0x188>
 8002d86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <capNhatManHinhLCD+0x188>
 8002d94:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00e      	beq.n	8002dc0 <capNhatManHinhLCD+0x188>
 8002da2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002da6:	f083 0301 	eor.w	r3, r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <capNhatManHinhLCD+0x188>
 8002db0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002db4:	f083 0301 	eor.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 82b1 	bne.w	8003322 <capNhatManHinhLCD+0x6ea>
    }

    char lineBuffer[45]; // Buffer for formatting lines

    // 1. Draw Mode Line
    if (modeChanged || stateChanged) { // Redraw if mode or state changes context
 8002dc0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <capNhatManHinhLCD+0x198>
 8002dc8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02a      	beq.n	8002e26 <capNhatManHinhLCD+0x1ee>
        snprintf(lineBuffer, sizeof(lineBuffer), "CHE DO: %s", modeToString(g_currentMode));
 8002dd0:	4b42      	ldr	r3, [pc, #264]	@ (8002edc <capNhatManHinhLCD+0x2a4>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fae8 	bl	80023ac <modeToString>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4638      	mov	r0, r7
 8002de0:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <capNhatManHinhLCD+0x2f4>)
 8002de2:	212d      	movs	r1, #45	@ 0x2d
 8002de4:	f006 f822 	bl	8008e2c <sniprintf>
        ST7789_Fill(0, LCD_MODE_LINE_Y, ST7789_WIDTH - 1, LCD_MODE_LINE_Y + LCD_LINE_HEIGHT, BLACK); // Clear line
 8002de8:	4b51      	ldr	r3, [pc, #324]	@ (8002f30 <capNhatManHinhLCD+0x2f8>)
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	3305      	adds	r3, #5
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	9200      	str	r2, [sp, #0]
 8002df4:	22ef      	movs	r2, #239	@ 0xef
 8002df6:	2105      	movs	r1, #5
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f000 fee3 	bl	8003bc4 <ST7789_Fill>
        ST7789_WriteString(5, LCD_MODE_LINE_Y, lineBuffer, Font_11x18, WHITE, BLACK);
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002f30 <capNhatManHinhLCD+0x2f8>)
 8002e00:	4639      	mov	r1, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	9202      	str	r2, [sp, #8]
 8002e06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e0a:	9201      	str	r2, [sp, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	460a      	mov	r2, r1
 8002e14:	2105      	movs	r1, #5
 8002e16:	2005      	movs	r0, #5
 8002e18:	f000 ffa0 	bl	8003d5c <ST7789_WriteString>
        lastDrawnMode = g_currentMode;
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002edc <capNhatManHinhLCD+0x2a4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ee0 <capNhatManHinhLCD+0x2a8>)
 8002e24:	701a      	strb	r2, [r3, #0]
    }

    // 2. Draw State/Instruction Line
    if (stateChanged || modeChanged) { // Redraw if state or mode changes context
 8002e26:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <capNhatManHinhLCD+0x200>
 8002e2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80df 	beq.w	8002ff6 <capNhatManHinhLCD+0x3be>
        ST7789_Fill(0, LCD_STATE_LINE_Y, ST7789_WIDTH - 1, LCD_STATE_LINE_Y + LCD_LINE_HEIGHT, BLACK); // Clear line
 8002e38:	4b3d      	ldr	r3, [pc, #244]	@ (8002f30 <capNhatManHinhLCD+0x2f8>)
 8002e3a:	785b      	ldrb	r3, [r3, #1]
 8002e3c:	3307      	adds	r3, #7
 8002e3e:	b299      	uxth	r1, r3
 8002e40:	4b3b      	ldr	r3, [pc, #236]	@ (8002f30 <capNhatManHinhLCD+0x2f8>)
 8002e42:	785b      	ldrb	r3, [r3, #1]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3307      	adds	r3, #7
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	9200      	str	r2, [sp, #0]
 8002e50:	22ef      	movs	r2, #239	@ 0xef
 8002e52:	2000      	movs	r0, #0
 8002e54:	f000 feb6 	bl	8003bc4 <ST7789_Fill>
        uint16_t stateColor = WHITE;
 8002e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        switch (g_currentState) {
 8002e5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <capNhatManHinhLCD+0x2b0>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b07      	cmp	r3, #7
 8002e66:	f200 80a6 	bhi.w	8002fb6 <capNhatManHinhLCD+0x37e>
 8002e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <capNhatManHinhLCD+0x238>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002e91 	.word	0x08002e91
 8002e74:	08002eb3 	.word	0x08002eb3
 8002e78:	08002ec7 	.word	0x08002ec7
 8002e7c:	08002f49 	.word	0x08002f49
 8002e80:	08002f67 	.word	0x08002f67
 8002e84:	08002f7b 	.word	0x08002f7b
 8002e88:	08002f8f 	.word	0x08002f8f
 8002e8c:	08002fa3 	.word	0x08002fa3
            case STATE_IDLE:
                snprintf(lineBuffer, sizeof(lineBuffer), "%s", (g_currentMode == MODE_AUTOMATIC) ? "XIN MOI QUET THE" : "CHO NUT NHAN...");
 8002e90:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <capNhatManHinhLCD+0x2a4>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <capNhatManHinhLCD+0x266>
 8002e9a:	4b26      	ldr	r3, [pc, #152]	@ (8002f34 <capNhatManHinhLCD+0x2fc>)
 8002e9c:	e000      	b.n	8002ea0 <capNhatManHinhLCD+0x268>
 8002e9e:	4b26      	ldr	r3, [pc, #152]	@ (8002f38 <capNhatManHinhLCD+0x300>)
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	4a26      	ldr	r2, [pc, #152]	@ (8002f3c <capNhatManHinhLCD+0x304>)
 8002ea4:	212d      	movs	r1, #45	@ 0x2d
 8002ea6:	f005 ffc1 	bl	8008e2c <sniprintf>
                stateColor = GREENTFT;
 8002eaa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002eae:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8002eb0:	e08b      	b.n	8002fca <capNhatManHinhLCD+0x392>
            case STATE_SCANNING:
                snprintf(lineBuffer, sizeof(lineBuffer), "DANG DOC MAU THE...");
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <capNhatManHinhLCD+0x308>)
 8002eb6:	212d      	movs	r1, #45	@ 0x2d
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 ffb7 	bl	8008e2c <sniprintf>
                stateColor = YELLOW;
 8002ebe:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002ec2:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8002ec4:	e081      	b.n	8002fca <capNhatManHinhLCD+0x392>
            case STATE_PROCESSING:
                snprintf(lineBuffer, sizeof(lineBuffer), "DANG XU LY MAU...");
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f44 <capNhatManHinhLCD+0x30c>)
 8002eca:	212d      	movs	r1, #45	@ 0x2d
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f005 ffad 	bl	8008e2c <sniprintf>
                stateColor = YELLOW;
 8002ed2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002ed6:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8002ed8:	e077      	b.n	8002fca <capNhatManHinhLCD+0x392>
 8002eda:	bf00      	nop
 8002edc:	20000411 	.word	0x20000411
 8002ee0:	2000006c 	.word	0x2000006c
 8002ee4:	20000039 	.word	0x20000039
 8002ee8:	20000410 	.word	0x20000410
 8002eec:	2000006d 	.word	0x2000006d
 8002ef0:	20000412 	.word	0x20000412
 8002ef4:	20000436 	.word	0x20000436
 8002ef8:	20000413 	.word	0x20000413
 8002efc:	20000437 	.word	0x20000437
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	2000006e 	.word	0x2000006e
 8002f08:	20000414 	.word	0x20000414
 8002f0c:	20000438 	.word	0x20000438
 8002f10:	20000418 	.word	0x20000418
 8002f14:	2000043a 	.word	0x2000043a
 8002f18:	2000041a 	.word	0x2000041a
 8002f1c:	2000043c 	.word	0x2000043c
 8002f20:	2000041c 	.word	0x2000041c
 8002f24:	2000043e 	.word	0x2000043e
 8002f28:	20000038 	.word	0x20000038
 8002f2c:	0800c9b8 	.word	0x0800c9b8
 8002f30:	20000004 	.word	0x20000004
 8002f34:	0800c9c4 	.word	0x0800c9c4
 8002f38:	0800c9d8 	.word	0x0800c9d8
 8002f3c:	0800c9e8 	.word	0x0800c9e8
 8002f40:	0800c9ec 	.word	0x0800c9ec
 8002f44:	0800ca00 	.word	0x0800ca00
            case STATE_ACTION_DONE:
                snprintf(lineBuffer, sizeof(lineBuffer), "MAU: %s -> XONG", colorToString(g_lastDetectedColor));
 8002f48:	4b93      	ldr	r3, [pc, #588]	@ (8003198 <capNhatManHinhLCD+0x560>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fa09 	bl	8002364 <colorToString>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4638      	mov	r0, r7
 8002f56:	4a91      	ldr	r2, [pc, #580]	@ (800319c <capNhatManHinhLCD+0x564>)
 8002f58:	212d      	movs	r1, #45	@ 0x2d
 8002f5a:	f005 ff67 	bl	8008e2c <sniprintf>
                stateColor = CYAN;
 8002f5e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002f62:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8002f64:	e031      	b.n	8002fca <capNhatManHinhLCD+0x392>
            case STATE_ERROR:
                snprintf(lineBuffer, sizeof(lineBuffer), "LOI: MAU KHONG XD");
 8002f66:	463b      	mov	r3, r7
 8002f68:	4a8d      	ldr	r2, [pc, #564]	@ (80031a0 <capNhatManHinhLCD+0x568>)
 8002f6a:	212d      	movs	r1, #45	@ 0x2d
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f005 ff5d 	bl	8008e2c <sniprintf>
                stateColor = REDTFT;
 8002f72:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f76:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8002f78:	e027      	b.n	8002fca <capNhatManHinhLCD+0x392>
             case STATE_MANUAL_INPUT_WAIT:
                 snprintf(lineBuffer, sizeof(lineBuffer),"NHAN GIU NUT R1/R2");
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	4a89      	ldr	r2, [pc, #548]	@ (80031a4 <capNhatManHinhLCD+0x56c>)
 8002f7e:	212d      	movs	r1, #45	@ 0x2d
 8002f80:	4618      	mov	r0, r3
 8002f82:	f005 ff53 	bl	8008e2c <sniprintf>
                 stateColor = WHITE;
 8002f86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
                 break;
 8002f8c:	e01d      	b.n	8002fca <capNhatManHinhLCD+0x392>
             case STATE_MANUAL_BTN2_HELD:
                 snprintf(lineBuffer, sizeof(lineBuffer),"GIU NUT R1 (3s)...");
 8002f8e:	463b      	mov	r3, r7
 8002f90:	4a85      	ldr	r2, [pc, #532]	@ (80031a8 <capNhatManHinhLCD+0x570>)
 8002f92:	212d      	movs	r1, #45	@ 0x2d
 8002f94:	4618      	mov	r0, r3
 8002f96:	f005 ff49 	bl	8008e2c <sniprintf>
                 stateColor = YELLOW;
 8002f9a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002f9e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                 break;
 8002fa0:	e013      	b.n	8002fca <capNhatManHinhLCD+0x392>
             case STATE_MANUAL_BTN3_HELD:
                  snprintf(lineBuffer, sizeof(lineBuffer),"GIU NUT R2 (3s)...");
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	4a81      	ldr	r2, [pc, #516]	@ (80031ac <capNhatManHinhLCD+0x574>)
 8002fa6:	212d      	movs	r1, #45	@ 0x2d
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f005 ff3f 	bl	8008e2c <sniprintf>
                 stateColor = YELLOW;
 8002fae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002fb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
                 break;
 8002fb4:	e009      	b.n	8002fca <capNhatManHinhLCD+0x392>
            default:
                snprintf(lineBuffer, sizeof(lineBuffer), "TRANG THAI LOI");
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	4a7d      	ldr	r2, [pc, #500]	@ (80031b0 <capNhatManHinhLCD+0x578>)
 8002fba:	212d      	movs	r1, #45	@ 0x2d
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f005 ff35 	bl	8008e2c <sniprintf>
                 stateColor = REDTFT;
 8002fc2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fc6:	86fb      	strh	r3, [r7, #54]	@ 0x36
                break;
 8002fc8:	bf00      	nop
        }
        ST7789_WriteString(5, LCD_STATE_LINE_Y, lineBuffer, Font_11x18, stateColor, BLACK);
 8002fca:	4b7a      	ldr	r3, [pc, #488]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	3307      	adds	r3, #7
 8002fd0:	b299      	uxth	r1, r3
 8002fd2:	4b78      	ldr	r3, [pc, #480]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 8002fd4:	4638      	mov	r0, r7
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	9202      	str	r2, [sp, #8]
 8002fda:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002fdc:	9201      	str	r2, [sp, #4]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	9200      	str	r2, [sp, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	2005      	movs	r0, #5
 8002fe8:	f000 feb8 	bl	8003d5c <ST7789_WriteString>
        lastDrawnState = g_currentState;
 8002fec:	4b72      	ldr	r3, [pc, #456]	@ (80031b8 <capNhatManHinhLCD+0x580>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4b72      	ldr	r3, [pc, #456]	@ (80031bc <capNhatManHinhLCD+0x584>)
 8002ff4:	701a      	strb	r2, [r3, #0]
    }

    // 3. Draw Relay Status Line
    if (relaysChanged) {
 8002ff6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d044      	beq.n	8003088 <capNhatManHinhLCD+0x450>
        snprintf(lineBuffer, sizeof(lineBuffer), "TB1:%s  TB2:%s", g_relay1State ? "ON " : "OFF", g_relay2State ? "ON " : "OFF");
 8002ffe:	4b70      	ldr	r3, [pc, #448]	@ (80031c0 <capNhatManHinhLCD+0x588>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <capNhatManHinhLCD+0x3d2>
 8003006:	4a6f      	ldr	r2, [pc, #444]	@ (80031c4 <capNhatManHinhLCD+0x58c>)
 8003008:	e000      	b.n	800300c <capNhatManHinhLCD+0x3d4>
 800300a:	4a6f      	ldr	r2, [pc, #444]	@ (80031c8 <capNhatManHinhLCD+0x590>)
 800300c:	4b6f      	ldr	r3, [pc, #444]	@ (80031cc <capNhatManHinhLCD+0x594>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <capNhatManHinhLCD+0x3e0>
 8003014:	4b6b      	ldr	r3, [pc, #428]	@ (80031c4 <capNhatManHinhLCD+0x58c>)
 8003016:	e000      	b.n	800301a <capNhatManHinhLCD+0x3e2>
 8003018:	4b6b      	ldr	r3, [pc, #428]	@ (80031c8 <capNhatManHinhLCD+0x590>)
 800301a:	4638      	mov	r0, r7
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	4a6b      	ldr	r2, [pc, #428]	@ (80031d0 <capNhatManHinhLCD+0x598>)
 8003022:	212d      	movs	r1, #45	@ 0x2d
 8003024:	f005 ff02 	bl	8008e2c <sniprintf>
        ST7789_Fill(0, LCD_RELAY_LINE_Y, ST7789_WIDTH - 1, LCD_RELAY_LINE_Y + LCD_LINE_HEIGHT, BLACK); // Clear line
 8003028:	4b62      	ldr	r3, [pc, #392]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	b29b      	uxth	r3, r3
 8003030:	3309      	adds	r3, #9
 8003032:	b299      	uxth	r1, r3
 8003034:	4b5f      	ldr	r3, [pc, #380]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 8003036:	785b      	ldrb	r3, [r3, #1]
 8003038:	461a      	mov	r2, r3
 800303a:	0052      	lsls	r2, r2, #1
 800303c:	4413      	add	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	3309      	adds	r3, #9
 8003042:	b29b      	uxth	r3, r3
 8003044:	2200      	movs	r2, #0
 8003046:	9200      	str	r2, [sp, #0]
 8003048:	22ef      	movs	r2, #239	@ 0xef
 800304a:	2000      	movs	r0, #0
 800304c:	f000 fdba 	bl	8003bc4 <ST7789_Fill>
        ST7789_WriteString(5, LCD_RELAY_LINE_Y, lineBuffer, Font_11x18, YELLOW, BLACK);
 8003050:	4b58      	ldr	r3, [pc, #352]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	b29b      	uxth	r3, r3
 8003058:	3309      	adds	r3, #9
 800305a:	b299      	uxth	r1, r3
 800305c:	4b55      	ldr	r3, [pc, #340]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 800305e:	4638      	mov	r0, r7
 8003060:	2200      	movs	r2, #0
 8003062:	9202      	str	r2, [sp, #8]
 8003064:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8003068:	9201      	str	r2, [sp, #4]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	9200      	str	r2, [sp, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4602      	mov	r2, r0
 8003072:	2005      	movs	r0, #5
 8003074:	f000 fe72 	bl	8003d5c <ST7789_WriteString>
        lastDrawnRly1 = g_relay1State;
 8003078:	4b51      	ldr	r3, [pc, #324]	@ (80031c0 <capNhatManHinhLCD+0x588>)
 800307a:	781a      	ldrb	r2, [r3, #0]
 800307c:	4b55      	ldr	r3, [pc, #340]	@ (80031d4 <capNhatManHinhLCD+0x59c>)
 800307e:	701a      	strb	r2, [r3, #0]
        lastDrawnRly2 = g_relay2State;
 8003080:	4b52      	ldr	r3, [pc, #328]	@ (80031cc <capNhatManHinhLCD+0x594>)
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	4b54      	ldr	r3, [pc, #336]	@ (80031d8 <capNhatManHinhLCD+0x5a0>)
 8003086:	701a      	strb	r2, [r3, #0]
    }

    // 4. Draw Distance Line
    if (distChanged) {
 8003088:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d055      	beq.n	800313c <capNhatManHinhLCD+0x504>
        if (g_latestDistance == 0xFFFF) {
 8003090:	4b52      	ldr	r3, [pc, #328]	@ (80031dc <capNhatManHinhLCD+0x5a4>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003098:	4293      	cmp	r3, r2
 800309a:	d10c      	bne.n	80030b6 <capNhatManHinhLCD+0x47e>
            snprintf(lineBuffer, sizeof(lineBuffer), "Dist: N/A %s", g_cardPresent ? "[IN]":"[OUT]");
 800309c:	4b50      	ldr	r3, [pc, #320]	@ (80031e0 <capNhatManHinhLCD+0x5a8>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <capNhatManHinhLCD+0x470>
 80030a4:	4b4f      	ldr	r3, [pc, #316]	@ (80031e4 <capNhatManHinhLCD+0x5ac>)
 80030a6:	e000      	b.n	80030aa <capNhatManHinhLCD+0x472>
 80030a8:	4b4f      	ldr	r3, [pc, #316]	@ (80031e8 <capNhatManHinhLCD+0x5b0>)
 80030aa:	4638      	mov	r0, r7
 80030ac:	4a4f      	ldr	r2, [pc, #316]	@ (80031ec <capNhatManHinhLCD+0x5b4>)
 80030ae:	212d      	movs	r1, #45	@ 0x2d
 80030b0:	f005 febc 	bl	8008e2c <sniprintf>
 80030b4:	e010      	b.n	80030d8 <capNhatManHinhLCD+0x4a0>
        } else {
            snprintf(lineBuffer, sizeof(lineBuffer), "Dist: %4u mm %s", g_latestDistance, g_cardPresent ? "[IN]":"[OUT]");
 80030b6:	4b49      	ldr	r3, [pc, #292]	@ (80031dc <capNhatManHinhLCD+0x5a4>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b48      	ldr	r3, [pc, #288]	@ (80031e0 <capNhatManHinhLCD+0x5a8>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <capNhatManHinhLCD+0x490>
 80030c4:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <capNhatManHinhLCD+0x5ac>)
 80030c6:	e000      	b.n	80030ca <capNhatManHinhLCD+0x492>
 80030c8:	4b47      	ldr	r3, [pc, #284]	@ (80031e8 <capNhatManHinhLCD+0x5b0>)
 80030ca:	4638      	mov	r0, r7
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	4a47      	ldr	r2, [pc, #284]	@ (80031f0 <capNhatManHinhLCD+0x5b8>)
 80030d2:	212d      	movs	r1, #45	@ 0x2d
 80030d4:	f005 feaa 	bl	8008e2c <sniprintf>
        }
        ST7789_Fill(0, LCD_DIST_LINE_Y, ST7789_WIDTH - 1, LCD_DIST_LINE_Y + LCD_LINE_HEIGHT, BLACK); // Clear line
 80030d8:	4b36      	ldr	r3, [pc, #216]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	461a      	mov	r2, r3
 80030de:	0052      	lsls	r2, r2, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	330e      	adds	r3, #14
 80030e6:	b299      	uxth	r1, r3
 80030e8:	4b32      	ldr	r3, [pc, #200]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 80030ea:	785b      	ldrb	r3, [r3, #1]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	330e      	adds	r3, #14
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2200      	movs	r2, #0
 80030f6:	9200      	str	r2, [sp, #0]
 80030f8:	22ef      	movs	r2, #239	@ 0xef
 80030fa:	2000      	movs	r0, #0
 80030fc:	f000 fd62 	bl	8003bc4 <ST7789_Fill>
        ST7789_WriteString(5, LCD_DIST_LINE_Y, lineBuffer, Font_11x18, WHITE, BLACK);
 8003100:	4b2c      	ldr	r3, [pc, #176]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	461a      	mov	r2, r3
 8003106:	0052      	lsls	r2, r2, #1
 8003108:	4413      	add	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	330e      	adds	r3, #14
 800310e:	b299      	uxth	r1, r3
 8003110:	4b28      	ldr	r3, [pc, #160]	@ (80031b4 <capNhatManHinhLCD+0x57c>)
 8003112:	4638      	mov	r0, r7
 8003114:	2200      	movs	r2, #0
 8003116:	9202      	str	r2, [sp, #8]
 8003118:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800311c:	9201      	str	r2, [sp, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	9200      	str	r2, [sp, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4602      	mov	r2, r0
 8003126:	2005      	movs	r0, #5
 8003128:	f000 fe18 	bl	8003d5c <ST7789_WriteString>
        lastDrawnDist = g_latestDistance;
 800312c:	4b2b      	ldr	r3, [pc, #172]	@ (80031dc <capNhatManHinhLCD+0x5a4>)
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	4b30      	ldr	r3, [pc, #192]	@ (80031f4 <capNhatManHinhLCD+0x5bc>)
 8003132:	801a      	strh	r2, [r3, #0]
        lastDrawnCardPresent = g_cardPresent;
 8003134:	4b2a      	ldr	r3, [pc, #168]	@ (80031e0 <capNhatManHinhLCD+0x5a8>)
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	4b2f      	ldr	r3, [pc, #188]	@ (80031f8 <capNhatManHinhLCD+0x5c0>)
 800313a:	701a      	strb	r2, [r3, #0]
    }

    // 5. Draw RGB Line
    if (rgbChanged || (g_currentMode == MODE_MANUAL && modeChanged)) { // Redraw if RGB changes or entering manual mode
 800313c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <capNhatManHinhLCD+0x522>
 8003144:	4b2d      	ldr	r3, [pc, #180]	@ (80031fc <capNhatManHinhLCD+0x5c4>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	f040 809e 	bne.w	800328c <capNhatManHinhLCD+0x654>
 8003150:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8099 	beq.w	800328c <capNhatManHinhLCD+0x654>
        if (g_currentMode == MODE_AUTOMATIC && g_cardPresent && g_tcsEnabled) {
 800315a:	4b28      	ldr	r3, [pc, #160]	@ (80031fc <capNhatManHinhLCD+0x5c4>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d157      	bne.n	8003214 <capNhatManHinhLCD+0x5dc>
 8003164:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <capNhatManHinhLCD+0x5a8>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d053      	beq.n	8003214 <capNhatManHinhLCD+0x5dc>
 800316c:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <capNhatManHinhLCD+0x5c8>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d04f      	beq.n	8003214 <capNhatManHinhLCD+0x5dc>
            snprintf(lineBuffer, sizeof(lineBuffer), "R:%-4u G:%-4u B:%-4u", g_latestR, g_latestG, g_latestB);
 8003174:	4b23      	ldr	r3, [pc, #140]	@ (8003204 <capNhatManHinhLCD+0x5cc>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	4b23      	ldr	r3, [pc, #140]	@ (8003208 <capNhatManHinhLCD+0x5d0>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	4b22      	ldr	r3, [pc, #136]	@ (800320c <capNhatManHinhLCD+0x5d4>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	4638      	mov	r0, r7
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	460b      	mov	r3, r1
 800318c:	4a20      	ldr	r2, [pc, #128]	@ (8003210 <capNhatManHinhLCD+0x5d8>)
 800318e:	212d      	movs	r1, #45	@ 0x2d
 8003190:	f005 fe4c 	bl	8008e2c <sniprintf>
 8003194:	e044      	b.n	8003220 <capNhatManHinhLCD+0x5e8>
 8003196:	bf00      	nop
 8003198:	20000420 	.word	0x20000420
 800319c:	0800ca14 	.word	0x0800ca14
 80031a0:	0800ca24 	.word	0x0800ca24
 80031a4:	0800ca38 	.word	0x0800ca38
 80031a8:	0800ca4c 	.word	0x0800ca4c
 80031ac:	0800ca60 	.word	0x0800ca60
 80031b0:	0800ca74 	.word	0x0800ca74
 80031b4:	20000004 	.word	0x20000004
 80031b8:	20000410 	.word	0x20000410
 80031bc:	2000006d 	.word	0x2000006d
 80031c0:	20000412 	.word	0x20000412
 80031c4:	0800ca84 	.word	0x0800ca84
 80031c8:	0800c764 	.word	0x0800c764
 80031cc:	20000413 	.word	0x20000413
 80031d0:	0800ca88 	.word	0x0800ca88
 80031d4:	20000436 	.word	0x20000436
 80031d8:	20000437 	.word	0x20000437
 80031dc:	2000000c 	.word	0x2000000c
 80031e0:	20000414 	.word	0x20000414
 80031e4:	0800ca98 	.word	0x0800ca98
 80031e8:	0800caa0 	.word	0x0800caa0
 80031ec:	0800caa8 	.word	0x0800caa8
 80031f0:	0800cab8 	.word	0x0800cab8
 80031f4:	2000006e 	.word	0x2000006e
 80031f8:	20000438 	.word	0x20000438
 80031fc:	20000411 	.word	0x20000411
 8003200:	20000416 	.word	0x20000416
 8003204:	20000418 	.word	0x20000418
 8003208:	2000041a 	.word	0x2000041a
 800320c:	2000041c 	.word	0x2000041c
 8003210:	0800cac8 	.word	0x0800cac8
        } else {
            snprintf(lineBuffer, sizeof(lineBuffer), "R: --- G: --- B: ---");
 8003214:	463b      	mov	r3, r7
 8003216:	4a45      	ldr	r2, [pc, #276]	@ (800332c <capNhatManHinhLCD+0x6f4>)
 8003218:	212d      	movs	r1, #45	@ 0x2d
 800321a:	4618      	mov	r0, r3
 800321c:	f005 fe06 	bl	8008e2c <sniprintf>
        }
        ST7789_Fill(0, LCD_RGB_LINE_Y, ST7789_WIDTH - 1, LCD_RGB_LINE_Y + LCD_LINE_HEIGHT, BLACK); // Clear line
 8003220:	4b43      	ldr	r3, [pc, #268]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	3304      	adds	r3, #4
 8003226:	b29b      	uxth	r3, r3
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	b299      	uxth	r1, r3
 800322c:	4b40      	ldr	r3, [pc, #256]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	3304      	adds	r3, #4
 8003232:	b29b      	uxth	r3, r3
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	b29b      	uxth	r3, r3
 8003238:	4a3d      	ldr	r2, [pc, #244]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 800323a:	7852      	ldrb	r2, [r2, #1]
 800323c:	4413      	add	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	2200      	movs	r2, #0
 8003242:	9200      	str	r2, [sp, #0]
 8003244:	22ef      	movs	r2, #239	@ 0xef
 8003246:	2000      	movs	r0, #0
 8003248:	f000 fcbc 	bl	8003bc4 <ST7789_Fill>
        ST7789_WriteString(5, LCD_RGB_LINE_Y, lineBuffer, Font_11x18, WHITE, BLACK);
 800324c:	4b38      	ldr	r3, [pc, #224]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	3304      	adds	r3, #4
 8003252:	b29b      	uxth	r3, r3
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	b299      	uxth	r1, r3
 8003258:	4b35      	ldr	r3, [pc, #212]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 800325a:	4638      	mov	r0, r7
 800325c:	2200      	movs	r2, #0
 800325e:	9202      	str	r2, [sp, #8]
 8003260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003264:	9201      	str	r2, [sp, #4]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	9200      	str	r2, [sp, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4602      	mov	r2, r0
 800326e:	2005      	movs	r0, #5
 8003270:	f000 fd74 	bl	8003d5c <ST7789_WriteString>
        lastDrawnR = g_latestR; lastDrawnG = g_latestG; lastDrawnB = g_latestB;
 8003274:	4b2f      	ldr	r3, [pc, #188]	@ (8003334 <capNhatManHinhLCD+0x6fc>)
 8003276:	881a      	ldrh	r2, [r3, #0]
 8003278:	4b2f      	ldr	r3, [pc, #188]	@ (8003338 <capNhatManHinhLCD+0x700>)
 800327a:	801a      	strh	r2, [r3, #0]
 800327c:	4b2f      	ldr	r3, [pc, #188]	@ (800333c <capNhatManHinhLCD+0x704>)
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	4b2f      	ldr	r3, [pc, #188]	@ (8003340 <capNhatManHinhLCD+0x708>)
 8003282:	801a      	strh	r2, [r3, #0]
 8003284:	4b2f      	ldr	r3, [pc, #188]	@ (8003344 <capNhatManHinhLCD+0x70c>)
 8003286:	881a      	ldrh	r2, [r3, #0]
 8003288:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <capNhatManHinhLCD+0x710>)
 800328a:	801a      	strh	r2, [r3, #0]
    }

     // 6. Draw Log Line
    if (logChanged) {
 800328c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003290:	2b00      	cmp	r3, #0
 8003292:	d042      	beq.n	800331a <capNhatManHinhLCD+0x6e2>
        ST7789_Fill(0, LCD_LOG_LINE_Y, ST7789_WIDTH - 1, LCD_LOG_LINE_Y + LCD_LINE_HEIGHT, BLACK); // Clear line
 8003294:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 8003296:	785b      	ldrb	r3, [r3, #1]
 8003298:	3304      	adds	r3, #4
 800329a:	b29b      	uxth	r3, r3
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4a23      	ldr	r2, [pc, #140]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 80032a2:	7852      	ldrb	r2, [r2, #1]
 80032a4:	4413      	add	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3305      	adds	r3, #5
 80032aa:	b299      	uxth	r1, r3
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	3304      	adds	r3, #4
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 80032ba:	7852      	ldrb	r2, [r2, #1]
 80032bc:	4413      	add	r3, r2
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 80032c2:	7852      	ldrb	r2, [r2, #1]
 80032c4:	4413      	add	r3, r2
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3305      	adds	r3, #5
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2200      	movs	r2, #0
 80032ce:	9200      	str	r2, [sp, #0]
 80032d0:	22ef      	movs	r2, #239	@ 0xef
 80032d2:	2000      	movs	r0, #0
 80032d4:	f000 fc76 	bl	8003bc4 <ST7789_Fill>
        ST7789_WriteString(5, LCD_LOG_LINE_Y, g_lcdLogBuffer, Font_11x18, GRAY, BLACK);
 80032d8:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 80032da:	785b      	ldrb	r3, [r3, #1]
 80032dc:	3304      	adds	r3, #4
 80032de:	b29b      	uxth	r3, r3
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 80032e6:	7852      	ldrb	r2, [r2, #1]
 80032e8:	4413      	add	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3305      	adds	r3, #5
 80032ee:	b299      	uxth	r1, r3
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <capNhatManHinhLCD+0x6f8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	9202      	str	r2, [sp, #8]
 80032f6:	f248 4230 	movw	r2, #33840	@ 0x8430
 80032fa:	9201      	str	r2, [sp, #4]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	9200      	str	r2, [sp, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a12      	ldr	r2, [pc, #72]	@ (800334c <capNhatManHinhLCD+0x714>)
 8003304:	2005      	movs	r0, #5
 8003306:	f000 fd29 	bl	8003d5c <ST7789_WriteString>
        strncpy(lastDrawnLog, g_lcdLogBuffer, LCD_LOG_BUFFER_SIZE);
 800330a:	2228      	movs	r2, #40	@ 0x28
 800330c:	490f      	ldr	r1, [pc, #60]	@ (800334c <capNhatManHinhLCD+0x714>)
 800330e:	4810      	ldr	r0, [pc, #64]	@ (8003350 <capNhatManHinhLCD+0x718>)
 8003310:	f005 fec4 	bl	800909c <strncpy>
        g_lcdLogUpdated = false; // Mark log as drawn
 8003314:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <capNhatManHinhLCD+0x71c>)
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
    }


    g_forceLcdUpdate = false; // Reset force flag after a full draw cycle checks everything
 800331a:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <capNhatManHinhLCD+0x720>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e000      	b.n	8003324 <capNhatManHinhLCD+0x6ec>
        return;
 8003322:	bf00      	nop
}
 8003324:	3738      	adds	r7, #56	@ 0x38
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	0800cae0 	.word	0x0800cae0
 8003330:	20000004 	.word	0x20000004
 8003334:	20000418 	.word	0x20000418
 8003338:	2000043a 	.word	0x2000043a
 800333c:	2000041a 	.word	0x2000041a
 8003340:	2000043c 	.word	0x2000043c
 8003344:	2000041c 	.word	0x2000041c
 8003348:	2000043e 	.word	0x2000043e
 800334c:	20000010 	.word	0x20000010
 8003350:	20000440 	.word	0x20000440
 8003354:	20000038 	.word	0x20000038
 8003358:	20000039 	.word	0x20000039

0800335c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003362:	f000 ffd7 	bl	8004314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003366:	f000 f857 	bl	8003418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800336a:	f000 f987 	bl	800367c <MX_GPIO_Init>
  MX_USART2_UART_Init(); // Optional for debug
 800336e:	f000 f951 	bl	8003614 <MX_USART2_UART_Init>
  MX_I2C1_Init();      // For TCS34725
 8003372:	f000 f8bd 	bl	80034f0 <MX_I2C1_Init>
  MX_I2C3_Init();      // For VL53L0X
 8003376:	f000 f8e9 	bl	800354c <MX_I2C3_Init>
  MX_SPI2_Init();      // For ST7789
 800337a:	f000 f915 	bl	80035a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("--- System Start ---\r\n"); // Optional UART Print
 800337e:	4821      	ldr	r0, [pc, #132]	@ (8003404 <main+0xa8>)
 8003380:	f005 fc98 	bl	8008cb4 <puts>

  khoiTaoHeThong();
 8003384:	f7ff f828 	bl	80023d8 <khoiTaoHeThong>

  uint32_t now = HAL_GetTick();
 8003388:	f001 f82a 	bl	80043e0 <HAL_GetTick>
 800338c:	6078      	str	r0, [r7, #4]
  tgDocCamBienCuoi = now;
 800338e:	4a1e      	ldr	r2, [pc, #120]	@ (8003408 <main+0xac>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6013      	str	r3, [r2, #0]
  tgXuLyNutNhanCuoi = now;
 8003394:	4a1d      	ldr	r2, [pc, #116]	@ (800340c <main+0xb0>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6013      	str	r3, [r2, #0]
  tgCapNhatLogicCuoi = now;
 800339a:	4a1d      	ldr	r2, [pc, #116]	@ (8003410 <main+0xb4>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6013      	str	r3, [r2, #0]
  tgCapNhatLCDCuoi = now;
 80033a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003414 <main+0xb8>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    now = HAL_GetTick();
 80033a6:	f001 f81b 	bl	80043e0 <HAL_GetTick>
 80033aa:	6078      	str	r0, [r7, #4]

    // --- Task Scheduling (Non-Blocking) ---

    // 1. Read Sensors Periodically
    if (now - tgDocCamBienCuoi >= SENSOR_READ_INTERVAL_MS) {
 80033ac:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <main+0xac>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b31      	cmp	r3, #49	@ 0x31
 80033b6:	d904      	bls.n	80033c2 <main+0x66>
        xuLyCamBien();
 80033b8:	f7ff f8d4 	bl	8002564 <xuLyCamBien>
        tgDocCamBienCuoi = now;
 80033bc:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <main+0xac>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
    }

    // 2. Check Buttons Periodically
    if (now - tgXuLyNutNhanCuoi >= BUTTON_CHECK_INTERVAL_MS) {
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <main+0xb0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b13      	cmp	r3, #19
 80033cc:	d902      	bls.n	80033d4 <main+0x78>
        // Processing is done inside capNhatTrangThaiVaCheDo
        tgXuLyNutNhanCuoi = now; // Just update time, actual check is below
 80033ce:	4a0f      	ldr	r2, [pc, #60]	@ (800340c <main+0xb0>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6013      	str	r3, [r2, #0]
    }

    // 3. Update State Machine Periodically
    if (now - tgCapNhatLogicCuoi >= STATE_MACHINE_INTERVAL_MS) {
 80033d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003410 <main+0xb4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b31      	cmp	r3, #49	@ 0x31
 80033de:	d904      	bls.n	80033ea <main+0x8e>
        capNhatTrangThaiVaCheDo(); // This function now also processes button inputs
 80033e0:	f7ff fa88 	bl	80028f4 <capNhatTrangThaiVaCheDo>
        tgCapNhatLogicCuoi = now;
 80033e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003410 <main+0xb4>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6013      	str	r3, [r2, #0]
    }

    // 4. Update LCD Periodically
    if (now - tgCapNhatLCDCuoi >= LCD_UPDATE_INTERVAL_MS) {
 80033ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <main+0xb8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80033f4:	d904      	bls.n	8003400 <main+0xa4>
        capNhatManHinhLCD();
 80033f6:	f7ff fc1f 	bl	8002c38 <capNhatManHinhLCD>
        tgCapNhatLCDCuoi = now;
 80033fa:	4a06      	ldr	r2, [pc, #24]	@ (8003414 <main+0xb8>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6013      	str	r3, [r2, #0]
    }

     // Small delay or yield (optional, depends on loop execution time)
     // HAL_Delay(1); // Use with caution, can introduce blocking
      __NOP(); // Prevent empty loop optimization issues
 8003400:	bf00      	nop
    now = HAL_GetTick();
 8003402:	e7d0      	b.n	80033a6 <main+0x4a>
 8003404:	0800caf8 	.word	0x0800caf8
 8003408:	20000424 	.word	0x20000424
 800340c:	20000428 	.word	0x20000428
 8003410:	2000042c 	.word	0x2000042c
 8003414:	20000430 	.word	0x20000430

08003418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b094      	sub	sp, #80	@ 0x50
 800341c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341e:	f107 0320 	add.w	r3, r7, #32
 8003422:	2230      	movs	r2, #48	@ 0x30
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f005 fe30 	bl	800908c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	4b29      	ldr	r3, [pc, #164]	@ (80034e8 <SystemClock_Config+0xd0>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	4a28      	ldr	r2, [pc, #160]	@ (80034e8 <SystemClock_Config+0xd0>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800344a:	6413      	str	r3, [r2, #64]	@ 0x40
 800344c:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <SystemClock_Config+0xd0>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	4b23      	ldr	r3, [pc, #140]	@ (80034ec <SystemClock_Config+0xd4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003464:	4a21      	ldr	r2, [pc, #132]	@ (80034ec <SystemClock_Config+0xd4>)
 8003466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	4b1f      	ldr	r3, [pc, #124]	@ (80034ec <SystemClock_Config+0xd4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003478:	2302      	movs	r3, #2
 800347a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800347c:	2301      	movs	r3, #1
 800347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003480:	2310      	movs	r3, #16
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003484:	2302      	movs	r3, #2
 8003486:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003488:	2300      	movs	r3, #0
 800348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800348c:	2310      	movs	r3, #16
 800348e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003490:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003494:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003496:	2304      	movs	r3, #4
 8003498:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800349a:	2307      	movs	r3, #7
 800349c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800349e:	f107 0320 	add.w	r3, r7, #32
 80034a2:	4618      	mov	r0, r3
 80034a4:	f002 ff26 	bl	80062f4 <HAL_RCC_OscConfig>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80034ae:	f000 f989 	bl	80037c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b2:	230f      	movs	r3, #15
 80034b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b6:	2302      	movs	r3, #2
 80034b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 f988 	bl	80067e4 <HAL_RCC_ClockConfig>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80034da:	f000 f973 	bl	80037c4 <Error_Handler>
  }
}
 80034de:	bf00      	nop
 80034e0:	3750      	adds	r7, #80	@ 0x50
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40007000 	.word	0x40007000

080034f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034f4:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <MX_I2C1_Init+0x50>)
 80034f6:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <MX_I2C1_Init+0x54>)
 80034f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000; // Standard mode for TCS34725
 80034fa:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <MX_I2C1_Init+0x50>)
 80034fc:	4a12      	ldr	r2, [pc, #72]	@ (8003548 <MX_I2C1_Init+0x58>)
 80034fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003500:	4b0f      	ldr	r3, [pc, #60]	@ (8003540 <MX_I2C1_Init+0x50>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <MX_I2C1_Init+0x50>)
 8003508:	2200      	movs	r2, #0
 800350a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <MX_I2C1_Init+0x50>)
 800350e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003512:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003514:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <MX_I2C1_Init+0x50>)
 8003516:	2200      	movs	r2, #0
 8003518:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800351a:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <MX_I2C1_Init+0x50>)
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003520:	4b07      	ldr	r3, [pc, #28]	@ (8003540 <MX_I2C1_Init+0x50>)
 8003522:	2200      	movs	r2, #0
 8003524:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003526:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <MX_I2C1_Init+0x50>)
 8003528:	2200      	movs	r2, #0
 800352a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800352c:	4804      	ldr	r0, [pc, #16]	@ (8003540 <MX_I2C1_Init+0x50>)
 800352e:	f001 fa3d 	bl	80049ac <HAL_I2C_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003538:	f000 f944 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200002c8 	.word	0x200002c8
 8003544:	40005400 	.word	0x40005400
 8003548:	000186a0 	.word	0x000186a0

0800354c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003550:	4b12      	ldr	r3, [pc, #72]	@ (800359c <MX_I2C3_Init+0x50>)
 8003552:	4a13      	ldr	r2, [pc, #76]	@ (80035a0 <MX_I2C3_Init+0x54>)
 8003554:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000; // VL53L0X also typically uses 100kHz or 400kHz
 8003556:	4b11      	ldr	r3, [pc, #68]	@ (800359c <MX_I2C3_Init+0x50>)
 8003558:	4a12      	ldr	r2, [pc, #72]	@ (80035a4 <MX_I2C3_Init+0x58>)
 800355a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800355c:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <MX_I2C3_Init+0x50>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003562:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <MX_I2C3_Init+0x50>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <MX_I2C3_Init+0x50>)
 800356a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800356e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003570:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <MX_I2C3_Init+0x50>)
 8003572:	2200      	movs	r2, #0
 8003574:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003576:	4b09      	ldr	r3, [pc, #36]	@ (800359c <MX_I2C3_Init+0x50>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800357c:	4b07      	ldr	r3, [pc, #28]	@ (800359c <MX_I2C3_Init+0x50>)
 800357e:	2200      	movs	r2, #0
 8003580:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <MX_I2C3_Init+0x50>)
 8003584:	2200      	movs	r2, #0
 8003586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003588:	4804      	ldr	r0, [pc, #16]	@ (800359c <MX_I2C3_Init+0x50>)
 800358a:	f001 fa0f 	bl	80049ac <HAL_I2C_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003594:	f000 f916 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}
 800359c:	2000031c 	.word	0x2000031c
 80035a0:	40005c00 	.word	0x40005c00
 80035a4:	000186a0 	.word	0x000186a0

080035a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035ac:	4b17      	ldr	r3, [pc, #92]	@ (800360c <MX_SPI2_Init+0x64>)
 80035ae:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <MX_SPI2_Init+0x68>)
 80035b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035b2:	4b16      	ldr	r3, [pc, #88]	@ (800360c <MX_SPI2_Init+0x64>)
 80035b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035ba:	4b14      	ldr	r3, [pc, #80]	@ (800360c <MX_SPI2_Init+0x64>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035c0:	4b12      	ldr	r3, [pc, #72]	@ (800360c <MX_SPI2_Init+0x64>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW; // Check ST7789 datasheet/library needs
 80035c6:	4b11      	ldr	r3, [pc, #68]	@ (800360c <MX_SPI2_Init+0x64>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;    // Check ST7789 datasheet/library needs
 80035cc:	4b0f      	ldr	r3, [pc, #60]	@ (800360c <MX_SPI2_Init+0x64>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035d2:	4b0e      	ldr	r3, [pc, #56]	@ (800360c <MX_SPI2_Init+0x64>)
 80035d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4; // Adjust for speed (e.g., _2, _4, _8)
 80035da:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <MX_SPI2_Init+0x64>)
 80035dc:	2208      	movs	r2, #8
 80035de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <MX_SPI2_Init+0x64>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035e6:	4b09      	ldr	r3, [pc, #36]	@ (800360c <MX_SPI2_Init+0x64>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ec:	4b07      	ldr	r3, [pc, #28]	@ (800360c <MX_SPI2_Init+0x64>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <MX_SPI2_Init+0x64>)
 80035f4:	220a      	movs	r2, #10
 80035f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035f8:	4804      	ldr	r0, [pc, #16]	@ (800360c <MX_SPI2_Init+0x64>)
 80035fa:	f003 fb13 	bl	8006c24 <HAL_SPI_Init>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003604:	f000 f8de 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000370 	.word	0x20000370
 8003610:	40003800 	.word	0x40003800

08003614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003618:	4b15      	ldr	r3, [pc, #84]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 800361a:	4a16      	ldr	r2, [pc, #88]	@ (8003674 <MX_USART2_UART_Init+0x60>)
 800361c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800361e:	4b14      	ldr	r3, [pc, #80]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 8003620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003626:	4b12      	ldr	r3, [pc, #72]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800362c:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003632:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003638:	4b0d      	ldr	r3, [pc, #52]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 800363a:	220c      	movs	r2, #12
 800363c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 8003640:	2200      	movs	r2, #0
 8003642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003644:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800364a:	4809      	ldr	r0, [pc, #36]	@ (8003670 <MX_USART2_UART_Init+0x5c>)
 800364c:	f003 fd94 	bl	8007178 <HAL_UART_Init>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003656:	f000 f8b5 	bl	80037c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
    // Enable printf via UART
    #ifdef __GNUC__
        setvbuf(stdout, NULL, _IONBF, 0);
 800365a:	4b07      	ldr	r3, [pc, #28]	@ (8003678 <MX_USART2_UART_Init+0x64>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6898      	ldr	r0, [r3, #8]
 8003660:	2300      	movs	r3, #0
 8003662:	2202      	movs	r2, #2
 8003664:	2100      	movs	r1, #0
 8003666:	f005 fb2d 	bl	8008cc4 <setvbuf>
    #endif
  /* USER CODE END USART2_Init 2 */

}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200003c8 	.word	0x200003c8
 8003674:	40004400 	.word	0x40004400
 8003678:	20000088 	.word	0x20000088

0800367c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	@ 0x28
 8003680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003682:	f107 0314 	add.w	r3, r7, #20
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	609a      	str	r2, [r3, #8]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	4b3d      	ldr	r3, [pc, #244]	@ (800378c <MX_GPIO_Init+0x110>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	4a3c      	ldr	r2, [pc, #240]	@ (800378c <MX_GPIO_Init+0x110>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a2:	4b3a      	ldr	r3, [pc, #232]	@ (800378c <MX_GPIO_Init+0x110>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE(); // Often needed even if no pins used directly
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b36      	ldr	r3, [pc, #216]	@ (800378c <MX_GPIO_Init+0x110>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	4a35      	ldr	r2, [pc, #212]	@ (800378c <MX_GPIO_Init+0x110>)
 80036b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036be:	4b33      	ldr	r3, [pc, #204]	@ (800378c <MX_GPIO_Init+0x110>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	4b2f      	ldr	r3, [pc, #188]	@ (800378c <MX_GPIO_Init+0x110>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	4a2e      	ldr	r2, [pc, #184]	@ (800378c <MX_GPIO_Init+0x110>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036da:	4b2c      	ldr	r3, [pc, #176]	@ (800378c <MX_GPIO_Init+0x110>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE(); // For SPI2 pins
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	4b28      	ldr	r3, [pc, #160]	@ (800378c <MX_GPIO_Init+0x110>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	4a27      	ldr	r2, [pc, #156]	@ (800378c <MX_GPIO_Init+0x110>)
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f6:	4b25      	ldr	r3, [pc, #148]	@ (800378c <MX_GPIO_Init+0x110>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	607b      	str	r3, [r7, #4]
 8003700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY1_PIN|RELAY2_PIN|ST7789_DC_PIN|ST7789_RST_PIN, GPIO_PIN_RESET);
 8003702:	2200      	movs	r2, #0
 8003704:	f240 1143 	movw	r1, #323	@ 0x143
 8003708:	4821      	ldr	r0, [pc, #132]	@ (8003790 <MX_GPIO_Init+0x114>)
 800370a:	f001 f91b 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // LD2 is PA5 on Nucleo-F401RE
 800370e:	2200      	movs	r2, #0
 8003710:	2120      	movs	r1, #32
 8003712:	4820      	ldr	r0, [pc, #128]	@ (8003794 <MX_GPIO_Init+0x118>)
 8003714:	f001 f916 	bl	8004944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin (PC13) - Button 1 (Mode) */
  GPIO_InitStruct.Pin = B1_Pin;
 8003718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800371c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Use GPIO_MODE_INPUT, read manually for debounce/hold
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;     // Assuming button connects pin to GND when pressed
 8003722:	2301      	movs	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	4619      	mov	r1, r3
 800372c:	4818      	ldr	r0, [pc, #96]	@ (8003790 <MX_GPIO_Init+0x114>)
 800372e:	f000 ff6d 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_PIN(PC0) RELAY2_PIN(PC1) ST7789_DC_PIN(PC6) ST7789_RST_PIN(PC8) */
  GPIO_InitStruct.Pin = RELAY1_PIN|RELAY2_PIN|ST7789_DC_PIN|ST7789_RST_PIN;
 8003732:	f240 1343 	movw	r3, #323	@ 0x143
 8003736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003738:	2301      	movs	r3, #1
 800373a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003740:	2300      	movs	r3, #0
 8003742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	4811      	ldr	r0, [pc, #68]	@ (8003790 <MX_GPIO_Init+0x114>)
 800374c:	f000 ff5e 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin (PA5) */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003750:	2320      	movs	r3, #32
 8003752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003754:	2301      	movs	r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2300      	movs	r3, #0
 800375e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	4619      	mov	r1, r3
 8003766:	480b      	ldr	r0, [pc, #44]	@ (8003794 <MX_GPIO_Init+0x118>)
 8003768:	f000 ff50 	bl	800460c <HAL_GPIO_Init>

  /* Configure GPIO pins : PA0 PA1 - Button 2 & 3 (Manual Control) */
  GPIO_InitStruct.Pin = BUTTON2_MANR1_PIN|BUTTON3_MANR2_PIN;
 800376c:	2303      	movs	r3, #3
 800376e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP; // Assuming buttons connect pins to GND when pressed
 8003774:	2301      	movs	r3, #1
 8003776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4619      	mov	r1, r3
 800377e:	4805      	ldr	r0, [pc, #20]	@ (8003794 <MX_GPIO_Init+0x118>)
 8003780:	f000 ff44 	bl	800460c <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003784:	bf00      	nop
 8003786:	3728      	adds	r7, #40	@ 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40023800 	.word	0x40023800
 8003790:	40020800 	.word	0x40020800
 8003794:	40020000 	.word	0x40020000

08003798 <_write>:
// but most are already defined above.

// Override _write for printf redirection to UART2
#ifdef __GNUC__
int _write(int file, char *ptr, int len)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
    (void)file; // Prevent unused warning
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	4804      	ldr	r0, [pc, #16]	@ (80037c0 <_write+0x28>)
 80037b0:	f003 fd32 	bl	8007218 <HAL_UART_Transmit>
    return len;
 80037b4:	687b      	ldr	r3, [r7, #4]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	200003c8 	.word	0x200003c8

080037c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037c8:	b672      	cpsid	i
}
 80037ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  logToLCD("!!! SYSTEM HALTED !!!"); // Log error to LCD if possible
 80037cc:	4809      	ldr	r0, [pc, #36]	@ (80037f4 <Error_Handler+0x30>)
 80037ce:	f7fe fc75 	bl	80020bc <logToLCD>
  printf("!!! SYSTEM HALTED - Error_Handler() called !!!\r\n");
 80037d2:	4809      	ldr	r0, [pc, #36]	@ (80037f8 <Error_Handler+0x34>)
 80037d4:	f005 fa6e 	bl	8008cb4 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Turn on LD2
 80037d8:	2201      	movs	r2, #1
 80037da:	2120      	movs	r1, #32
 80037dc:	4807      	ldr	r0, [pc, #28]	@ (80037fc <Error_Handler+0x38>)
 80037de:	f001 f8b1 	bl	8004944 <HAL_GPIO_WritePin>
  while (1)
  {
      // Blink LD2 rapidly to indicate hard fault
       HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80037e2:	2120      	movs	r1, #32
 80037e4:	4805      	ldr	r0, [pc, #20]	@ (80037fc <Error_Handler+0x38>)
 80037e6:	f001 f8c6 	bl	8004976 <HAL_GPIO_TogglePin>
       HAL_Delay(100);
 80037ea:	2064      	movs	r0, #100	@ 0x64
 80037ec:	f000 fe04 	bl	80043f8 <HAL_Delay>
       HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80037f0:	bf00      	nop
 80037f2:	e7f6      	b.n	80037e2 <Error_Handler+0x1e>
 80037f4:	0800cb10 	.word	0x0800cb10
 80037f8:	0800cb28 	.word	0x0800cb28
 80037fc:	40020000 	.word	0x40020000

08003800 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800380a:	2200      	movs	r2, #0
 800380c:	2120      	movs	r1, #32
 800380e:	480c      	ldr	r0, [pc, #48]	@ (8003840 <ST7789_WriteCommand+0x40>)
 8003810:	f001 f898 	bl	8004944 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8003814:	2200      	movs	r2, #0
 8003816:	2140      	movs	r1, #64	@ 0x40
 8003818:	4809      	ldr	r0, [pc, #36]	@ (8003840 <ST7789_WriteCommand+0x40>)
 800381a:	f001 f893 	bl	8004944 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800381e:	1df9      	adds	r1, r7, #7
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	2201      	movs	r2, #1
 8003826:	4807      	ldr	r0, [pc, #28]	@ (8003844 <ST7789_WriteCommand+0x44>)
 8003828:	f003 fa85 	bl	8006d36 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800382c:	2201      	movs	r2, #1
 800382e:	2120      	movs	r1, #32
 8003830:	4803      	ldr	r0, [pc, #12]	@ (8003840 <ST7789_WriteCommand+0x40>)
 8003832:	f001 f887 	bl	8004944 <HAL_GPIO_WritePin>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40020800 	.word	0x40020800
 8003844:	20000370 	.word	0x20000370

08003848 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 8003852:	2200      	movs	r2, #0
 8003854:	2120      	movs	r1, #32
 8003856:	4815      	ldr	r0, [pc, #84]	@ (80038ac <ST7789_WriteData+0x64>)
 8003858:	f001 f874 	bl	8004944 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800385c:	2201      	movs	r2, #1
 800385e:	2140      	movs	r1, #64	@ 0x40
 8003860:	4812      	ldr	r0, [pc, #72]	@ (80038ac <ST7789_WriteData+0x64>)
 8003862:	f001 f86f 	bl	8004944 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8003866:	e015      	b.n	8003894 <ST7789_WriteData+0x4c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800386e:	4293      	cmp	r3, r2
 8003870:	bf28      	it	cs
 8003872:	4613      	movcs	r3, r2
 8003874:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8003876:	89fa      	ldrh	r2, [r7, #14]
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	480c      	ldr	r0, [pc, #48]	@ (80038b0 <ST7789_WriteData+0x68>)
 8003880:	f003 fa59 	bl	8006d36 <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8003884:	89fb      	ldrh	r3, [r7, #14]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800388c:	89fb      	ldrh	r3, [r7, #14]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e6      	bne.n	8003868 <ST7789_WriteData+0x20>
	}

	ST7789_UnSelect();
 800389a:	2201      	movs	r2, #1
 800389c:	2120      	movs	r1, #32
 800389e:	4803      	ldr	r0, [pc, #12]	@ (80038ac <ST7789_WriteData+0x64>)
 80038a0:	f001 f850 	bl	8004944 <HAL_GPIO_WritePin>
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40020800 	.word	0x40020800
 80038b0:	20000370 	.word	0x20000370

080038b4 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80038be:	2200      	movs	r2, #0
 80038c0:	2120      	movs	r1, #32
 80038c2:	480c      	ldr	r0, [pc, #48]	@ (80038f4 <ST7789_WriteSmallData+0x40>)
 80038c4:	f001 f83e 	bl	8004944 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80038c8:	2201      	movs	r2, #1
 80038ca:	2140      	movs	r1, #64	@ 0x40
 80038cc:	4809      	ldr	r0, [pc, #36]	@ (80038f4 <ST7789_WriteSmallData+0x40>)
 80038ce:	f001 f839 	bl	8004944 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80038d2:	1df9      	adds	r1, r7, #7
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295
 80038d8:	2201      	movs	r2, #1
 80038da:	4807      	ldr	r0, [pc, #28]	@ (80038f8 <ST7789_WriteSmallData+0x44>)
 80038dc:	f003 fa2b 	bl	8006d36 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80038e0:	2201      	movs	r2, #1
 80038e2:	2120      	movs	r1, #32
 80038e4:	4803      	ldr	r0, [pc, #12]	@ (80038f4 <ST7789_WriteSmallData+0x40>)
 80038e6:	f001 f82d 	bl	8004944 <HAL_GPIO_WritePin>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40020800 	.word	0x40020800
 80038f8:	20000370 	.word	0x20000370

080038fc <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003906:	2036      	movs	r0, #54	@ 0x36
 8003908:	f7ff ff7a 	bl	8003800 <ST7789_WriteCommand>
	switch (m) {
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d81a      	bhi.n	8003948 <ST7789_SetRotation+0x4c>
 8003912:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <ST7789_SetRotation+0x1c>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003929 	.word	0x08003929
 800391c:	08003931 	.word	0x08003931
 8003920:	08003939 	.word	0x08003939
 8003924:	08003941 	.word	0x08003941
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003928:	20c0      	movs	r0, #192	@ 0xc0
 800392a:	f7ff ffc3 	bl	80038b4 <ST7789_WriteSmallData>
		break;
 800392e:	e00c      	b.n	800394a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003930:	20a0      	movs	r0, #160	@ 0xa0
 8003932:	f7ff ffbf 	bl	80038b4 <ST7789_WriteSmallData>
		break;
 8003936:	e008      	b.n	800394a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003938:	2000      	movs	r0, #0
 800393a:	f7ff ffbb 	bl	80038b4 <ST7789_WriteSmallData>
		break;
 800393e:	e004      	b.n	800394a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003940:	2060      	movs	r0, #96	@ 0x60
 8003942:	f7ff ffb7 	bl	80038b4 <ST7789_WriteSmallData>
		break;
 8003946:	e000      	b.n	800394a <ST7789_SetRotation+0x4e>
	default:
		break;
 8003948:	bf00      	nop
	}
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop

08003954 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4623      	mov	r3, r4
 8003964:	80fb      	strh	r3, [r7, #6]
 8003966:	4603      	mov	r3, r0
 8003968:	80bb      	strh	r3, [r7, #4]
 800396a:	460b      	mov	r3, r1
 800396c:	807b      	strh	r3, [r7, #2]
 800396e:	4613      	mov	r3, r2
 8003970:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8003972:	2200      	movs	r2, #0
 8003974:	2120      	movs	r1, #32
 8003976:	4824      	ldr	r0, [pc, #144]	@ (8003a08 <ST7789_SetAddressWindow+0xb4>)
 8003978:	f000 ffe4 	bl	8004944 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	82fb      	strh	r3, [r7, #22]
 8003980:	887b      	ldrh	r3, [r7, #2]
 8003982:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003984:	88bb      	ldrh	r3, [r7, #4]
 8003986:	827b      	strh	r3, [r7, #18]
 8003988:	883b      	ldrh	r3, [r7, #0]
 800398a:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 800398c:	202a      	movs	r0, #42	@ 0x2a
 800398e:	f7ff ff37 	bl	8003800 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003992:	8afb      	ldrh	r3, [r7, #22]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	b29b      	uxth	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	733b      	strb	r3, [r7, #12]
 800399c:	8afb      	ldrh	r3, [r7, #22]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	737b      	strb	r3, [r7, #13]
 80039a2:	8abb      	ldrh	r3, [r7, #20]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	73bb      	strb	r3, [r7, #14]
 80039ac:	8abb      	ldrh	r3, [r7, #20]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 80039b2:	f107 030c 	add.w	r3, r7, #12
 80039b6:	2104      	movs	r1, #4
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff45 	bl	8003848 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 80039be:	202b      	movs	r0, #43	@ 0x2b
 80039c0:	f7ff ff1e 	bl	8003800 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 80039c4:	8a7b      	ldrh	r3, [r7, #18]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	723b      	strb	r3, [r7, #8]
 80039ce:	8a7b      	ldrh	r3, [r7, #18]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	727b      	strb	r3, [r7, #9]
 80039d4:	8a3b      	ldrh	r3, [r7, #16]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	72bb      	strb	r3, [r7, #10]
 80039de:	8a3b      	ldrh	r3, [r7, #16]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	2104      	movs	r1, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff2c 	bl	8003848 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80039f0:	202c      	movs	r0, #44	@ 0x2c
 80039f2:	f7ff ff05 	bl	8003800 <ST7789_WriteCommand>
	ST7789_UnSelect();
 80039f6:	2201      	movs	r2, #1
 80039f8:	2120      	movs	r1, #32
 80039fa:	4803      	ldr	r0, [pc, #12]	@ (8003a08 <ST7789_SetAddressWindow+0xb4>)
 80039fc:	f000 ffa2 	bl	8004944 <HAL_GPIO_WritePin>
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd90      	pop	{r4, r7, pc}
 8003a08:	40020800 	.word	0x40020800

08003a0c <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b08b      	sub	sp, #44	@ 0x2c
 8003a10:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(10);
 8003a12:	200a      	movs	r0, #10
 8003a14:	f000 fcf0 	bl	80043f8 <HAL_Delay>
    ST7789_RST_Clr();
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a1e:	4847      	ldr	r0, [pc, #284]	@ (8003b3c <ST7789_Init+0x130>)
 8003a20:	f000 ff90 	bl	8004944 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003a24:	200a      	movs	r0, #10
 8003a26:	f000 fce7 	bl	80043f8 <HAL_Delay>
    ST7789_RST_Set();
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a30:	4842      	ldr	r0, [pc, #264]	@ (8003b3c <ST7789_Init+0x130>)
 8003a32:	f000 ff87 	bl	8004944 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8003a36:	2014      	movs	r0, #20
 8003a38:	f000 fcde 	bl	80043f8 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003a3c:	203a      	movs	r0, #58	@ 0x3a
 8003a3e:	f7ff fedf 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8003a42:	2055      	movs	r0, #85	@ 0x55
 8003a44:	f7ff ff36 	bl	80038b4 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003a48:	20b2      	movs	r0, #178	@ 0xb2
 8003a4a:	f7ff fed9 	bl	8003800 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003a4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b40 <ST7789_Init+0x134>)
 8003a50:	f107 0320 	add.w	r3, r7, #32
 8003a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a58:	6018      	str	r0, [r3, #0]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003a5e:	f107 0320 	add.w	r3, r7, #32
 8003a62:	2105      	movs	r1, #5
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff feef 	bl	8003848 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003a6a:	2002      	movs	r0, #2
 8003a6c:	f7ff ff46 	bl	80038fc <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8003a70:	20b7      	movs	r0, #183	@ 0xb7
 8003a72:	f7ff fec5 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8003a76:	2035      	movs	r0, #53	@ 0x35
 8003a78:	f7ff ff1c 	bl	80038b4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003a7c:	20bb      	movs	r0, #187	@ 0xbb
 8003a7e:	f7ff febf 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8003a82:	2019      	movs	r0, #25
 8003a84:	f7ff ff16 	bl	80038b4 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 8003a88:	20c0      	movs	r0, #192	@ 0xc0
 8003a8a:	f7ff feb9 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8003a8e:	202c      	movs	r0, #44	@ 0x2c
 8003a90:	f7ff ff10 	bl	80038b4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8003a94:	20c2      	movs	r0, #194	@ 0xc2
 8003a96:	f7ff feb3 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f7ff ff0a 	bl	80038b4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8003aa0:	20c3      	movs	r0, #195	@ 0xc3
 8003aa2:	f7ff fead 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003aa6:	2012      	movs	r0, #18
 8003aa8:	f7ff ff04 	bl	80038b4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8003aac:	20c4      	movs	r0, #196	@ 0xc4
 8003aae:	f7ff fea7 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8003ab2:	2020      	movs	r0, #32
 8003ab4:	f7ff fefe 	bl	80038b4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8003ab8:	20c6      	movs	r0, #198	@ 0xc6
 8003aba:	f7ff fea1 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8003abe:	200f      	movs	r0, #15
 8003ac0:	f7ff fef8 	bl	80038b4 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8003ac4:	20d0      	movs	r0, #208	@ 0xd0
 8003ac6:	f7ff fe9b 	bl	8003800 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8003aca:	20a4      	movs	r0, #164	@ 0xa4
 8003acc:	f7ff fef2 	bl	80038b4 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8003ad0:	20a1      	movs	r0, #161	@ 0xa1
 8003ad2:	f7ff feef 	bl	80038b4 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8003ad6:	20e0      	movs	r0, #224	@ 0xe0
 8003ad8:	f7ff fe92 	bl	8003800 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8003adc:	4b19      	ldr	r3, [pc, #100]	@ (8003b44 <ST7789_Init+0x138>)
 8003ade:	f107 0410 	add.w	r4, r7, #16
 8003ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ae4:	c407      	stmia	r4!, {r0, r1, r2}
 8003ae6:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003ae8:	f107 0310 	add.w	r3, r7, #16
 8003aec:	210e      	movs	r1, #14
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff feaa 	bl	8003848 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8003af4:	20e1      	movs	r0, #225	@ 0xe1
 8003af6:	f7ff fe83 	bl	8003800 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8003afa:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <ST7789_Init+0x13c>)
 8003afc:	463c      	mov	r4, r7
 8003afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b00:	c407      	stmia	r4!, {r0, r1, r2}
 8003b02:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003b04:	463b      	mov	r3, r7
 8003b06:	210e      	movs	r1, #14
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fe9d 	bl	8003848 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8003b0e:	2021      	movs	r0, #33	@ 0x21
 8003b10:	f7ff fe76 	bl	8003800 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8003b14:	2011      	movs	r0, #17
 8003b16:	f7ff fe73 	bl	8003800 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8003b1a:	2013      	movs	r0, #19
 8003b1c:	f7ff fe70 	bl	8003800 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8003b20:	2029      	movs	r0, #41	@ 0x29
 8003b22:	f7ff fe6d 	bl	8003800 <ST7789_WriteCommand>

	HAL_Delay(50);
 8003b26:	2032      	movs	r0, #50	@ 0x32
 8003b28:	f000 fc66 	bl	80043f8 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f000 f80d 	bl	8003b4c <ST7789_Fill_Color>
}
 8003b32:	bf00      	nop
 8003b34:	372c      	adds	r7, #44	@ 0x2c
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd90      	pop	{r4, r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	0800cb58 	.word	0x0800cb58
 8003b44:	0800cb60 	.word	0x0800cb60
 8003b48:	0800cb70 	.word	0x0800cb70

08003b4c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8003b56:	23ef      	movs	r3, #239	@ 0xef
 8003b58:	22ef      	movs	r2, #239	@ 0xef
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7ff fef9 	bl	8003954 <ST7789_SetAddressWindow>
	ST7789_Select();
 8003b62:	2200      	movs	r2, #0
 8003b64:	2120      	movs	r1, #32
 8003b66:	4816      	ldr	r0, [pc, #88]	@ (8003bc0 <ST7789_Fill_Color+0x74>)
 8003b68:	f000 feec 	bl	8004944 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	81fb      	strh	r3, [r7, #14]
 8003b70:	e019      	b.n	8003ba6 <ST7789_Fill_Color+0x5a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8003b72:	2300      	movs	r3, #0
 8003b74:	81bb      	strh	r3, [r7, #12]
 8003b76:	e010      	b.n	8003b9a <ST7789_Fill_Color+0x4e>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	723b      	strb	r3, [r7, #8]
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8003b88:	f107 0308 	add.w	r3, r7, #8
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fe5a 	bl	8003848 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8003b94:	89bb      	ldrh	r3, [r7, #12]
 8003b96:	3301      	adds	r3, #1
 8003b98:	81bb      	strh	r3, [r7, #12]
 8003b9a:	89bb      	ldrh	r3, [r7, #12]
 8003b9c:	2bef      	cmp	r3, #239	@ 0xef
 8003b9e:	d9eb      	bls.n	8003b78 <ST7789_Fill_Color+0x2c>
		for (i = 0; i < ST7789_WIDTH; i++)
 8003ba0:	89fb      	ldrh	r3, [r7, #14]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	81fb      	strh	r3, [r7, #14]
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	2bef      	cmp	r3, #239	@ 0xef
 8003baa:	d9e2      	bls.n	8003b72 <ST7789_Fill_Color+0x26>
				}
	#endif
	ST7789_UnSelect();
 8003bac:	2201      	movs	r2, #1
 8003bae:	2120      	movs	r1, #32
 8003bb0:	4803      	ldr	r0, [pc, #12]	@ (8003bc0 <ST7789_Fill_Color+0x74>)
 8003bb2:	f000 fec7 	bl	8004944 <HAL_GPIO_WritePin>
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40020800 	.word	0x40020800

08003bc4 <ST7789_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	80fb      	strh	r3, [r7, #6]
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80bb      	strh	r3, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	807b      	strh	r3, [r7, #2]
 8003bde:	4613      	mov	r3, r2
 8003be0:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	2bef      	cmp	r3, #239	@ 0xef
 8003be6:	d835      	bhi.n	8003c54 <ST7789_Fill+0x90>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003be8:	883b      	ldrh	r3, [r7, #0]
 8003bea:	2bef      	cmp	r3, #239	@ 0xef
 8003bec:	d832      	bhi.n	8003c54 <ST7789_Fill+0x90>
	ST7789_Select();
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	481a      	ldr	r0, [pc, #104]	@ (8003c5c <ST7789_Fill+0x98>)
 8003bf4:	f000 fea6 	bl	8004944 <HAL_GPIO_WritePin>
	uint16_t i, j;
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8003bf8:	883b      	ldrh	r3, [r7, #0]
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	88b9      	ldrh	r1, [r7, #4]
 8003bfe:	88f8      	ldrh	r0, [r7, #6]
 8003c00:	f7ff fea8 	bl	8003954 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++)
 8003c04:	88bb      	ldrh	r3, [r7, #4]
 8003c06:	81fb      	strh	r3, [r7, #14]
 8003c08:	e01a      	b.n	8003c40 <ST7789_Fill+0x7c>
		for (j = xSta; j <= xEnd; j++) {
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	81bb      	strh	r3, [r7, #12]
 8003c0e:	e010      	b.n	8003c32 <ST7789_Fill+0x6e>
			uint8_t data[] = {color >> 8, color & 0xFF};
 8003c10:	8c3b      	ldrh	r3, [r7, #32]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	723b      	strb	r3, [r7, #8]
 8003c1a:	8c3b      	ldrh	r3, [r7, #32]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 8003c20:	f107 0308 	add.w	r3, r7, #8
 8003c24:	2102      	movs	r1, #2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fe0e 	bl	8003848 <ST7789_WriteData>
		for (j = xSta; j <= xEnd; j++) {
 8003c2c:	89bb      	ldrh	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	81bb      	strh	r3, [r7, #12]
 8003c32:	89ba      	ldrh	r2, [r7, #12]
 8003c34:	887b      	ldrh	r3, [r7, #2]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d9ea      	bls.n	8003c10 <ST7789_Fill+0x4c>
	for (i = ySta; i <= yEnd; i++)
 8003c3a:	89fb      	ldrh	r3, [r7, #14]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	81fb      	strh	r3, [r7, #14]
 8003c40:	89fa      	ldrh	r2, [r7, #14]
 8003c42:	883b      	ldrh	r3, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d9e0      	bls.n	8003c0a <ST7789_Fill+0x46>
		}
	ST7789_UnSelect();
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2120      	movs	r1, #32
 8003c4c:	4803      	ldr	r0, [pc, #12]	@ (8003c5c <ST7789_Fill+0x98>)
 8003c4e:	f000 fe79 	bl	8004944 <HAL_GPIO_WritePin>
 8003c52:	e000      	b.n	8003c56 <ST7789_Fill+0x92>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003c54:	bf00      	nop
}
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}
 8003c5c:	40020800 	.word	0x40020800

08003c60 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003c60:	b082      	sub	sp, #8
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b088      	sub	sp, #32
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	80fb      	strh	r3, [r7, #6]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	80bb      	strh	r3, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8003c76:	2200      	movs	r2, #0
 8003c78:	2120      	movs	r1, #32
 8003c7a:	4837      	ldr	r0, [pc, #220]	@ (8003d58 <ST7789_WriteChar+0xf8>)
 8003c7c:	f000 fe62 	bl	8004944 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8003c80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c84:	461a      	mov	r2, r3
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	4413      	add	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003c94:	4619      	mov	r1, r3
 8003c96:	88bb      	ldrh	r3, [r7, #4]
 8003c98:	440b      	add	r3, r1
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	88b9      	ldrh	r1, [r7, #4]
 8003ca2:	88f8      	ldrh	r0, [r7, #6]
 8003ca4:	f7ff fe56 	bl	8003954 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	e041      	b.n	8003d32 <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8003cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	3b20      	subs	r3, #32
 8003cb4:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	440b      	add	r3, r1
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e027      	b.n	8003d20 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00e      	beq.n	8003cfe <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8003ce0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	743b      	strb	r3, [r7, #16]
 8003cea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8003cf0:	f107 0310 	add.w	r3, r7, #16
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fda6 	bl	8003848 <ST7789_WriteData>
 8003cfc:	e00d      	b.n	8003d1a <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8003cfe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	733b      	strb	r3, [r7, #12]
 8003d08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	2102      	movs	r1, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fd97 	bl	8003848 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003d24:	461a      	mov	r2, r3
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d3d1      	bcc.n	8003cd0 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003d36:	461a      	mov	r2, r3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d3b7      	bcc.n	8003cae <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2120      	movs	r1, #32
 8003d42:	4805      	ldr	r0, [pc, #20]	@ (8003d58 <ST7789_WriteChar+0xf8>)
 8003d44:	f000 fdfe 	bl	8004944 <HAL_GPIO_WritePin>
}
 8003d48:	bf00      	nop
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d52:	b002      	add	sp, #8
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40020800 	.word	0x40020800

08003d5c <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b086      	sub	sp, #24
 8003d62:	af04      	add	r7, sp, #16
 8003d64:	603a      	str	r2, [r7, #0]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	4603      	mov	r3, r0
 8003d6a:	80fb      	strh	r3, [r7, #6]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8003d70:	2200      	movs	r2, #0
 8003d72:	2120      	movs	r1, #32
 8003d74:	4821      	ldr	r0, [pc, #132]	@ (8003dfc <ST7789_WriteString+0xa0>)
 8003d76:	f000 fde5 	bl	8004944 <HAL_GPIO_WritePin>
	while (*str) {
 8003d7a:	e02d      	b.n	8003dd8 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	7d3a      	ldrb	r2, [r7, #20]
 8003d80:	4413      	add	r3, r2
 8003d82:	2bef      	cmp	r3, #239	@ 0xef
 8003d84:	dd13      	ble.n	8003dae <ST7789_WriteString+0x52>
			x = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003d8a:	7d7b      	ldrb	r3, [r7, #21]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	88bb      	ldrh	r3, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8003d94:	88bb      	ldrh	r3, [r7, #4]
 8003d96:	7d7a      	ldrb	r2, [r7, #21]
 8003d98:	4413      	add	r3, r2
 8003d9a:	2bef      	cmp	r3, #239	@ 0xef
 8003d9c:	dc21      	bgt.n	8003de2 <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d103      	bne.n	8003dae <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	603b      	str	r3, [r7, #0]
				continue;
 8003dac:	e014      	b.n	8003dd8 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	88b9      	ldrh	r1, [r7, #4]
 8003db4:	88f8      	ldrh	r0, [r7, #6]
 8003db6:	8c3b      	ldrh	r3, [r7, #32]
 8003db8:	9302      	str	r3, [sp, #8]
 8003dba:	8bbb      	ldrh	r3, [r7, #28]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f7ff ff4c 	bl	8003c60 <ST7789_WriteChar>
		x += font.width;
 8003dc8:	7d3b      	ldrb	r3, [r7, #20]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	4413      	add	r3, r2
 8003dd0:	80fb      	strh	r3, [r7, #6]
		str++;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	603b      	str	r3, [r7, #0]
	while (*str) {
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1cd      	bne.n	8003d7c <ST7789_WriteString+0x20>
 8003de0:	e000      	b.n	8003de4 <ST7789_WriteString+0x88>
				break;
 8003de2:	bf00      	nop
	}
	ST7789_UnSelect();
 8003de4:	2201      	movs	r2, #1
 8003de6:	2120      	movs	r1, #32
 8003de8:	4804      	ldr	r0, [pc, #16]	@ (8003dfc <ST7789_WriteString+0xa0>)
 8003dea:	f000 fdab 	bl	8004944 <HAL_GPIO_WritePin>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003df8:	b002      	add	sp, #8
 8003dfa:	4770      	bx	lr
 8003dfc:	40020800 	.word	0x40020800

08003e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	4b12      	ldr	r3, [pc, #72]	@ (8003e54 <HAL_MspInit+0x54>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	4a11      	ldr	r2, [pc, #68]	@ (8003e54 <HAL_MspInit+0x54>)
 8003e10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e16:	4b0f      	ldr	r3, [pc, #60]	@ (8003e54 <HAL_MspInit+0x54>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <HAL_MspInit+0x54>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e54 <HAL_MspInit+0x54>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e32:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <HAL_MspInit+0x54>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	210f      	movs	r1, #15
 8003e42:	f06f 0001 	mvn.w	r0, #1
 8003e46:	f000 fbb8 	bl	80045ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e60:	f107 031c 	add.w	r3, r7, #28
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a42      	ldr	r2, [pc, #264]	@ (8003f80 <HAL_I2C_MspInit+0x128>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d12c      	bne.n	8003ed4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	4b41      	ldr	r3, [pc, #260]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a40      	ldr	r2, [pc, #256]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e96:	23c0      	movs	r3, #192	@ 0xc0
 8003e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e9a:	2312      	movs	r3, #18
 8003e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eaa:	f107 031c 	add.w	r3, r7, #28
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4835      	ldr	r0, [pc, #212]	@ (8003f88 <HAL_I2C_MspInit+0x130>)
 8003eb2:	f000 fbab 	bl	800460c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	4b32      	ldr	r3, [pc, #200]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a31      	ldr	r2, [pc, #196]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003ec0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003ed2:	e050      	b.n	8003f76 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8003f8c <HAL_I2C_MspInit+0x134>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d14b      	bne.n	8003f76 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	4b28      	ldr	r3, [pc, #160]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	4a27      	ldr	r2, [pc, #156]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eee:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	4a20      	ldr	r2, [pc, #128]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f1c:	2312      	movs	r3, #18
 8003f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f20:	2301      	movs	r3, #1
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f24:	2303      	movs	r3, #3
 8003f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f28:	2304      	movs	r3, #4
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f2c:	f107 031c 	add.w	r3, r7, #28
 8003f30:	4619      	mov	r1, r3
 8003f32:	4817      	ldr	r0, [pc, #92]	@ (8003f90 <HAL_I2C_MspInit+0x138>)
 8003f34:	f000 fb6a 	bl	800460c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f3e:	2312      	movs	r3, #18
 8003f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f42:	2301      	movs	r3, #1
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f46:	2303      	movs	r3, #3
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4e:	f107 031c 	add.w	r3, r7, #28
 8003f52:	4619      	mov	r1, r3
 8003f54:	480f      	ldr	r0, [pc, #60]	@ (8003f94 <HAL_I2C_MspInit+0x13c>)
 8003f56:	f000 fb59 	bl	800460c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	4a08      	ldr	r2, [pc, #32]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003f64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_I2C_MspInit+0x12c>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
}
 8003f76:	bf00      	nop
 8003f78:	3730      	adds	r7, #48	@ 0x30
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40005400 	.word	0x40005400
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40020400 	.word	0x40020400
 8003f8c:	40005c00 	.word	0x40005c00
 8003f90:	40020800 	.word	0x40020800
 8003f94:	40020000 	.word	0x40020000

08003f98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a28      	ldr	r2, [pc, #160]	@ (8004058 <HAL_SPI_MspInit+0xc0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d14a      	bne.n	8004050 <HAL_SPI_MspInit+0xb8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	4b27      	ldr	r3, [pc, #156]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	4a26      	ldr	r2, [pc, #152]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8003fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fca:	4b24      	ldr	r3, [pc, #144]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b20      	ldr	r3, [pc, #128]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	4a1f      	ldr	r2, [pc, #124]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b19      	ldr	r3, [pc, #100]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	4a18      	ldr	r2, [pc, #96]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	6313      	str	r3, [r2, #48]	@ 0x30
 8004002:	4b16      	ldr	r3, [pc, #88]	@ (800405c <HAL_SPI_MspInit+0xc4>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800400e:	230c      	movs	r3, #12
 8004010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401a:	2303      	movs	r3, #3
 800401c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800401e:	2305      	movs	r3, #5
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	4619      	mov	r1, r3
 8004028:	480d      	ldr	r0, [pc, #52]	@ (8004060 <HAL_SPI_MspInit+0xc8>)
 800402a:	f000 faef 	bl	800460c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800402e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403c:	2303      	movs	r3, #3
 800403e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004040:	2305      	movs	r3, #5
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	4619      	mov	r1, r3
 800404a:	4806      	ldr	r0, [pc, #24]	@ (8004064 <HAL_SPI_MspInit+0xcc>)
 800404c:	f000 fade 	bl	800460c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004050:	bf00      	nop
 8004052:	3728      	adds	r7, #40	@ 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40003800 	.word	0x40003800
 800405c:	40023800 	.word	0x40023800
 8004060:	40020800 	.word	0x40020800
 8004064:	40020400 	.word	0x40020400

08004068 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	@ 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <HAL_UART_MspInit+0x84>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d12b      	bne.n	80040e2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	4b18      	ldr	r3, [pc, #96]	@ (80040f0 <HAL_UART_MspInit+0x88>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	4a17      	ldr	r2, [pc, #92]	@ (80040f0 <HAL_UART_MspInit+0x88>)
 8004094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004098:	6413      	str	r3, [r2, #64]	@ 0x40
 800409a:	4b15      	ldr	r3, [pc, #84]	@ (80040f0 <HAL_UART_MspInit+0x88>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a2:	613b      	str	r3, [r7, #16]
 80040a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <HAL_UART_MspInit+0x88>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	4a10      	ldr	r2, [pc, #64]	@ (80040f0 <HAL_UART_MspInit+0x88>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b6:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <HAL_UART_MspInit+0x88>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040c2:	230c      	movs	r3, #12
 80040c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ce:	2300      	movs	r3, #0
 80040d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040d2:	2307      	movs	r3, #7
 80040d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d6:	f107 0314 	add.w	r3, r7, #20
 80040da:	4619      	mov	r1, r3
 80040dc:	4805      	ldr	r0, [pc, #20]	@ (80040f4 <HAL_UART_MspInit+0x8c>)
 80040de:	f000 fa95 	bl	800460c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80040e2:	bf00      	nop
 80040e4:	3728      	adds	r7, #40	@ 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40004400 	.word	0x40004400
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40020000 	.word	0x40020000

080040f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <NMI_Handler+0x4>

08004100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <HardFault_Handler+0x4>

08004108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <MemManage_Handler+0x4>

08004110 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <BusFault_Handler+0x4>

08004118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <UsageFault_Handler+0x4>

08004120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004132:	f000 f941 	bl	80043b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004136:	f003 fdb1 	bl	8007c9c <xTaskGetSchedulerState>
 800413a:	4603      	mov	r3, r0
 800413c:	2b01      	cmp	r3, #1
 800413e:	d001      	beq.n	8004144 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004140:	f003 fe1a 	bl	8007d78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}

08004148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return 1;
 800414c:	2301      	movs	r3, #1
}
 800414e:	4618      	mov	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_kill>:

int _kill(int pid, int sig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004162:	f004 fff9 	bl	8009158 <__errno>
 8004166:	4603      	mov	r3, r0
 8004168:	2216      	movs	r2, #22
 800416a:	601a      	str	r2, [r3, #0]
  return -1;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_exit>:

void _exit (int status)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004180:	f04f 31ff 	mov.w	r1, #4294967295
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ffe7 	bl	8004158 <_kill>
  while (1) {}    /* Make sure we hang here */
 800418a:	bf00      	nop
 800418c:	e7fd      	b.n	800418a <_exit+0x12>

0800418e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e00a      	b.n	80041b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041a0:	f3af 8000 	nop.w
 80041a4:	4601      	mov	r1, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	60ba      	str	r2, [r7, #8]
 80041ac:	b2ca      	uxtb	r2, r1
 80041ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3301      	adds	r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	dbf0      	blt.n	80041a0 <_read+0x12>
  }

  return len;
 80041be:	687b      	ldr	r3, [r7, #4]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041f0:	605a      	str	r2, [r3, #4]
  return 0;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <_isatty>:

int _isatty(int file)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004208:	2301      	movs	r3, #1
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004238:	4a14      	ldr	r2, [pc, #80]	@ (800428c <_sbrk+0x5c>)
 800423a:	4b15      	ldr	r3, [pc, #84]	@ (8004290 <_sbrk+0x60>)
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004244:	4b13      	ldr	r3, [pc, #76]	@ (8004294 <_sbrk+0x64>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800424c:	4b11      	ldr	r3, [pc, #68]	@ (8004294 <_sbrk+0x64>)
 800424e:	4a12      	ldr	r2, [pc, #72]	@ (8004298 <_sbrk+0x68>)
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004252:	4b10      	ldr	r3, [pc, #64]	@ (8004294 <_sbrk+0x64>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	429a      	cmp	r2, r3
 800425e:	d207      	bcs.n	8004270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004260:	f004 ff7a 	bl	8009158 <__errno>
 8004264:	4603      	mov	r3, r0
 8004266:	220c      	movs	r2, #12
 8004268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	e009      	b.n	8004284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004270:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <_sbrk+0x64>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004276:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <_sbrk+0x64>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	4a05      	ldr	r2, [pc, #20]	@ (8004294 <_sbrk+0x64>)
 8004280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20018000 	.word	0x20018000
 8004290:	00000400 	.word	0x00000400
 8004294:	20000468 	.word	0x20000468
 8004298:	20000a48 	.word	0x20000a48

0800429c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042a0:	4b06      	ldr	r3, [pc, #24]	@ (80042bc <SystemInit+0x20>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <SystemInit+0x20>)
 80042a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80042c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80042c4:	f7ff ffea 	bl	800429c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042c8:	480c      	ldr	r0, [pc, #48]	@ (80042fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042ca:	490d      	ldr	r1, [pc, #52]	@ (8004300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042d0:	e002      	b.n	80042d8 <LoopCopyDataInit>

080042d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042d6:	3304      	adds	r3, #4

080042d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042dc:	d3f9      	bcc.n	80042d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042de:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042e0:	4c0a      	ldr	r4, [pc, #40]	@ (800430c <LoopFillZerobss+0x22>)
  movs r3, #0
 80042e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042e4:	e001      	b.n	80042ea <LoopFillZerobss>

080042e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042e8:	3204      	adds	r2, #4

080042ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042ec:	d3fb      	bcc.n	80042e6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80042ee:	f004 ff39 	bl	8009164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042f2:	f7ff f833 	bl	800335c <main>
  bx  lr    
 80042f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80042fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004300:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8004304:	0800dd2c 	.word	0x0800dd2c
  ldr r2, =_sbss
 8004308:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 800430c:	20000a48 	.word	0x20000a48

08004310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004310:	e7fe      	b.n	8004310 <ADC_IRQHandler>
	...

08004314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004318:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <HAL_Init+0x40>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0d      	ldr	r2, [pc, #52]	@ (8004354 <HAL_Init+0x40>)
 800431e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_Init+0x40>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <HAL_Init+0x40>)
 800432a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800432e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004330:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <HAL_Init+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a07      	ldr	r2, [pc, #28]	@ (8004354 <HAL_Init+0x40>)
 8004336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800433c:	2003      	movs	r0, #3
 800433e:	f000 f931 	bl	80045a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004342:	200f      	movs	r0, #15
 8004344:	f000 f808 	bl	8004358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004348:	f7ff fd5a 	bl	8003e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40023c00 	.word	0x40023c00

08004358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004360:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_InitTick+0x54>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <HAL_InitTick+0x58>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	4619      	mov	r1, r3
 800436a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800436e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f93b 	bl	80045f2 <HAL_SYSTICK_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e00e      	b.n	80043a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b0f      	cmp	r3, #15
 800438a:	d80a      	bhi.n	80043a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800438c:	2200      	movs	r2, #0
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	f000 f911 	bl	80045ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004398:	4a06      	ldr	r2, [pc, #24]	@ (80043b4 <HAL_InitTick+0x5c>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000070 	.word	0x20000070
 80043b0:	20000078 	.word	0x20000078
 80043b4:	20000074 	.word	0x20000074

080043b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_IncTick+0x20>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <HAL_IncTick+0x24>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	4a04      	ldr	r2, [pc, #16]	@ (80043dc <HAL_IncTick+0x24>)
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000078 	.word	0x20000078
 80043dc:	2000046c 	.word	0x2000046c

080043e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return uwTick;
 80043e4:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <HAL_GetTick+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	2000046c 	.word	0x2000046c

080043f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004400:	f7ff ffee 	bl	80043e0 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d005      	beq.n	800441e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004412:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_Delay+0x44>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800441e:	bf00      	nop
 8004420:	f7ff ffde 	bl	80043e0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	429a      	cmp	r2, r3
 800442e:	d8f7      	bhi.n	8004420 <HAL_Delay+0x28>
  {
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000078 	.word	0x20000078

08004440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800445c:	4013      	ands	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800446c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004472:	4a04      	ldr	r2, [pc, #16]	@ (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	60d3      	str	r3, [r2, #12]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800448c:	4b04      	ldr	r3, [pc, #16]	@ (80044a0 <__NVIC_GetPriorityGrouping+0x18>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0307 	and.w	r3, r3, #7
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	6039      	str	r1, [r7, #0]
 80044ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	db0a      	blt.n	80044ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	490c      	ldr	r1, [pc, #48]	@ (80044f0 <__NVIC_SetPriority+0x4c>)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	0112      	lsls	r2, r2, #4
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	440b      	add	r3, r1
 80044c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044cc:	e00a      	b.n	80044e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4908      	ldr	r1, [pc, #32]	@ (80044f4 <__NVIC_SetPriority+0x50>)
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	3b04      	subs	r3, #4
 80044dc:	0112      	lsls	r2, r2, #4
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	440b      	add	r3, r1
 80044e2:	761a      	strb	r2, [r3, #24]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	e000e100 	.word	0xe000e100
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b089      	sub	sp, #36	@ 0x24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f1c3 0307 	rsb	r3, r3, #7
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf28      	it	cs
 8004516:	2304      	movcs	r3, #4
 8004518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3304      	adds	r3, #4
 800451e:	2b06      	cmp	r3, #6
 8004520:	d902      	bls.n	8004528 <NVIC_EncodePriority+0x30>
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3b03      	subs	r3, #3
 8004526:	e000      	b.n	800452a <NVIC_EncodePriority+0x32>
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	401a      	ands	r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004540:	f04f 31ff 	mov.w	r1, #4294967295
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	43d9      	mvns	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004550:	4313      	orrs	r3, r2
         );
}
 8004552:	4618      	mov	r0, r3
 8004554:	3724      	adds	r7, #36	@ 0x24
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
	...

08004560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3b01      	subs	r3, #1
 800456c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004570:	d301      	bcc.n	8004576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004572:	2301      	movs	r3, #1
 8004574:	e00f      	b.n	8004596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <SysTick_Config+0x40>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800457e:	210f      	movs	r1, #15
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	f7ff ff8e 	bl	80044a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <SysTick_Config+0x40>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458e:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <SysTick_Config+0x40>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010

080045a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ff47 	bl	8004440 <__NVIC_SetPriorityGrouping>
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b086      	sub	sp, #24
 80045be:	af00      	add	r7, sp, #0
 80045c0:	4603      	mov	r3, r0
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045cc:	f7ff ff5c 	bl	8004488 <__NVIC_GetPriorityGrouping>
 80045d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f7ff ff8e 	bl	80044f8 <NVIC_EncodePriority>
 80045dc:	4602      	mov	r2, r0
 80045de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e2:	4611      	mov	r1, r2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff5d 	bl	80044a4 <__NVIC_SetPriority>
}
 80045ea:	bf00      	nop
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ffb0 	bl	8004560 <SysTick_Config>
 8004600:	4603      	mov	r3, r0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	@ 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e159      	b.n	80048dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004628:	2201      	movs	r2, #1
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	429a      	cmp	r2, r3
 8004642:	f040 8148 	bne.w	80048d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d005      	beq.n	800465e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800465a:	2b02      	cmp	r3, #2
 800465c:	d130      	bne.n	80046c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	2203      	movs	r2, #3
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4013      	ands	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004694:	2201      	movs	r2, #1
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 0201 	and.w	r2, r3, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d017      	beq.n	80046fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d123      	bne.n	8004750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	08da      	lsrs	r2, r3, #3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3208      	adds	r2, #8
 8004710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	220f      	movs	r2, #15
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	08da      	lsrs	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3208      	adds	r2, #8
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 0203 	and.w	r2, r3, #3
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a2 	beq.w	80048d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	4b57      	ldr	r3, [pc, #348]	@ (80048f4 <HAL_GPIO_Init+0x2e8>)
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	4a56      	ldr	r2, [pc, #344]	@ (80048f4 <HAL_GPIO_Init+0x2e8>)
 800479c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80047a2:	4b54      	ldr	r3, [pc, #336]	@ (80048f4 <HAL_GPIO_Init+0x2e8>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ae:	4a52      	ldr	r2, [pc, #328]	@ (80048f8 <HAL_GPIO_Init+0x2ec>)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	3302      	adds	r3, #2
 80047b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	220f      	movs	r2, #15
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a49      	ldr	r2, [pc, #292]	@ (80048fc <HAL_GPIO_Init+0x2f0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d019      	beq.n	800480e <HAL_GPIO_Init+0x202>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a48      	ldr	r2, [pc, #288]	@ (8004900 <HAL_GPIO_Init+0x2f4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_GPIO_Init+0x1fe>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a47      	ldr	r2, [pc, #284]	@ (8004904 <HAL_GPIO_Init+0x2f8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00d      	beq.n	8004806 <HAL_GPIO_Init+0x1fa>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a46      	ldr	r2, [pc, #280]	@ (8004908 <HAL_GPIO_Init+0x2fc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <HAL_GPIO_Init+0x1f6>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a45      	ldr	r2, [pc, #276]	@ (800490c <HAL_GPIO_Init+0x300>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d101      	bne.n	80047fe <HAL_GPIO_Init+0x1f2>
 80047fa:	2304      	movs	r3, #4
 80047fc:	e008      	b.n	8004810 <HAL_GPIO_Init+0x204>
 80047fe:	2307      	movs	r3, #7
 8004800:	e006      	b.n	8004810 <HAL_GPIO_Init+0x204>
 8004802:	2303      	movs	r3, #3
 8004804:	e004      	b.n	8004810 <HAL_GPIO_Init+0x204>
 8004806:	2302      	movs	r3, #2
 8004808:	e002      	b.n	8004810 <HAL_GPIO_Init+0x204>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_GPIO_Init+0x204>
 800480e:	2300      	movs	r3, #0
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f002 0203 	and.w	r2, r2, #3
 8004816:	0092      	lsls	r2, r2, #2
 8004818:	4093      	lsls	r3, r2
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004820:	4935      	ldr	r1, [pc, #212]	@ (80048f8 <HAL_GPIO_Init+0x2ec>)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3302      	adds	r3, #2
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800482e:	4b38      	ldr	r3, [pc, #224]	@ (8004910 <HAL_GPIO_Init+0x304>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	43db      	mvns	r3, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4013      	ands	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004852:	4a2f      	ldr	r2, [pc, #188]	@ (8004910 <HAL_GPIO_Init+0x304>)
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004858:	4b2d      	ldr	r3, [pc, #180]	@ (8004910 <HAL_GPIO_Init+0x304>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	43db      	mvns	r3, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4013      	ands	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800487c:	4a24      	ldr	r2, [pc, #144]	@ (8004910 <HAL_GPIO_Init+0x304>)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004882:	4b23      	ldr	r3, [pc, #140]	@ (8004910 <HAL_GPIO_Init+0x304>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004910 <HAL_GPIO_Init+0x304>)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ac:	4b18      	ldr	r3, [pc, #96]	@ (8004910 <HAL_GPIO_Init+0x304>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004910 <HAL_GPIO_Init+0x304>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	f67f aea2 	bls.w	8004628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	3724      	adds	r7, #36	@ 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40013800 	.word	0x40013800
 80048fc:	40020000 	.word	0x40020000
 8004900:	40020400 	.word	0x40020400
 8004904:	40020800 	.word	0x40020800
 8004908:	40020c00 	.word	0x40020c00
 800490c:	40021000 	.word	0x40021000
 8004910:	40013c00 	.word	0x40013c00

08004914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	887b      	ldrh	r3, [r7, #2]
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e001      	b.n	8004936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	807b      	strh	r3, [r7, #2]
 8004950:	4613      	mov	r3, r2
 8004952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004954:	787b      	ldrb	r3, [r7, #1]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800495a:	887a      	ldrh	r2, [r7, #2]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004960:	e003      	b.n	800496a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	041a      	lsls	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	619a      	str	r2, [r3, #24]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004988:	887a      	ldrh	r2, [r7, #2]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4013      	ands	r3, r2
 800498e:	041a      	lsls	r2, r3, #16
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	43d9      	mvns	r1, r3
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	400b      	ands	r3, r1
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	619a      	str	r2, [r3, #24]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e12b      	b.n	8004c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff fa40 	bl	8003e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2224      	movs	r2, #36	@ 0x24
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a10:	f002 f8e0 	bl	8006bd4 <HAL_RCC_GetPCLK1Freq>
 8004a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4a81      	ldr	r2, [pc, #516]	@ (8004c20 <HAL_I2C_Init+0x274>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d807      	bhi.n	8004a30 <HAL_I2C_Init+0x84>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a80      	ldr	r2, [pc, #512]	@ (8004c24 <HAL_I2C_Init+0x278>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	bf94      	ite	ls
 8004a28:	2301      	movls	r3, #1
 8004a2a:	2300      	movhi	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e006      	b.n	8004a3e <HAL_I2C_Init+0x92>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a7d      	ldr	r2, [pc, #500]	@ (8004c28 <HAL_I2C_Init+0x27c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	bf94      	ite	ls
 8004a38:	2301      	movls	r3, #1
 8004a3a:	2300      	movhi	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e0e7      	b.n	8004c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a78      	ldr	r2, [pc, #480]	@ (8004c2c <HAL_I2C_Init+0x280>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0c9b      	lsrs	r3, r3, #18
 8004a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a6a      	ldr	r2, [pc, #424]	@ (8004c20 <HAL_I2C_Init+0x274>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d802      	bhi.n	8004a80 <HAL_I2C_Init+0xd4>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	e009      	b.n	8004a94 <HAL_I2C_Init+0xe8>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	4a69      	ldr	r2, [pc, #420]	@ (8004c30 <HAL_I2C_Init+0x284>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	099b      	lsrs	r3, r3, #6
 8004a92:	3301      	adds	r3, #1
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004aa6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	495c      	ldr	r1, [pc, #368]	@ (8004c20 <HAL_I2C_Init+0x274>)
 8004ab0:	428b      	cmp	r3, r1
 8004ab2:	d819      	bhi.n	8004ae8 <HAL_I2C_Init+0x13c>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1e59      	subs	r1, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac2:	1c59      	adds	r1, r3, #1
 8004ac4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ac8:	400b      	ands	r3, r1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_I2C_Init+0x138>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1e59      	subs	r1, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae2:	e051      	b.n	8004b88 <HAL_I2C_Init+0x1dc>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	e04f      	b.n	8004b88 <HAL_I2C_Init+0x1dc>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d111      	bne.n	8004b14 <HAL_I2C_Init+0x168>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	1e58      	subs	r0, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6859      	ldr	r1, [r3, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	440b      	add	r3, r1
 8004afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e012      	b.n	8004b3a <HAL_I2C_Init+0x18e>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1e58      	subs	r0, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	0099      	lsls	r1, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_I2C_Init+0x196>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e022      	b.n	8004b88 <HAL_I2C_Init+0x1dc>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10e      	bne.n	8004b68 <HAL_I2C_Init+0x1bc>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1e58      	subs	r0, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	440b      	add	r3, r1
 8004b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b66:	e00f      	b.n	8004b88 <HAL_I2C_Init+0x1dc>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1e58      	subs	r0, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	0099      	lsls	r1, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	6809      	ldr	r1, [r1, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004bb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6911      	ldr	r1, [r2, #16]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68d2      	ldr	r2, [r2, #12]
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	000186a0 	.word	0x000186a0
 8004c24:	001e847f 	.word	0x001e847f
 8004c28:	003d08ff 	.word	0x003d08ff
 8004c2c:	431bde83 	.word	0x431bde83
 8004c30:	10624dd3 	.word	0x10624dd3

08004c34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	460b      	mov	r3, r1
 8004c42:	817b      	strh	r3, [r7, #10]
 8004c44:	4613      	mov	r3, r2
 8004c46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c48:	f7ff fbca 	bl	80043e0 <HAL_GetTick>
 8004c4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b20      	cmp	r3, #32
 8004c58:	f040 80e0 	bne.w	8004e1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	2319      	movs	r3, #25
 8004c62:	2201      	movs	r2, #1
 8004c64:	4970      	ldr	r1, [pc, #448]	@ (8004e28 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f001 f90e 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c72:	2302      	movs	r3, #2
 8004c74:	e0d3      	b.n	8004e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_I2C_Master_Transmit+0x50>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e0cc      	b.n	8004e1e <HAL_I2C_Master_Transmit+0x1ea>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d007      	beq.n	8004caa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2221      	movs	r2, #33	@ 0x21
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	893a      	ldrh	r2, [r7, #8]
 8004cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4a50      	ldr	r2, [pc, #320]	@ (8004e2c <HAL_I2C_Master_Transmit+0x1f8>)
 8004cea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cec:	8979      	ldrh	r1, [r7, #10]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fdfa 	bl	80058ec <I2C_MasterRequestWrite>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e08d      	b.n	8004e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d18:	e066      	b.n	8004de8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f001 f9cc 	bl	80060bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d107      	bne.n	8004d42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e06b      	b.n	8004e1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d11b      	bne.n	8004dbc <HAL_I2C_Master_Transmit+0x188>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d017      	beq.n	8004dbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	6a39      	ldr	r1, [r7, #32]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f001 f9c3 	bl	800614c <I2C_WaitOnBTFFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00d      	beq.n	8004de8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d107      	bne.n	8004de4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e01a      	b.n	8004e1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d194      	bne.n	8004d1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e000      	b.n	8004e1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
  }
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	00100002 	.word	0x00100002
 8004e2c:	ffff0000 	.word	0xffff0000

08004e30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	@ 0x30
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	817b      	strh	r3, [r7, #10]
 8004e40:	4613      	mov	r3, r2
 8004e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e44:	f7ff facc 	bl	80043e0 <HAL_GetTick>
 8004e48:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	f040 8217 	bne.w	8005286 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2319      	movs	r3, #25
 8004e5e:	2201      	movs	r2, #1
 8004e60:	497c      	ldr	r1, [pc, #496]	@ (8005054 <HAL_I2C_Master_Receive+0x224>)
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f001 f810 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e20a      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_I2C_Master_Receive+0x50>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e203      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d007      	beq.n	8004ea6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2222      	movs	r2, #34	@ 0x22
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	893a      	ldrh	r2, [r7, #8]
 8004ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a5c      	ldr	r2, [pc, #368]	@ (8005058 <HAL_I2C_Master_Receive+0x228>)
 8004ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ee8:	8979      	ldrh	r1, [r7, #10]
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fd7e 	bl	80059f0 <I2C_MasterRequestRead>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e1c4      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d113      	bne.n	8004f2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f06:	2300      	movs	r3, #0
 8004f08:	623b      	str	r3, [r7, #32]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	623b      	str	r3, [r7, #32]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	623b      	str	r3, [r7, #32]
 8004f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e198      	b.n	8005260 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d11b      	bne.n	8004f6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e178      	b.n	8005260 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d11b      	bne.n	8004fae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	e158      	b.n	8005260 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fd4:	e144      	b.n	8005260 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	f200 80f1 	bhi.w	80051c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d123      	bne.n	8005030 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f001 f8f5 	bl	80061dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e145      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800502e:	e117      	b.n	8005260 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005034:	2b02      	cmp	r3, #2
 8005036:	d14e      	bne.n	80050d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503e:	2200      	movs	r2, #0
 8005040:	4906      	ldr	r1, [pc, #24]	@ (800505c <HAL_I2C_Master_Receive+0x22c>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 ff20 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e11a      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
 8005052:	bf00      	nop
 8005054:	00100002 	.word	0x00100002
 8005058:	ffff0000 	.word	0xffff0000
 800505c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800506e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050d4:	e0c4      	b.n	8005260 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	2200      	movs	r2, #0
 80050de:	496c      	ldr	r1, [pc, #432]	@ (8005290 <HAL_I2C_Master_Receive+0x460>)
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fed1 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0cb      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	2200      	movs	r2, #0
 800513a:	4955      	ldr	r1, [pc, #340]	@ (8005290 <HAL_I2C_Master_Receive+0x460>)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fea3 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e09d      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800515a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051c0:	e04e      	b.n	8005260 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f001 f808 	bl	80061dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e058      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b04      	cmp	r3, #4
 8005214:	d124      	bne.n	8005260 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521a:	2b03      	cmp	r3, #3
 800521c:	d107      	bne.n	800522e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f aeb6 	bne.w	8004fd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	@ 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	00010004 	.word	0x00010004

08005294 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	4608      	mov	r0, r1
 800529e:	4611      	mov	r1, r2
 80052a0:	461a      	mov	r2, r3
 80052a2:	4603      	mov	r3, r0
 80052a4:	817b      	strh	r3, [r7, #10]
 80052a6:	460b      	mov	r3, r1
 80052a8:	813b      	strh	r3, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052ae:	f7ff f897 	bl	80043e0 <HAL_GetTick>
 80052b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b20      	cmp	r3, #32
 80052be:	f040 80d9 	bne.w	8005474 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	2319      	movs	r3, #25
 80052c8:	2201      	movs	r2, #1
 80052ca:	496d      	ldr	r1, [pc, #436]	@ (8005480 <HAL_I2C_Mem_Write+0x1ec>)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fddb 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
 80052da:	e0cc      	b.n	8005476 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_I2C_Mem_Write+0x56>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0c5      	b.n	8005476 <HAL_I2C_Mem_Write+0x1e2>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d007      	beq.n	8005310 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800531e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2221      	movs	r2, #33	@ 0x21
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2240      	movs	r2, #64	@ 0x40
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a3a      	ldr	r2, [r7, #32]
 800533a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005340:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a4d      	ldr	r2, [pc, #308]	@ (8005484 <HAL_I2C_Mem_Write+0x1f0>)
 8005350:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005352:	88f8      	ldrh	r0, [r7, #6]
 8005354:	893a      	ldrh	r2, [r7, #8]
 8005356:	8979      	ldrh	r1, [r7, #10]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	4603      	mov	r3, r0
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fc12 	bl	8005b8c <I2C_RequestMemoryWrite>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d052      	beq.n	8005414 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e081      	b.n	8005476 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fea0 	bl	80060bc <I2C_WaitOnTXEFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00d      	beq.n	800539e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	2b04      	cmp	r3, #4
 8005388:	d107      	bne.n	800539a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005398:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e06b      	b.n	8005476 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	781a      	ldrb	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d11b      	bne.n	8005414 <HAL_I2C_Mem_Write+0x180>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d017      	beq.n	8005414 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1aa      	bne.n	8005372 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fe93 	bl	800614c <I2C_WaitOnBTFFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00d      	beq.n	8005448 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	2b04      	cmp	r3, #4
 8005432:	d107      	bne.n	8005444 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005442:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e016      	b.n	8005476 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	00100002 	.word	0x00100002
 8005484:	ffff0000 	.word	0xffff0000

08005488 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08c      	sub	sp, #48	@ 0x30
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	461a      	mov	r2, r3
 8005496:	4603      	mov	r3, r0
 8005498:	817b      	strh	r3, [r7, #10]
 800549a:	460b      	mov	r3, r1
 800549c:	813b      	strh	r3, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054a2:	f7fe ff9d 	bl	80043e0 <HAL_GetTick>
 80054a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	f040 8214 	bne.w	80058de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	2319      	movs	r3, #25
 80054bc:	2201      	movs	r2, #1
 80054be:	497b      	ldr	r1, [pc, #492]	@ (80056ac <HAL_I2C_Mem_Read+0x224>)
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 fce1 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80054cc:	2302      	movs	r3, #2
 80054ce:	e207      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_I2C_Mem_Read+0x56>
 80054da:	2302      	movs	r3, #2
 80054dc:	e200      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d007      	beq.n	8005504 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2222      	movs	r2, #34	@ 0x22
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2240      	movs	r2, #64	@ 0x40
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800552e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a5b      	ldr	r2, [pc, #364]	@ (80056b0 <HAL_I2C_Mem_Read+0x228>)
 8005544:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005546:	88f8      	ldrh	r0, [r7, #6]
 8005548:	893a      	ldrh	r2, [r7, #8]
 800554a:	8979      	ldrh	r1, [r7, #10]
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	9301      	str	r3, [sp, #4]
 8005550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4603      	mov	r3, r0
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fbae 	bl	8005cb8 <I2C_RequestMemoryRead>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e1bc      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d113      	bne.n	8005596 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556e:	2300      	movs	r3, #0
 8005570:	623b      	str	r3, [r7, #32]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e190      	b.n	80058b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559a:	2b01      	cmp	r3, #1
 800559c:	d11b      	bne.n	80055d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e170      	b.n	80058b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d11b      	bne.n	8005616 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	e150      	b.n	80058b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800562c:	e144      	b.n	80058b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005632:	2b03      	cmp	r3, #3
 8005634:	f200 80f1 	bhi.w	800581a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563c:	2b01      	cmp	r3, #1
 800563e:	d123      	bne.n	8005688 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005642:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fdc9 	bl	80061dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e145      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005686:	e117      	b.n	80058b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568c:	2b02      	cmp	r3, #2
 800568e:	d14e      	bne.n	800572e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005696:	2200      	movs	r2, #0
 8005698:	4906      	ldr	r1, [pc, #24]	@ (80056b4 <HAL_I2C_Mem_Read+0x22c>)
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 fbf4 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e11a      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
 80056aa:	bf00      	nop
 80056ac:	00100002 	.word	0x00100002
 80056b0:	ffff0000 	.word	0xffff0000
 80056b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800572c:	e0c4      	b.n	80058b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005734:	2200      	movs	r2, #0
 8005736:	496c      	ldr	r1, [pc, #432]	@ (80058e8 <HAL_I2C_Mem_Read+0x460>)
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fba5 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0cb      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005790:	2200      	movs	r2, #0
 8005792:	4955      	ldr	r1, [pc, #340]	@ (80058e8 <HAL_I2C_Mem_Read+0x460>)
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fb77 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d001      	beq.n	80057a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e09d      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005818:	e04e      	b.n	80058b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800581a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800581c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fcdc 	bl	80061dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e058      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b04      	cmp	r3, #4
 800586c:	d124      	bne.n	80058b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005872:	2b03      	cmp	r3, #3
 8005874:	d107      	bne.n	8005886 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005884:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f47f aeb6 	bne.w	800562e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3728      	adds	r7, #40	@ 0x28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	00010004 	.word	0x00010004

080058ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	460b      	mov	r3, r1
 80058fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d006      	beq.n	8005916 <I2C_MasterRequestWrite+0x2a>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d003      	beq.n	8005916 <I2C_MasterRequestWrite+0x2a>
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005914:	d108      	bne.n	8005928 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e00b      	b.n	8005940 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592c:	2b12      	cmp	r3, #18
 800592e:	d107      	bne.n	8005940 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800593e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fa9b 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00d      	beq.n	8005974 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005966:	d103      	bne.n	8005970 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800596e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e035      	b.n	80059e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800597c:	d108      	bne.n	8005990 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800597e:	897b      	ldrh	r3, [r7, #10]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800598c:	611a      	str	r2, [r3, #16]
 800598e:	e01b      	b.n	80059c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005990:	897b      	ldrh	r3, [r7, #10]
 8005992:	11db      	asrs	r3, r3, #7
 8005994:	b2db      	uxtb	r3, r3
 8005996:	f003 0306 	and.w	r3, r3, #6
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f063 030f 	orn	r3, r3, #15
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	490e      	ldr	r1, [pc, #56]	@ (80059e8 <I2C_MasterRequestWrite+0xfc>)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 fae4 	bl	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e010      	b.n	80059e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059be:	897b      	ldrh	r3, [r7, #10]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4907      	ldr	r1, [pc, #28]	@ (80059ec <I2C_MasterRequestWrite+0x100>)
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fad4 	bl	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	00010008 	.word	0x00010008
 80059ec:	00010002 	.word	0x00010002

080059f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	460b      	mov	r3, r1
 80059fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d006      	beq.n	8005a2a <I2C_MasterRequestRead+0x3a>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d003      	beq.n	8005a2a <I2C_MasterRequestRead+0x3a>
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a28:	d108      	bne.n	8005a3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e00b      	b.n	8005a54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a40:	2b11      	cmp	r3, #17
 8005a42:	d107      	bne.n	8005a54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fa11 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00d      	beq.n	8005a88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a7a:	d103      	bne.n	8005a84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e079      	b.n	8005b7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a90:	d108      	bne.n	8005aa4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a92:	897b      	ldrh	r3, [r7, #10]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	611a      	str	r2, [r3, #16]
 8005aa2:	e05f      	b.n	8005b64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005aa4:	897b      	ldrh	r3, [r7, #10]
 8005aa6:	11db      	asrs	r3, r3, #7
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	f003 0306 	and.w	r3, r3, #6
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f063 030f 	orn	r3, r3, #15
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4930      	ldr	r1, [pc, #192]	@ (8005b84 <I2C_MasterRequestRead+0x194>)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fa5a 	bl	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e054      	b.n	8005b7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4929      	ldr	r1, [pc, #164]	@ (8005b88 <I2C_MasterRequestRead+0x198>)
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fa4a 	bl	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e044      	b.n	8005b7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f9af 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00d      	beq.n	8005b4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3e:	d103      	bne.n	8005b48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b46:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e017      	b.n	8005b7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b4c:	897b      	ldrh	r3, [r7, #10]
 8005b4e:	11db      	asrs	r3, r3, #7
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 0306 	and.w	r3, r3, #6
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f063 030e 	orn	r3, r3, #14
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4907      	ldr	r1, [pc, #28]	@ (8005b88 <I2C_MasterRequestRead+0x198>)
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fa06 	bl	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	00010008 	.word	0x00010008
 8005b88:	00010002 	.word	0x00010002

08005b8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	4608      	mov	r0, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	817b      	strh	r3, [r7, #10]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	813b      	strh	r3, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f960 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00d      	beq.n	8005bea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bdc:	d103      	bne.n	8005be6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005be4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e05f      	b.n	8005caa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bea:	897b      	ldrh	r3, [r7, #10]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	6a3a      	ldr	r2, [r7, #32]
 8005bfe:	492d      	ldr	r1, [pc, #180]	@ (8005cb4 <I2C_RequestMemoryWrite+0x128>)
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f9bb 	bl	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e04c      	b.n	8005caa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c28:	6a39      	ldr	r1, [r7, #32]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 fa46 	bl	80060bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00d      	beq.n	8005c52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d107      	bne.n	8005c4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e02b      	b.n	8005caa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d105      	bne.n	8005c64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c58:	893b      	ldrh	r3, [r7, #8]
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	611a      	str	r2, [r3, #16]
 8005c62:	e021      	b.n	8005ca8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c64:	893b      	ldrh	r3, [r7, #8]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c74:	6a39      	ldr	r1, [r7, #32]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fa20 	bl	80060bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d107      	bne.n	8005c9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e005      	b.n	8005caa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9e:	893b      	ldrh	r3, [r7, #8]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	00010002 	.word	0x00010002

08005cb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	817b      	strh	r3, [r7, #10]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	813b      	strh	r3, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f8c2 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00d      	beq.n	8005d26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d18:	d103      	bne.n	8005d22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e0aa      	b.n	8005e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d26:	897b      	ldrh	r3, [r7, #10]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	6a3a      	ldr	r2, [r7, #32]
 8005d3a:	4952      	ldr	r1, [pc, #328]	@ (8005e84 <I2C_RequestMemoryRead+0x1cc>)
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f91d 	bl	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e097      	b.n	8005e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d64:	6a39      	ldr	r1, [r7, #32]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f9a8 	bl	80060bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00d      	beq.n	8005d8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d107      	bne.n	8005d8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e076      	b.n	8005e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d105      	bne.n	8005da0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d94:	893b      	ldrh	r3, [r7, #8]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	e021      	b.n	8005de4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005da0:	893b      	ldrh	r3, [r7, #8]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db0:	6a39      	ldr	r1, [r7, #32]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f982 	bl	80060bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d107      	bne.n	8005dd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e050      	b.n	8005e7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dda:	893b      	ldrh	r3, [r7, #8]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de6:	6a39      	ldr	r1, [r7, #32]
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f967 	bl	80060bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00d      	beq.n	8005e10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d107      	bne.n	8005e0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e035      	b.n	8005e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f82b 	bl	8005e88 <I2C_WaitOnFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e46:	d103      	bne.n	8005e50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e013      	b.n	8005e7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e54:	897b      	ldrh	r3, [r7, #10]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	4906      	ldr	r1, [pc, #24]	@ (8005e84 <I2C_RequestMemoryRead+0x1cc>)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 f886 	bl	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	00010002 	.word	0x00010002

08005e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e98:	e048      	b.n	8005f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d044      	beq.n	8005f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea2:	f7fe fa9d 	bl	80043e0 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d139      	bne.n	8005f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	0c1b      	lsrs	r3, r3, #16
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d10d      	bne.n	8005ede <I2C_WaitOnFlagUntilTimeout+0x56>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	43da      	mvns	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	e00c      	b.n	8005ef8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	43da      	mvns	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bf0c      	ite	eq
 8005ef0:	2301      	moveq	r3, #1
 8005ef2:	2300      	movne	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d116      	bne.n	8005f2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	f043 0220 	orr.w	r2, r3, #32
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e023      	b.n	8005f74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d10d      	bne.n	8005f52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	43da      	mvns	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4013      	ands	r3, r2
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bf0c      	ite	eq
 8005f48:	2301      	moveq	r3, #1
 8005f4a:	2300      	movne	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	e00c      	b.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	43da      	mvns	r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bf0c      	ite	eq
 8005f64:	2301      	moveq	r3, #1
 8005f66:	2300      	movne	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d093      	beq.n	8005e9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f8a:	e071      	b.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9a:	d123      	bne.n	8005fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005faa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	f043 0204 	orr.w	r2, r3, #4
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e067      	b.n	80060b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d041      	beq.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fec:	f7fe f9f8 	bl	80043e0 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d136      	bne.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10c      	bne.n	8006026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	43da      	mvns	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf14      	ite	ne
 800601e:	2301      	movne	r3, #1
 8006020:	2300      	moveq	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	e00b      	b.n	800603e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	43da      	mvns	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4013      	ands	r3, r2
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d016      	beq.n	8006070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e021      	b.n	80060b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d10c      	bne.n	8006094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	43da      	mvns	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	4013      	ands	r3, r2
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	e00b      	b.n	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	43da      	mvns	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4013      	ands	r3, r2
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f47f af6d 	bne.w	8005f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060c8:	e034      	b.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f8e3 	bl	8006296 <I2C_IsAcknowledgeFailed>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e034      	b.n	8006144 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d028      	beq.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e2:	f7fe f97d 	bl	80043e0 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d302      	bcc.n	80060f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11d      	bne.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b80      	cmp	r3, #128	@ 0x80
 8006104:	d016      	beq.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006120:	f043 0220 	orr.w	r2, r3, #32
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e007      	b.n	8006144 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613e:	2b80      	cmp	r3, #128	@ 0x80
 8006140:	d1c3      	bne.n	80060ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006158:	e034      	b.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 f89b 	bl	8006296 <I2C_IsAcknowledgeFailed>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e034      	b.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d028      	beq.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006172:	f7fe f935 	bl	80043e0 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11d      	bne.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b04      	cmp	r3, #4
 8006194:	d016      	beq.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e007      	b.n	80061d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d1c3      	bne.n	800615a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061e8:	e049      	b.n	800627e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b10      	cmp	r3, #16
 80061f6:	d119      	bne.n	800622c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0210 	mvn.w	r2, #16
 8006200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e030      	b.n	800628e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622c:	f7fe f8d8 	bl	80043e0 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	d302      	bcc.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11d      	bne.n	800627e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624c:	2b40      	cmp	r3, #64	@ 0x40
 800624e:	d016      	beq.n	800627e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e007      	b.n	800628e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	2b40      	cmp	r3, #64	@ 0x40
 800628a:	d1ae      	bne.n	80061ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ac:	d11b      	bne.n	80062e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	f043 0204 	orr.w	r2, r3, #4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e267      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d075      	beq.n	80063fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006312:	4b88      	ldr	r3, [pc, #544]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	2b04      	cmp	r3, #4
 800631c:	d00c      	beq.n	8006338 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800631e:	4b85      	ldr	r3, [pc, #532]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006326:	2b08      	cmp	r3, #8
 8006328:	d112      	bne.n	8006350 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800632a:	4b82      	ldr	r3, [pc, #520]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006336:	d10b      	bne.n	8006350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006338:	4b7e      	ldr	r3, [pc, #504]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d05b      	beq.n	80063fc <HAL_RCC_OscConfig+0x108>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d157      	bne.n	80063fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e242      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006358:	d106      	bne.n	8006368 <HAL_RCC_OscConfig+0x74>
 800635a:	4b76      	ldr	r3, [pc, #472]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a75      	ldr	r2, [pc, #468]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e01d      	b.n	80063a4 <HAL_RCC_OscConfig+0xb0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006370:	d10c      	bne.n	800638c <HAL_RCC_OscConfig+0x98>
 8006372:	4b70      	ldr	r3, [pc, #448]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a6f      	ldr	r2, [pc, #444]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b6d      	ldr	r3, [pc, #436]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a6c      	ldr	r2, [pc, #432]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e00b      	b.n	80063a4 <HAL_RCC_OscConfig+0xb0>
 800638c:	4b69      	ldr	r3, [pc, #420]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a68      	ldr	r2, [pc, #416]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	4b66      	ldr	r3, [pc, #408]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a65      	ldr	r2, [pc, #404]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800639e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fe f818 	bl	80043e0 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b4:	f7fe f814 	bl	80043e0 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	@ 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e207      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0xc0>
 80063d2:	e014      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fe f804 	bl	80043e0 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fe f800 	bl	80043e0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	@ 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e1f3      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ee:	4b51      	ldr	r3, [pc, #324]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0xe8>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d063      	beq.n	80064d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800640a:	4b4a      	ldr	r3, [pc, #296]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 030c 	and.w	r3, r3, #12
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800641e:	2b08      	cmp	r3, #8
 8006420:	d11c      	bne.n	800645c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006422:	4b44      	ldr	r3, [pc, #272]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d116      	bne.n	800645c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642e:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_RCC_OscConfig+0x152>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d001      	beq.n	8006446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e1c7      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006446:	4b3b      	ldr	r3, [pc, #236]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4937      	ldr	r1, [pc, #220]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006456:	4313      	orrs	r3, r2
 8006458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645a:	e03a      	b.n	80064d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d020      	beq.n	80064a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006464:	4b34      	ldr	r3, [pc, #208]	@ (8006538 <HAL_RCC_OscConfig+0x244>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fd ffb9 	bl	80043e0 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006472:	f7fd ffb5 	bl	80043e0 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e1a8      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006484:	4b2b      	ldr	r3, [pc, #172]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006490:	4b28      	ldr	r3, [pc, #160]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4925      	ldr	r1, [pc, #148]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]
 80064a4:	e015      	b.n	80064d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064a6:	4b24      	ldr	r3, [pc, #144]	@ (8006538 <HAL_RCC_OscConfig+0x244>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fd ff98 	bl	80043e0 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b4:	f7fd ff94 	bl	80043e0 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e187      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d036      	beq.n	800654c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064e6:	4b15      	ldr	r3, [pc, #84]	@ (800653c <HAL_RCC_OscConfig+0x248>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fd ff78 	bl	80043e0 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f4:	f7fd ff74 	bl	80043e0 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e167      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006506:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x200>
 8006512:	e01b      	b.n	800654c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006514:	4b09      	ldr	r3, [pc, #36]	@ (800653c <HAL_RCC_OscConfig+0x248>)
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651a:	f7fd ff61 	bl	80043e0 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006520:	e00e      	b.n	8006540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006522:	f7fd ff5d 	bl	80043e0 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d907      	bls.n	8006540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e150      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
 8006534:	40023800 	.word	0x40023800
 8006538:	42470000 	.word	0x42470000
 800653c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006540:	4b88      	ldr	r3, [pc, #544]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ea      	bne.n	8006522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8097 	beq.w	8006688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800655e:	4b81      	ldr	r3, [pc, #516]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10f      	bne.n	800658a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656a:	2300      	movs	r3, #0
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	4b7d      	ldr	r3, [pc, #500]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	4a7c      	ldr	r2, [pc, #496]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006578:	6413      	str	r3, [r2, #64]	@ 0x40
 800657a:	4b7a      	ldr	r3, [pc, #488]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658a:	4b77      	ldr	r3, [pc, #476]	@ (8006768 <HAL_RCC_OscConfig+0x474>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d118      	bne.n	80065c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006596:	4b74      	ldr	r3, [pc, #464]	@ (8006768 <HAL_RCC_OscConfig+0x474>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a73      	ldr	r2, [pc, #460]	@ (8006768 <HAL_RCC_OscConfig+0x474>)
 800659c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a2:	f7fd ff1d 	bl	80043e0 <HAL_GetTick>
 80065a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065aa:	f7fd ff19 	bl	80043e0 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e10c      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006768 <HAL_RCC_OscConfig+0x474>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f0      	beq.n	80065aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d106      	bne.n	80065de <HAL_RCC_OscConfig+0x2ea>
 80065d0:	4b64      	ldr	r3, [pc, #400]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d4:	4a63      	ldr	r2, [pc, #396]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	6713      	str	r3, [r2, #112]	@ 0x70
 80065dc:	e01c      	b.n	8006618 <HAL_RCC_OscConfig+0x324>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d10c      	bne.n	8006600 <HAL_RCC_OscConfig+0x30c>
 80065e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065ec:	f043 0304 	orr.w	r3, r3, #4
 80065f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80065fe:	e00b      	b.n	8006618 <HAL_RCC_OscConfig+0x324>
 8006600:	4b58      	ldr	r3, [pc, #352]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006604:	4a57      	ldr	r2, [pc, #348]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006606:	f023 0301 	bic.w	r3, r3, #1
 800660a:	6713      	str	r3, [r2, #112]	@ 0x70
 800660c:	4b55      	ldr	r3, [pc, #340]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800660e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006610:	4a54      	ldr	r2, [pc, #336]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006612:	f023 0304 	bic.w	r3, r3, #4
 8006616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d015      	beq.n	800664c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006620:	f7fd fede 	bl	80043e0 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006626:	e00a      	b.n	800663e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006628:	f7fd feda 	bl	80043e0 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e0cb      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663e:	4b49      	ldr	r3, [pc, #292]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0ee      	beq.n	8006628 <HAL_RCC_OscConfig+0x334>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800664c:	f7fd fec8 	bl	80043e0 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006652:	e00a      	b.n	800666a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006654:	f7fd fec4 	bl	80043e0 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e0b5      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800666a:	4b3e      	ldr	r3, [pc, #248]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ee      	bne.n	8006654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d105      	bne.n	8006688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800667c:	4b39      	ldr	r3, [pc, #228]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	4a38      	ldr	r2, [pc, #224]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80a1 	beq.w	80067d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006692:	4b34      	ldr	r3, [pc, #208]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b08      	cmp	r3, #8
 800669c:	d05c      	beq.n	8006758 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d141      	bne.n	800672a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a6:	4b31      	ldr	r3, [pc, #196]	@ (800676c <HAL_RCC_OscConfig+0x478>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ac:	f7fd fe98 	bl	80043e0 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066b4:	f7fd fe94 	bl	80043e0 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e087      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c6:	4b27      	ldr	r3, [pc, #156]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f0      	bne.n	80066b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	3b01      	subs	r3, #1
 80066ec:	041b      	lsls	r3, r3, #16
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	061b      	lsls	r3, r3, #24
 80066f6:	491b      	ldr	r1, [pc, #108]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066fc:	4b1b      	ldr	r3, [pc, #108]	@ (800676c <HAL_RCC_OscConfig+0x478>)
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006702:	f7fd fe6d 	bl	80043e0 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670a:	f7fd fe69 	bl	80043e0 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e05c      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800671c:	4b11      	ldr	r3, [pc, #68]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCC_OscConfig+0x416>
 8006728:	e054      	b.n	80067d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672a:	4b10      	ldr	r3, [pc, #64]	@ (800676c <HAL_RCC_OscConfig+0x478>)
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006730:	f7fd fe56 	bl	80043e0 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006738:	f7fd fe52 	bl	80043e0 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e045      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674a:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x444>
 8006756:	e03d      	b.n	80067d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d107      	bne.n	8006770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e038      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
 8006764:	40023800 	.word	0x40023800
 8006768:	40007000 	.word	0x40007000
 800676c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006770:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <HAL_RCC_OscConfig+0x4ec>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d028      	beq.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d121      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006796:	429a      	cmp	r2, r3
 8006798:	d11a      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067a0:	4013      	ands	r3, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d111      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	3b01      	subs	r3, #1
 80067ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067bc:	429a      	cmp	r2, r3
 80067be:	d107      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40023800 	.word	0x40023800

080067e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0cc      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067f8:	4b68      	ldr	r3, [pc, #416]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d90c      	bls.n	8006820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b65      	ldr	r3, [pc, #404]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800680e:	4b63      	ldr	r3, [pc, #396]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d001      	beq.n	8006820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0b8      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006838:	4b59      	ldr	r3, [pc, #356]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	4a58      	ldr	r2, [pc, #352]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006850:	4b53      	ldr	r3, [pc, #332]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a52      	ldr	r2, [pc, #328]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800685a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800685c:	4b50      	ldr	r3, [pc, #320]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	494d      	ldr	r1, [pc, #308]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d044      	beq.n	8006904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d107      	bne.n	8006892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006882:	4b47      	ldr	r3, [pc, #284]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d119      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e07f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d107      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a2:	4b3f      	ldr	r3, [pc, #252]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e06f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b2:	4b3b      	ldr	r3, [pc, #236]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e067      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068c2:	4b37      	ldr	r3, [pc, #220]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 0203 	bic.w	r2, r3, #3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4934      	ldr	r1, [pc, #208]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068d4:	f7fd fd84 	bl	80043e0 <HAL_GetTick>
 80068d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068dc:	f7fd fd80 	bl	80043e0 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e04f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f2:	4b2b      	ldr	r3, [pc, #172]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 020c 	and.w	r2, r3, #12
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	429a      	cmp	r2, r3
 8006902:	d1eb      	bne.n	80068dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006904:	4b25      	ldr	r3, [pc, #148]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d20c      	bcs.n	800692c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006912:	4b22      	ldr	r3, [pc, #136]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800691a:	4b20      	ldr	r3, [pc, #128]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e032      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006938:	4b19      	ldr	r3, [pc, #100]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4916      	ldr	r1, [pc, #88]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006956:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	490e      	ldr	r1, [pc, #56]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800696a:	f000 f821 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 800696e:	4602      	mov	r2, r0
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	490a      	ldr	r1, [pc, #40]	@ (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 800697c:	5ccb      	ldrb	r3, [r1, r3]
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	4a09      	ldr	r2, [pc, #36]	@ (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006986:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <HAL_RCC_ClockConfig+0x1c8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7fd fce4 	bl	8004358 <HAL_InitTick>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40023c00 	.word	0x40023c00
 80069a0:	40023800 	.word	0x40023800
 80069a4:	0800d8dc 	.word	0x0800d8dc
 80069a8:	20000070 	.word	0x20000070
 80069ac:	20000074 	.word	0x20000074

080069b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b4:	b094      	sub	sp, #80	@ 0x50
 80069b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069c8:	4b79      	ldr	r3, [pc, #484]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d00d      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0x40>
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f200 80e1 	bhi.w	8006b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x34>
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d003      	beq.n	80069ea <HAL_RCC_GetSysClockFreq+0x3a>
 80069e2:	e0db      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069e4:	4b73      	ldr	r3, [pc, #460]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80069e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069e8:	e0db      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ea:	4b73      	ldr	r3, [pc, #460]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80069ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069ee:	e0d8      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f0:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069fa:	4b6d      	ldr	r3, [pc, #436]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d063      	beq.n	8006ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a06:	4b6a      	ldr	r3, [pc, #424]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	099b      	lsrs	r3, r3, #6
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a22:	4622      	mov	r2, r4
 8006a24:	462b      	mov	r3, r5
 8006a26:	f04f 0000 	mov.w	r0, #0
 8006a2a:	f04f 0100 	mov.w	r1, #0
 8006a2e:	0159      	lsls	r1, r3, #5
 8006a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a34:	0150      	lsls	r0, r2, #5
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	1a51      	subs	r1, r2, r1
 8006a3e:	6139      	str	r1, [r7, #16]
 8006a40:	4629      	mov	r1, r5
 8006a42:	eb63 0301 	sbc.w	r3, r3, r1
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a54:	4659      	mov	r1, fp
 8006a56:	018b      	lsls	r3, r1, #6
 8006a58:	4651      	mov	r1, sl
 8006a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a5e:	4651      	mov	r1, sl
 8006a60:	018a      	lsls	r2, r1, #6
 8006a62:	4651      	mov	r1, sl
 8006a64:	ebb2 0801 	subs.w	r8, r2, r1
 8006a68:	4659      	mov	r1, fp
 8006a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a82:	4690      	mov	r8, r2
 8006a84:	4699      	mov	r9, r3
 8006a86:	4623      	mov	r3, r4
 8006a88:	eb18 0303 	adds.w	r3, r8, r3
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	462b      	mov	r3, r5
 8006a90:	eb49 0303 	adc.w	r3, r9, r3
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	024b      	lsls	r3, r1, #9
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006aac:	4621      	mov	r1, r4
 8006aae:	024a      	lsls	r2, r1, #9
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ac0:	f7fa f8ea 	bl	8000c98 <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4613      	mov	r3, r2
 8006aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006acc:	e058      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ace:	4b38      	ldr	r3, [pc, #224]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	099b      	lsrs	r3, r3, #6
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	4611      	mov	r1, r2
 8006ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	f04f 0000 	mov.w	r0, #0
 8006af0:	f04f 0100 	mov.w	r1, #0
 8006af4:	0159      	lsls	r1, r3, #5
 8006af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006afa:	0150      	lsls	r0, r2, #5
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4641      	mov	r1, r8
 8006b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b06:	4649      	mov	r1, r9
 8006b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b20:	ebb2 040a 	subs.w	r4, r2, sl
 8006b24:	eb63 050b 	sbc.w	r5, r3, fp
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	00eb      	lsls	r3, r5, #3
 8006b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b36:	00e2      	lsls	r2, r4, #3
 8006b38:	4614      	mov	r4, r2
 8006b3a:	461d      	mov	r5, r3
 8006b3c:	4643      	mov	r3, r8
 8006b3e:	18e3      	adds	r3, r4, r3
 8006b40:	603b      	str	r3, [r7, #0]
 8006b42:	464b      	mov	r3, r9
 8006b44:	eb45 0303 	adc.w	r3, r5, r3
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b56:	4629      	mov	r1, r5
 8006b58:	028b      	lsls	r3, r1, #10
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b60:	4621      	mov	r1, r4
 8006b62:	028a      	lsls	r2, r1, #10
 8006b64:	4610      	mov	r0, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	61fa      	str	r2, [r7, #28]
 8006b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b74:	f7fa f890 	bl	8000c98 <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b80:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b9c:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3750      	adds	r7, #80	@ 0x50
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bae:	bf00      	nop
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	00f42400 	.word	0x00f42400
 8006bb8:	007a1200 	.word	0x007a1200

08006bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bc0:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20000070 	.word	0x20000070

08006bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bd8:	f7ff fff0 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0a9b      	lsrs	r3, r3, #10
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4903      	ldr	r1, [pc, #12]	@ (8006bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	0800d8ec 	.word	0x0800d8ec

08006bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c00:	f7ff ffdc 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	0b5b      	lsrs	r3, r3, #13
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4903      	ldr	r1, [pc, #12]	@ (8006c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	0800d8ec 	.word	0x0800d8ec

08006c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e07b      	b.n	8006d2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d108      	bne.n	8006c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c46:	d009      	beq.n	8006c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	61da      	str	r2, [r3, #28]
 8006c4e:	e005      	b.n	8006c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fd f98e 	bl	8003f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce0:	ea42 0103 	orr.w	r1, r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	f003 0104 	and.w	r1, r3, #4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	f003 0210 	and.w	r2, r3, #16
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b088      	sub	sp, #32
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d46:	f7fd fb4b 	bl	80043e0 <HAL_GetTick>
 8006d4a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d001      	beq.n	8006d60 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e12a      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_SPI_Transmit+0x36>
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e122      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_SPI_Transmit+0x48>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e11b      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2203      	movs	r2, #3
 8006d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dcc:	d10f      	bne.n	8006dee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ddc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df8:	2b40      	cmp	r3, #64	@ 0x40
 8006dfa:	d007      	beq.n	8006e0c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e14:	d152      	bne.n	8006ebc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_Transmit+0xee>
 8006e1e:	8b7b      	ldrh	r3, [r7, #26]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d145      	bne.n	8006eb0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e28:	881a      	ldrh	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e34:	1c9a      	adds	r2, r3, #2
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e48:	e032      	b.n	8006eb0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d112      	bne.n	8006e7e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5c:	881a      	ldrh	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e68:	1c9a      	adds	r2, r3, #2
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e7c:	e018      	b.n	8006eb0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e7e:	f7fd faaf 	bl	80043e0 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d803      	bhi.n	8006e96 <HAL_SPI_Transmit+0x160>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e94:	d102      	bne.n	8006e9c <HAL_SPI_Transmit+0x166>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e082      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1c7      	bne.n	8006e4a <HAL_SPI_Transmit+0x114>
 8006eba:	e053      	b.n	8006f64 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_SPI_Transmit+0x194>
 8006ec4:	8b7b      	ldrh	r3, [r7, #26]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d147      	bne.n	8006f5a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ef0:	e033      	b.n	8006f5a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d113      	bne.n	8006f28 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	7812      	ldrb	r2, [r2, #0]
 8006f0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f26:	e018      	b.n	8006f5a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f28:	f7fd fa5a 	bl	80043e0 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d803      	bhi.n	8006f40 <HAL_SPI_Transmit+0x20a>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d102      	bne.n	8006f46 <HAL_SPI_Transmit+0x210>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e02d      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1c6      	bne.n	8006ef2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 f8b1 	bl	80070d0 <SPI_EndRxTxTransaction>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
  }
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fd0:	f7fd fa06 	bl	80043e0 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	4413      	add	r3, r2
 8006fde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fe0:	f7fd f9fe 	bl	80043e0 <HAL_GetTick>
 8006fe4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fe6:	4b39      	ldr	r3, [pc, #228]	@ (80070cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	015b      	lsls	r3, r3, #5
 8006fec:	0d1b      	lsrs	r3, r3, #20
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	fb02 f303 	mul.w	r3, r2, r3
 8006ff4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff6:	e054      	b.n	80070a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffe:	d050      	beq.n	80070a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007000:	f7fd f9ee 	bl	80043e0 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	429a      	cmp	r2, r3
 800700e:	d902      	bls.n	8007016 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d13d      	bne.n	8007092 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007024:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800702e:	d111      	bne.n	8007054 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007038:	d004      	beq.n	8007044 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007042:	d107      	bne.n	8007054 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007052:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800705c:	d10f      	bne.n	800707e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800707c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e017      	b.n	80070c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	3b01      	subs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	4013      	ands	r3, r2
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	bf0c      	ite	eq
 80070b2:	2301      	moveq	r3, #1
 80070b4:	2300      	movne	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d19b      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20000070 	.word	0x20000070

080070d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2201      	movs	r2, #1
 80070e4:	2102      	movs	r1, #2
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff ff6a 	bl	8006fc0 <SPI_WaitFlagStateUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f6:	f043 0220 	orr.w	r2, r3, #32
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e032      	b.n	8007168 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007102:	4b1b      	ldr	r3, [pc, #108]	@ (8007170 <SPI_EndRxTxTransaction+0xa0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1b      	ldr	r2, [pc, #108]	@ (8007174 <SPI_EndRxTxTransaction+0xa4>)
 8007108:	fba2 2303 	umull	r2, r3, r2, r3
 800710c:	0d5b      	lsrs	r3, r3, #21
 800710e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007120:	d112      	bne.n	8007148 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	2180      	movs	r1, #128	@ 0x80
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff ff47 	bl	8006fc0 <SPI_WaitFlagStateUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d016      	beq.n	8007166 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e00f      	b.n	8007168 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	3b01      	subs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715e:	2b80      	cmp	r3, #128	@ 0x80
 8007160:	d0f2      	beq.n	8007148 <SPI_EndRxTxTransaction+0x78>
 8007162:	e000      	b.n	8007166 <SPI_EndRxTxTransaction+0x96>
        break;
 8007164:	bf00      	nop
  }

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20000070 	.word	0x20000070
 8007174:	165e9f81 	.word	0x165e9f81

08007178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e042      	b.n	8007210 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fc ff62 	bl	8004068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2224      	movs	r2, #36	@ 0x24
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f973 	bl	80074a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	@ 0x28
 800721c:	af02      	add	r7, sp, #8
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b20      	cmp	r3, #32
 8007236:	d175      	bne.n	8007324 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_UART_Transmit+0x2c>
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e06e      	b.n	8007326 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2221      	movs	r2, #33	@ 0x21
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007256:	f7fd f8c3 	bl	80043e0 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007270:	d108      	bne.n	8007284 <HAL_UART_Transmit+0x6c>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	e003      	b.n	800728c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800728c:	e02e      	b.n	80072ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2200      	movs	r2, #0
 8007296:	2180      	movs	r1, #128	@ 0x80
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 f848 	bl	800732e <UART_WaitOnFlagUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e03a      	b.n	8007326 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	3302      	adds	r3, #2
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e007      	b.n	80072de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	3301      	adds	r3, #1
 80072dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1cb      	bne.n	800728e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2200      	movs	r2, #0
 80072fe:	2140      	movs	r1, #64	@ 0x40
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f814 	bl	800732e <UART_WaitOnFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e006      	b.n	8007326 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b086      	sub	sp, #24
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	603b      	str	r3, [r7, #0]
 800733a:	4613      	mov	r3, r2
 800733c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800733e:	e03b      	b.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d037      	beq.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007348:	f7fd f84a 	bl	80043e0 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	6a3a      	ldr	r2, [r7, #32]
 8007354:	429a      	cmp	r2, r3
 8007356:	d302      	bcc.n	800735e <UART_WaitOnFlagUntilTimeout+0x30>
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e03a      	b.n	80073d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d023      	beq.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b80      	cmp	r3, #128	@ 0x80
 8007374:	d020      	beq.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b40      	cmp	r3, #64	@ 0x40
 800737a:	d01d      	beq.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b08      	cmp	r3, #8
 8007388:	d116      	bne.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f81d 	bl	80073e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2208      	movs	r2, #8
 80073aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e00f      	b.n	80073d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4013      	ands	r3, r2
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	bf0c      	ite	eq
 80073c8:	2301      	moveq	r3, #1
 80073ca:	2300      	movne	r3, #0
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d0b4      	beq.n	8007340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b095      	sub	sp, #84	@ 0x54
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	330c      	adds	r3, #12
 80073ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	330c      	adds	r3, #12
 8007406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007408:	643a      	str	r2, [r7, #64]	@ 0x40
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800740e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e5      	bne.n	80073e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3314      	adds	r3, #20
 8007422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	61fb      	str	r3, [r7, #28]
   return(result);
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f023 0301 	bic.w	r3, r3, #1
 8007432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3314      	adds	r3, #20
 800743a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800743c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800743e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e5      	bne.n	800741c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007454:	2b01      	cmp	r3, #1
 8007456:	d119      	bne.n	800748c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	60bb      	str	r3, [r7, #8]
   return(result);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f023 0310 	bic.w	r3, r3, #16
 800746e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007478:	61ba      	str	r2, [r7, #24]
 800747a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6979      	ldr	r1, [r7, #20]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	613b      	str	r3, [r7, #16]
   return(result);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800749a:	bf00      	nop
 800749c:	3754      	adds	r7, #84	@ 0x54
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074ac:	b0c0      	sub	sp, #256	@ 0x100
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c4:	68d9      	ldr	r1, [r3, #12]
 80074c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	ea40 0301 	orr.w	r3, r0, r1
 80074d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	431a      	orrs	r2, r3
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007500:	f021 010c 	bic.w	r1, r1, #12
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800750e:	430b      	orrs	r3, r1
 8007510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007522:	6999      	ldr	r1, [r3, #24]
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	ea40 0301 	orr.w	r3, r0, r1
 800752e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4b8f      	ldr	r3, [pc, #572]	@ (8007774 <UART_SetConfig+0x2cc>)
 8007538:	429a      	cmp	r2, r3
 800753a:	d005      	beq.n	8007548 <UART_SetConfig+0xa0>
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4b8d      	ldr	r3, [pc, #564]	@ (8007778 <UART_SetConfig+0x2d0>)
 8007544:	429a      	cmp	r2, r3
 8007546:	d104      	bne.n	8007552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007548:	f7ff fb58 	bl	8006bfc <HAL_RCC_GetPCLK2Freq>
 800754c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007550:	e003      	b.n	800755a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007552:	f7ff fb3f 	bl	8006bd4 <HAL_RCC_GetPCLK1Freq>
 8007556:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800755a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007564:	f040 810c 	bne.w	8007780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800756c:	2200      	movs	r2, #0
 800756e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007572:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800757a:	4622      	mov	r2, r4
 800757c:	462b      	mov	r3, r5
 800757e:	1891      	adds	r1, r2, r2
 8007580:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007582:	415b      	adcs	r3, r3
 8007584:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800758a:	4621      	mov	r1, r4
 800758c:	eb12 0801 	adds.w	r8, r2, r1
 8007590:	4629      	mov	r1, r5
 8007592:	eb43 0901 	adc.w	r9, r3, r1
 8007596:	f04f 0200 	mov.w	r2, #0
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075aa:	4690      	mov	r8, r2
 80075ac:	4699      	mov	r9, r3
 80075ae:	4623      	mov	r3, r4
 80075b0:	eb18 0303 	adds.w	r3, r8, r3
 80075b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075b8:	462b      	mov	r3, r5
 80075ba:	eb49 0303 	adc.w	r3, r9, r3
 80075be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80075d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075d6:	460b      	mov	r3, r1
 80075d8:	18db      	adds	r3, r3, r3
 80075da:	653b      	str	r3, [r7, #80]	@ 0x50
 80075dc:	4613      	mov	r3, r2
 80075de:	eb42 0303 	adc.w	r3, r2, r3
 80075e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80075e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075ec:	f7f9 fb54 	bl	8000c98 <__aeabi_uldivmod>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4b61      	ldr	r3, [pc, #388]	@ (800777c <UART_SetConfig+0x2d4>)
 80075f6:	fba3 2302 	umull	r2, r3, r3, r2
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	011c      	lsls	r4, r3, #4
 80075fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007602:	2200      	movs	r2, #0
 8007604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007608:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800760c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007610:	4642      	mov	r2, r8
 8007612:	464b      	mov	r3, r9
 8007614:	1891      	adds	r1, r2, r2
 8007616:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007618:	415b      	adcs	r3, r3
 800761a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800761c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007620:	4641      	mov	r1, r8
 8007622:	eb12 0a01 	adds.w	sl, r2, r1
 8007626:	4649      	mov	r1, r9
 8007628:	eb43 0b01 	adc.w	fp, r3, r1
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800763c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007640:	4692      	mov	sl, r2
 8007642:	469b      	mov	fp, r3
 8007644:	4643      	mov	r3, r8
 8007646:	eb1a 0303 	adds.w	r3, sl, r3
 800764a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800764e:	464b      	mov	r3, r9
 8007650:	eb4b 0303 	adc.w	r3, fp, r3
 8007654:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007664:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800766c:	460b      	mov	r3, r1
 800766e:	18db      	adds	r3, r3, r3
 8007670:	643b      	str	r3, [r7, #64]	@ 0x40
 8007672:	4613      	mov	r3, r2
 8007674:	eb42 0303 	adc.w	r3, r2, r3
 8007678:	647b      	str	r3, [r7, #68]	@ 0x44
 800767a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800767e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007682:	f7f9 fb09 	bl	8000c98 <__aeabi_uldivmod>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4611      	mov	r1, r2
 800768c:	4b3b      	ldr	r3, [pc, #236]	@ (800777c <UART_SetConfig+0x2d4>)
 800768e:	fba3 2301 	umull	r2, r3, r3, r1
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	2264      	movs	r2, #100	@ 0x64
 8007696:	fb02 f303 	mul.w	r3, r2, r3
 800769a:	1acb      	subs	r3, r1, r3
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80076a2:	4b36      	ldr	r3, [pc, #216]	@ (800777c <UART_SetConfig+0x2d4>)
 80076a4:	fba3 2302 	umull	r2, r3, r3, r2
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80076b0:	441c      	add	r4, r3
 80076b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80076c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	1891      	adds	r1, r2, r2
 80076ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076cc:	415b      	adcs	r3, r3
 80076ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076d4:	4641      	mov	r1, r8
 80076d6:	1851      	adds	r1, r2, r1
 80076d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80076da:	4649      	mov	r1, r9
 80076dc:	414b      	adcs	r3, r1
 80076de:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076ec:	4659      	mov	r1, fp
 80076ee:	00cb      	lsls	r3, r1, #3
 80076f0:	4651      	mov	r1, sl
 80076f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076f6:	4651      	mov	r1, sl
 80076f8:	00ca      	lsls	r2, r1, #3
 80076fa:	4610      	mov	r0, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	4642      	mov	r2, r8
 8007702:	189b      	adds	r3, r3, r2
 8007704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007708:	464b      	mov	r3, r9
 800770a:	460a      	mov	r2, r1
 800770c:	eb42 0303 	adc.w	r3, r2, r3
 8007710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007720:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007728:	460b      	mov	r3, r1
 800772a:	18db      	adds	r3, r3, r3
 800772c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800772e:	4613      	mov	r3, r2
 8007730:	eb42 0303 	adc.w	r3, r2, r3
 8007734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800773a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800773e:	f7f9 faab 	bl	8000c98 <__aeabi_uldivmod>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <UART_SetConfig+0x2d4>)
 8007748:	fba3 1302 	umull	r1, r3, r3, r2
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	2164      	movs	r1, #100	@ 0x64
 8007750:	fb01 f303 	mul.w	r3, r1, r3
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	3332      	adds	r3, #50	@ 0x32
 800775a:	4a08      	ldr	r2, [pc, #32]	@ (800777c <UART_SetConfig+0x2d4>)
 800775c:	fba2 2303 	umull	r2, r3, r2, r3
 8007760:	095b      	lsrs	r3, r3, #5
 8007762:	f003 0207 	and.w	r2, r3, #7
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4422      	add	r2, r4
 800776e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007770:	e106      	b.n	8007980 <UART_SetConfig+0x4d8>
 8007772:	bf00      	nop
 8007774:	40011000 	.word	0x40011000
 8007778:	40011400 	.word	0x40011400
 800777c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007784:	2200      	movs	r2, #0
 8007786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800778a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800778e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007792:	4642      	mov	r2, r8
 8007794:	464b      	mov	r3, r9
 8007796:	1891      	adds	r1, r2, r2
 8007798:	6239      	str	r1, [r7, #32]
 800779a:	415b      	adcs	r3, r3
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
 800779e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077a2:	4641      	mov	r1, r8
 80077a4:	1854      	adds	r4, r2, r1
 80077a6:	4649      	mov	r1, r9
 80077a8:	eb43 0501 	adc.w	r5, r3, r1
 80077ac:	f04f 0200 	mov.w	r2, #0
 80077b0:	f04f 0300 	mov.w	r3, #0
 80077b4:	00eb      	lsls	r3, r5, #3
 80077b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077ba:	00e2      	lsls	r2, r4, #3
 80077bc:	4614      	mov	r4, r2
 80077be:	461d      	mov	r5, r3
 80077c0:	4643      	mov	r3, r8
 80077c2:	18e3      	adds	r3, r4, r3
 80077c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077c8:	464b      	mov	r3, r9
 80077ca:	eb45 0303 	adc.w	r3, r5, r3
 80077ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077ee:	4629      	mov	r1, r5
 80077f0:	008b      	lsls	r3, r1, #2
 80077f2:	4621      	mov	r1, r4
 80077f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077f8:	4621      	mov	r1, r4
 80077fa:	008a      	lsls	r2, r1, #2
 80077fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007800:	f7f9 fa4a 	bl	8000c98 <__aeabi_uldivmod>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4b60      	ldr	r3, [pc, #384]	@ (800798c <UART_SetConfig+0x4e4>)
 800780a:	fba3 2302 	umull	r2, r3, r3, r2
 800780e:	095b      	lsrs	r3, r3, #5
 8007810:	011c      	lsls	r4, r3, #4
 8007812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007816:	2200      	movs	r2, #0
 8007818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800781c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007824:	4642      	mov	r2, r8
 8007826:	464b      	mov	r3, r9
 8007828:	1891      	adds	r1, r2, r2
 800782a:	61b9      	str	r1, [r7, #24]
 800782c:	415b      	adcs	r3, r3
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007834:	4641      	mov	r1, r8
 8007836:	1851      	adds	r1, r2, r1
 8007838:	6139      	str	r1, [r7, #16]
 800783a:	4649      	mov	r1, r9
 800783c:	414b      	adcs	r3, r1
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800784c:	4659      	mov	r1, fp
 800784e:	00cb      	lsls	r3, r1, #3
 8007850:	4651      	mov	r1, sl
 8007852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007856:	4651      	mov	r1, sl
 8007858:	00ca      	lsls	r2, r1, #3
 800785a:	4610      	mov	r0, r2
 800785c:	4619      	mov	r1, r3
 800785e:	4603      	mov	r3, r0
 8007860:	4642      	mov	r2, r8
 8007862:	189b      	adds	r3, r3, r2
 8007864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007868:	464b      	mov	r3, r9
 800786a:	460a      	mov	r2, r1
 800786c:	eb42 0303 	adc.w	r3, r2, r3
 8007870:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800787e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800788c:	4649      	mov	r1, r9
 800788e:	008b      	lsls	r3, r1, #2
 8007890:	4641      	mov	r1, r8
 8007892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007896:	4641      	mov	r1, r8
 8007898:	008a      	lsls	r2, r1, #2
 800789a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800789e:	f7f9 f9fb 	bl	8000c98 <__aeabi_uldivmod>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4611      	mov	r1, r2
 80078a8:	4b38      	ldr	r3, [pc, #224]	@ (800798c <UART_SetConfig+0x4e4>)
 80078aa:	fba3 2301 	umull	r2, r3, r3, r1
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2264      	movs	r2, #100	@ 0x64
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	1acb      	subs	r3, r1, r3
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	3332      	adds	r3, #50	@ 0x32
 80078bc:	4a33      	ldr	r2, [pc, #204]	@ (800798c <UART_SetConfig+0x4e4>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078c8:	441c      	add	r4, r3
 80078ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ce:	2200      	movs	r2, #0
 80078d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80078d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80078d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	1891      	adds	r1, r2, r2
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	415b      	adcs	r3, r3
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078e8:	4641      	mov	r1, r8
 80078ea:	1851      	adds	r1, r2, r1
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	4649      	mov	r1, r9
 80078f0:	414b      	adcs	r3, r1
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007900:	4659      	mov	r1, fp
 8007902:	00cb      	lsls	r3, r1, #3
 8007904:	4651      	mov	r1, sl
 8007906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800790a:	4651      	mov	r1, sl
 800790c:	00ca      	lsls	r2, r1, #3
 800790e:	4610      	mov	r0, r2
 8007910:	4619      	mov	r1, r3
 8007912:	4603      	mov	r3, r0
 8007914:	4642      	mov	r2, r8
 8007916:	189b      	adds	r3, r3, r2
 8007918:	66bb      	str	r3, [r7, #104]	@ 0x68
 800791a:	464b      	mov	r3, r9
 800791c:	460a      	mov	r2, r1
 800791e:	eb42 0303 	adc.w	r3, r2, r3
 8007922:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	663b      	str	r3, [r7, #96]	@ 0x60
 800792e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800793c:	4649      	mov	r1, r9
 800793e:	008b      	lsls	r3, r1, #2
 8007940:	4641      	mov	r1, r8
 8007942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007946:	4641      	mov	r1, r8
 8007948:	008a      	lsls	r2, r1, #2
 800794a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800794e:	f7f9 f9a3 	bl	8000c98 <__aeabi_uldivmod>
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <UART_SetConfig+0x4e4>)
 8007958:	fba3 1302 	umull	r1, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	2164      	movs	r1, #100	@ 0x64
 8007960:	fb01 f303 	mul.w	r3, r1, r3
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	3332      	adds	r3, #50	@ 0x32
 800796a:	4a08      	ldr	r2, [pc, #32]	@ (800798c <UART_SetConfig+0x4e4>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	f003 020f 	and.w	r2, r3, #15
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4422      	add	r2, r4
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007986:	46bd      	mov	sp, r7
 8007988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800798c:	51eb851f 	.word	0x51eb851f

08007990 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6892      	ldr	r2, [r2, #8]
 80079ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6852      	ldr	r2, [r2, #4]
 80079f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d103      	bne.n	8007a0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	1e5a      	subs	r2, r3, #1
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a36:	4b4f      	ldr	r3, [pc, #316]	@ (8007b74 <xTaskIncrementTick+0x148>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f040 8090 	bne.w	8007b60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a40:	4b4d      	ldr	r3, [pc, #308]	@ (8007b78 <xTaskIncrementTick+0x14c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a48:	4a4b      	ldr	r2, [pc, #300]	@ (8007b78 <xTaskIncrementTick+0x14c>)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d121      	bne.n	8007a98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a54:	4b49      	ldr	r3, [pc, #292]	@ (8007b7c <xTaskIncrementTick+0x150>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00b      	beq.n	8007a76 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <xTaskIncrementTick+0x46>
 8007a76:	4b41      	ldr	r3, [pc, #260]	@ (8007b7c <xTaskIncrementTick+0x150>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	4b40      	ldr	r3, [pc, #256]	@ (8007b80 <xTaskIncrementTick+0x154>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a3e      	ldr	r2, [pc, #248]	@ (8007b7c <xTaskIncrementTick+0x150>)
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	4a3e      	ldr	r2, [pc, #248]	@ (8007b80 <xTaskIncrementTick+0x154>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b84 <xTaskIncrementTick+0x158>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	4a3c      	ldr	r2, [pc, #240]	@ (8007b84 <xTaskIncrementTick+0x158>)
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	f000 f8e2 	bl	8007c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a98:	4b3b      	ldr	r3, [pc, #236]	@ (8007b88 <xTaskIncrementTick+0x15c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d349      	bcc.n	8007b36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aa2:	4b36      	ldr	r3, [pc, #216]	@ (8007b7c <xTaskIncrementTick+0x150>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aac:	4b36      	ldr	r3, [pc, #216]	@ (8007b88 <xTaskIncrementTick+0x15c>)
 8007aae:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab2:	601a      	str	r2, [r3, #0]
					break;
 8007ab4:	e03f      	b.n	8007b36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab6:	4b31      	ldr	r3, [pc, #196]	@ (8007b7c <xTaskIncrementTick+0x150>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d203      	bcs.n	8007ad6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ace:	4a2e      	ldr	r2, [pc, #184]	@ (8007b88 <xTaskIncrementTick+0x15c>)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ad4:	e02f      	b.n	8007b36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff ff7c 	bl	80079d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3318      	adds	r3, #24
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff ff73 	bl	80079d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af6:	4b25      	ldr	r3, [pc, #148]	@ (8007b8c <xTaskIncrementTick+0x160>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d903      	bls.n	8007b06 <xTaskIncrementTick+0xda>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b02:	4a22      	ldr	r2, [pc, #136]	@ (8007b8c <xTaskIncrementTick+0x160>)
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4a1f      	ldr	r2, [pc, #124]	@ (8007b90 <xTaskIncrementTick+0x164>)
 8007b14:	441a      	add	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7ff ff37 	bl	8007990 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b26:	4b1b      	ldr	r3, [pc, #108]	@ (8007b94 <xTaskIncrementTick+0x168>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d3b8      	bcc.n	8007aa2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b34:	e7b5      	b.n	8007aa2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b36:	4b17      	ldr	r3, [pc, #92]	@ (8007b94 <xTaskIncrementTick+0x168>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3c:	4914      	ldr	r1, [pc, #80]	@ (8007b90 <xTaskIncrementTick+0x164>)
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d901      	bls.n	8007b52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b52:	4b11      	ldr	r3, [pc, #68]	@ (8007b98 <xTaskIncrementTick+0x16c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d007      	beq.n	8007b6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	617b      	str	r3, [r7, #20]
 8007b5e:	e004      	b.n	8007b6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b60:	4b0e      	ldr	r3, [pc, #56]	@ (8007b9c <xTaskIncrementTick+0x170>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3301      	adds	r3, #1
 8007b66:	4a0d      	ldr	r2, [pc, #52]	@ (8007b9c <xTaskIncrementTick+0x170>)
 8007b68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b6a:	697b      	ldr	r3, [r7, #20]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	200008f8 	.word	0x200008f8
 8007b78:	200008dc 	.word	0x200008dc
 8007b7c:	200008d4 	.word	0x200008d4
 8007b80:	200008d8 	.word	0x200008d8
 8007b84:	200008f0 	.word	0x200008f0
 8007b88:	200008f4 	.word	0x200008f4
 8007b8c:	200008e0 	.word	0x200008e0
 8007b90:	20000474 	.word	0x20000474
 8007b94:	20000470 	.word	0x20000470
 8007b98:	200008ec 	.word	0x200008ec
 8007b9c:	200008e8 	.word	0x200008e8

08007ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ba6:	4b28      	ldr	r3, [pc, #160]	@ (8007c48 <vTaskSwitchContext+0xa8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bae:	4b27      	ldr	r3, [pc, #156]	@ (8007c4c <vTaskSwitchContext+0xac>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bb4:	e042      	b.n	8007c3c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007bb6:	4b25      	ldr	r3, [pc, #148]	@ (8007c4c <vTaskSwitchContext+0xac>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bbc:	4b24      	ldr	r3, [pc, #144]	@ (8007c50 <vTaskSwitchContext+0xb0>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e011      	b.n	8007be8 <vTaskSwitchContext+0x48>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <vTaskSwitchContext+0x42>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	607b      	str	r3, [r7, #4]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <vTaskSwitchContext+0x3e>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	491a      	ldr	r1, [pc, #104]	@ (8007c54 <vTaskSwitchContext+0xb4>)
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0e3      	beq.n	8007bc4 <vTaskSwitchContext+0x24>
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4a13      	ldr	r2, [pc, #76]	@ (8007c54 <vTaskSwitchContext+0xb4>)
 8007c08:	4413      	add	r3, r2
 8007c0a:	60bb      	str	r3, [r7, #8]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	605a      	str	r2, [r3, #4]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	685a      	ldr	r2, [r3, #4]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d104      	bne.n	8007c2c <vTaskSwitchContext+0x8c>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	605a      	str	r2, [r3, #4]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	4a09      	ldr	r2, [pc, #36]	@ (8007c58 <vTaskSwitchContext+0xb8>)
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	4a06      	ldr	r2, [pc, #24]	@ (8007c50 <vTaskSwitchContext+0xb0>)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6013      	str	r3, [r2, #0]
}
 8007c3c:	bf00      	nop
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	200008f8 	.word	0x200008f8
 8007c4c:	200008ec 	.word	0x200008ec
 8007c50:	200008e0 	.word	0x200008e0
 8007c54:	20000474 	.word	0x20000474
 8007c58:	20000470 	.word	0x20000470

08007c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c62:	4b0c      	ldr	r3, [pc, #48]	@ (8007c94 <prvResetNextTaskUnblockTime+0x38>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c98 <prvResetNextTaskUnblockTime+0x3c>)
 8007c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c74:	e008      	b.n	8007c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c76:	4b07      	ldr	r3, [pc, #28]	@ (8007c94 <prvResetNextTaskUnblockTime+0x38>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	4a04      	ldr	r2, [pc, #16]	@ (8007c98 <prvResetNextTaskUnblockTime+0x3c>)
 8007c86:	6013      	str	r3, [r2, #0]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	200008d4 	.word	0x200008d4
 8007c98:	200008f4 	.word	0x200008f4

08007c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd0 <xTaskGetSchedulerState+0x34>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007caa:	2301      	movs	r3, #1
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	e008      	b.n	8007cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cb0:	4b08      	ldr	r3, [pc, #32]	@ (8007cd4 <xTaskGetSchedulerState+0x38>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	607b      	str	r3, [r7, #4]
 8007cbc:	e001      	b.n	8007cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cc2:	687b      	ldr	r3, [r7, #4]
	}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	200008e4 	.word	0x200008e4
 8007cd4:	200008f8 	.word	0x200008f8
	...

08007ce0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ce0:	4b07      	ldr	r3, [pc, #28]	@ (8007d00 <pxCurrentTCBConst2>)
 8007ce2:	6819      	ldr	r1, [r3, #0]
 8007ce4:	6808      	ldr	r0, [r1, #0]
 8007ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	f380 8809 	msr	PSP, r0
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f04f 0000 	mov.w	r0, #0
 8007cf6:	f380 8811 	msr	BASEPRI, r0
 8007cfa:	4770      	bx	lr
 8007cfc:	f3af 8000 	nop.w

08007d00 <pxCurrentTCBConst2>:
 8007d00:	20000470 	.word	0x20000470
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop
	...

08007d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d10:	f3ef 8009 	mrs	r0, PSP
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	4b15      	ldr	r3, [pc, #84]	@ (8007d70 <pxCurrentTCBConst>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	f01e 0f10 	tst.w	lr, #16
 8007d20:	bf08      	it	eq
 8007d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2a:	6010      	str	r0, [r2, #0]
 8007d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d34:	f380 8811 	msr	BASEPRI, r0
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f7ff ff2e 	bl	8007ba0 <vTaskSwitchContext>
 8007d44:	f04f 0000 	mov.w	r0, #0
 8007d48:	f380 8811 	msr	BASEPRI, r0
 8007d4c:	bc09      	pop	{r0, r3}
 8007d4e:	6819      	ldr	r1, [r3, #0]
 8007d50:	6808      	ldr	r0, [r1, #0]
 8007d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d56:	f01e 0f10 	tst.w	lr, #16
 8007d5a:	bf08      	it	eq
 8007d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d60:	f380 8809 	msr	PSP, r0
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	f3af 8000 	nop.w

08007d70 <pxCurrentTCBConst>:
 8007d70:	20000470 	.word	0x20000470
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop

08007d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	607b      	str	r3, [r7, #4]
}
 8007d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d92:	f7ff fe4b 	bl	8007a2c <xTaskIncrementTick>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d9c:	4b06      	ldr	r3, [pc, #24]	@ (8007db8 <xPortSysTickHandler+0x40>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	2300      	movs	r3, #0
 8007da6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <__cvt>:
 8007dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	ec57 6b10 	vmov	r6, r7, d0
 8007dc4:	2f00      	cmp	r7, #0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4619      	mov	r1, r3
 8007dca:	463b      	mov	r3, r7
 8007dcc:	bfbb      	ittet	lt
 8007dce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dd2:	461f      	movlt	r7, r3
 8007dd4:	2300      	movge	r3, #0
 8007dd6:	232d      	movlt	r3, #45	@ 0x2d
 8007dd8:	700b      	strb	r3, [r1, #0]
 8007dda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ddc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007de0:	4691      	mov	r9, r2
 8007de2:	f023 0820 	bic.w	r8, r3, #32
 8007de6:	bfbc      	itt	lt
 8007de8:	4632      	movlt	r2, r6
 8007dea:	4616      	movlt	r6, r2
 8007dec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007df0:	d005      	beq.n	8007dfe <__cvt+0x42>
 8007df2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007df6:	d100      	bne.n	8007dfa <__cvt+0x3e>
 8007df8:	3401      	adds	r4, #1
 8007dfa:	2102      	movs	r1, #2
 8007dfc:	e000      	b.n	8007e00 <__cvt+0x44>
 8007dfe:	2103      	movs	r1, #3
 8007e00:	ab03      	add	r3, sp, #12
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	ab02      	add	r3, sp, #8
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	ec47 6b10 	vmov	d0, r6, r7
 8007e0c:	4653      	mov	r3, sl
 8007e0e:	4622      	mov	r2, r4
 8007e10:	f001 fa6e 	bl	80092f0 <_dtoa_r>
 8007e14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e18:	4605      	mov	r5, r0
 8007e1a:	d119      	bne.n	8007e50 <__cvt+0x94>
 8007e1c:	f019 0f01 	tst.w	r9, #1
 8007e20:	d00e      	beq.n	8007e40 <__cvt+0x84>
 8007e22:	eb00 0904 	add.w	r9, r0, r4
 8007e26:	2200      	movs	r2, #0
 8007e28:	2300      	movs	r3, #0
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	f7f8 fe53 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e32:	b108      	cbz	r0, 8007e38 <__cvt+0x7c>
 8007e34:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e38:	2230      	movs	r2, #48	@ 0x30
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	454b      	cmp	r3, r9
 8007e3e:	d31e      	bcc.n	8007e7e <__cvt+0xc2>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e44:	1b5b      	subs	r3, r3, r5
 8007e46:	4628      	mov	r0, r5
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	b004      	add	sp, #16
 8007e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e54:	eb00 0904 	add.w	r9, r0, r4
 8007e58:	d1e5      	bne.n	8007e26 <__cvt+0x6a>
 8007e5a:	7803      	ldrb	r3, [r0, #0]
 8007e5c:	2b30      	cmp	r3, #48	@ 0x30
 8007e5e:	d10a      	bne.n	8007e76 <__cvt+0xba>
 8007e60:	2200      	movs	r2, #0
 8007e62:	2300      	movs	r3, #0
 8007e64:	4630      	mov	r0, r6
 8007e66:	4639      	mov	r1, r7
 8007e68:	f7f8 fe36 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e6c:	b918      	cbnz	r0, 8007e76 <__cvt+0xba>
 8007e6e:	f1c4 0401 	rsb	r4, r4, #1
 8007e72:	f8ca 4000 	str.w	r4, [sl]
 8007e76:	f8da 3000 	ldr.w	r3, [sl]
 8007e7a:	4499      	add	r9, r3
 8007e7c:	e7d3      	b.n	8007e26 <__cvt+0x6a>
 8007e7e:	1c59      	adds	r1, r3, #1
 8007e80:	9103      	str	r1, [sp, #12]
 8007e82:	701a      	strb	r2, [r3, #0]
 8007e84:	e7d9      	b.n	8007e3a <__cvt+0x7e>

08007e86 <__exponent>:
 8007e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	bfba      	itte	lt
 8007e8c:	4249      	neglt	r1, r1
 8007e8e:	232d      	movlt	r3, #45	@ 0x2d
 8007e90:	232b      	movge	r3, #43	@ 0x2b
 8007e92:	2909      	cmp	r1, #9
 8007e94:	7002      	strb	r2, [r0, #0]
 8007e96:	7043      	strb	r3, [r0, #1]
 8007e98:	dd29      	ble.n	8007eee <__exponent+0x68>
 8007e9a:	f10d 0307 	add.w	r3, sp, #7
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	270a      	movs	r7, #10
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ea8:	fb07 1416 	mls	r4, r7, r6, r1
 8007eac:	3430      	adds	r4, #48	@ 0x30
 8007eae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	2c63      	cmp	r4, #99	@ 0x63
 8007eb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007eba:	4631      	mov	r1, r6
 8007ebc:	dcf1      	bgt.n	8007ea2 <__exponent+0x1c>
 8007ebe:	3130      	adds	r1, #48	@ 0x30
 8007ec0:	1e94      	subs	r4, r2, #2
 8007ec2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ec6:	1c41      	adds	r1, r0, #1
 8007ec8:	4623      	mov	r3, r4
 8007eca:	42ab      	cmp	r3, r5
 8007ecc:	d30a      	bcc.n	8007ee4 <__exponent+0x5e>
 8007ece:	f10d 0309 	add.w	r3, sp, #9
 8007ed2:	1a9b      	subs	r3, r3, r2
 8007ed4:	42ac      	cmp	r4, r5
 8007ed6:	bf88      	it	hi
 8007ed8:	2300      	movhi	r3, #0
 8007eda:	3302      	adds	r3, #2
 8007edc:	4403      	add	r3, r0
 8007ede:	1a18      	subs	r0, r3, r0
 8007ee0:	b003      	add	sp, #12
 8007ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ee8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007eec:	e7ed      	b.n	8007eca <__exponent+0x44>
 8007eee:	2330      	movs	r3, #48	@ 0x30
 8007ef0:	3130      	adds	r1, #48	@ 0x30
 8007ef2:	7083      	strb	r3, [r0, #2]
 8007ef4:	70c1      	strb	r1, [r0, #3]
 8007ef6:	1d03      	adds	r3, r0, #4
 8007ef8:	e7f1      	b.n	8007ede <__exponent+0x58>
	...

08007efc <_printf_float>:
 8007efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	b08d      	sub	sp, #52	@ 0x34
 8007f02:	460c      	mov	r4, r1
 8007f04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f08:	4616      	mov	r6, r2
 8007f0a:	461f      	mov	r7, r3
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	f001 f8d9 	bl	80090c4 <_localeconv_r>
 8007f12:	6803      	ldr	r3, [r0, #0]
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7f8 f9b2 	bl	8000280 <strlen>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f20:	f8d8 3000 	ldr.w	r3, [r8]
 8007f24:	9005      	str	r0, [sp, #20]
 8007f26:	3307      	adds	r3, #7
 8007f28:	f023 0307 	bic.w	r3, r3, #7
 8007f2c:	f103 0208 	add.w	r2, r3, #8
 8007f30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f34:	f8d4 b000 	ldr.w	fp, [r4]
 8007f38:	f8c8 2000 	str.w	r2, [r8]
 8007f3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f44:	9307      	str	r3, [sp, #28]
 8007f46:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f52:	4b9c      	ldr	r3, [pc, #624]	@ (80081c4 <_printf_float+0x2c8>)
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295
 8007f58:	f7f8 fdf0 	bl	8000b3c <__aeabi_dcmpun>
 8007f5c:	bb70      	cbnz	r0, 8007fbc <_printf_float+0xc0>
 8007f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f62:	4b98      	ldr	r3, [pc, #608]	@ (80081c4 <_printf_float+0x2c8>)
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	f7f8 fdca 	bl	8000b00 <__aeabi_dcmple>
 8007f6c:	bb30      	cbnz	r0, 8007fbc <_printf_float+0xc0>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2300      	movs	r3, #0
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 fdb9 	bl	8000aec <__aeabi_dcmplt>
 8007f7a:	b110      	cbz	r0, 8007f82 <_printf_float+0x86>
 8007f7c:	232d      	movs	r3, #45	@ 0x2d
 8007f7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f82:	4a91      	ldr	r2, [pc, #580]	@ (80081c8 <_printf_float+0x2cc>)
 8007f84:	4b91      	ldr	r3, [pc, #580]	@ (80081cc <_printf_float+0x2d0>)
 8007f86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f8a:	bf8c      	ite	hi
 8007f8c:	4690      	movhi	r8, r2
 8007f8e:	4698      	movls	r8, r3
 8007f90:	2303      	movs	r3, #3
 8007f92:	6123      	str	r3, [r4, #16]
 8007f94:	f02b 0304 	bic.w	r3, fp, #4
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	f04f 0900 	mov.w	r9, #0
 8007f9e:	9700      	str	r7, [sp, #0]
 8007fa0:	4633      	mov	r3, r6
 8007fa2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 f9d2 	bl	8008350 <_printf_common>
 8007fac:	3001      	adds	r0, #1
 8007fae:	f040 808d 	bne.w	80080cc <_printf_float+0x1d0>
 8007fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb6:	b00d      	add	sp, #52	@ 0x34
 8007fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	f7f8 fdba 	bl	8000b3c <__aeabi_dcmpun>
 8007fc8:	b140      	cbz	r0, 8007fdc <_printf_float+0xe0>
 8007fca:	464b      	mov	r3, r9
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bfbc      	itt	lt
 8007fd0:	232d      	movlt	r3, #45	@ 0x2d
 8007fd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80081d0 <_printf_float+0x2d4>)
 8007fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80081d4 <_printf_float+0x2d8>)
 8007fda:	e7d4      	b.n	8007f86 <_printf_float+0x8a>
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007fe2:	9206      	str	r2, [sp, #24]
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	d13b      	bne.n	8008060 <_printf_float+0x164>
 8007fe8:	2306      	movs	r3, #6
 8007fea:	6063      	str	r3, [r4, #4]
 8007fec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6022      	str	r2, [r4, #0]
 8007ff4:	9303      	str	r3, [sp, #12]
 8007ff6:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ff8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007ffc:	ab09      	add	r3, sp, #36	@ 0x24
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	6861      	ldr	r1, [r4, #4]
 8008002:	ec49 8b10 	vmov	d0, r8, r9
 8008006:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800800a:	4628      	mov	r0, r5
 800800c:	f7ff fed6 	bl	8007dbc <__cvt>
 8008010:	9b06      	ldr	r3, [sp, #24]
 8008012:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008014:	2b47      	cmp	r3, #71	@ 0x47
 8008016:	4680      	mov	r8, r0
 8008018:	d129      	bne.n	800806e <_printf_float+0x172>
 800801a:	1cc8      	adds	r0, r1, #3
 800801c:	db02      	blt.n	8008024 <_printf_float+0x128>
 800801e:	6863      	ldr	r3, [r4, #4]
 8008020:	4299      	cmp	r1, r3
 8008022:	dd41      	ble.n	80080a8 <_printf_float+0x1ac>
 8008024:	f1aa 0a02 	sub.w	sl, sl, #2
 8008028:	fa5f fa8a 	uxtb.w	sl, sl
 800802c:	3901      	subs	r1, #1
 800802e:	4652      	mov	r2, sl
 8008030:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008034:	9109      	str	r1, [sp, #36]	@ 0x24
 8008036:	f7ff ff26 	bl	8007e86 <__exponent>
 800803a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800803c:	1813      	adds	r3, r2, r0
 800803e:	2a01      	cmp	r2, #1
 8008040:	4681      	mov	r9, r0
 8008042:	6123      	str	r3, [r4, #16]
 8008044:	dc02      	bgt.n	800804c <_printf_float+0x150>
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	07d2      	lsls	r2, r2, #31
 800804a:	d501      	bpl.n	8008050 <_printf_float+0x154>
 800804c:	3301      	adds	r3, #1
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0a2      	beq.n	8007f9e <_printf_float+0xa2>
 8008058:	232d      	movs	r3, #45	@ 0x2d
 800805a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800805e:	e79e      	b.n	8007f9e <_printf_float+0xa2>
 8008060:	9a06      	ldr	r2, [sp, #24]
 8008062:	2a47      	cmp	r2, #71	@ 0x47
 8008064:	d1c2      	bne.n	8007fec <_printf_float+0xf0>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1c0      	bne.n	8007fec <_printf_float+0xf0>
 800806a:	2301      	movs	r3, #1
 800806c:	e7bd      	b.n	8007fea <_printf_float+0xee>
 800806e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008072:	d9db      	bls.n	800802c <_printf_float+0x130>
 8008074:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008078:	d118      	bne.n	80080ac <_printf_float+0x1b0>
 800807a:	2900      	cmp	r1, #0
 800807c:	6863      	ldr	r3, [r4, #4]
 800807e:	dd0b      	ble.n	8008098 <_printf_float+0x19c>
 8008080:	6121      	str	r1, [r4, #16]
 8008082:	b913      	cbnz	r3, 800808a <_printf_float+0x18e>
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	07d0      	lsls	r0, r2, #31
 8008088:	d502      	bpl.n	8008090 <_printf_float+0x194>
 800808a:	3301      	adds	r3, #1
 800808c:	440b      	add	r3, r1
 800808e:	6123      	str	r3, [r4, #16]
 8008090:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008092:	f04f 0900 	mov.w	r9, #0
 8008096:	e7db      	b.n	8008050 <_printf_float+0x154>
 8008098:	b913      	cbnz	r3, 80080a0 <_printf_float+0x1a4>
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	07d2      	lsls	r2, r2, #31
 800809e:	d501      	bpl.n	80080a4 <_printf_float+0x1a8>
 80080a0:	3302      	adds	r3, #2
 80080a2:	e7f4      	b.n	800808e <_printf_float+0x192>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e7f2      	b.n	800808e <_printf_float+0x192>
 80080a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ae:	4299      	cmp	r1, r3
 80080b0:	db05      	blt.n	80080be <_printf_float+0x1c2>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	6121      	str	r1, [r4, #16]
 80080b6:	07d8      	lsls	r0, r3, #31
 80080b8:	d5ea      	bpl.n	8008090 <_printf_float+0x194>
 80080ba:	1c4b      	adds	r3, r1, #1
 80080bc:	e7e7      	b.n	800808e <_printf_float+0x192>
 80080be:	2900      	cmp	r1, #0
 80080c0:	bfd4      	ite	le
 80080c2:	f1c1 0202 	rsble	r2, r1, #2
 80080c6:	2201      	movgt	r2, #1
 80080c8:	4413      	add	r3, r2
 80080ca:	e7e0      	b.n	800808e <_printf_float+0x192>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	055a      	lsls	r2, r3, #21
 80080d0:	d407      	bmi.n	80080e2 <_printf_float+0x1e6>
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	4642      	mov	r2, r8
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	d12b      	bne.n	8008138 <_printf_float+0x23c>
 80080e0:	e767      	b.n	8007fb2 <_printf_float+0xb6>
 80080e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80080e6:	f240 80dd 	bls.w	80082a4 <_printf_float+0x3a8>
 80080ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080ee:	2200      	movs	r2, #0
 80080f0:	2300      	movs	r3, #0
 80080f2:	f7f8 fcf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d033      	beq.n	8008162 <_printf_float+0x266>
 80080fa:	4a37      	ldr	r2, [pc, #220]	@ (80081d8 <_printf_float+0x2dc>)
 80080fc:	2301      	movs	r3, #1
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	f43f af54 	beq.w	8007fb2 <_printf_float+0xb6>
 800810a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800810e:	4543      	cmp	r3, r8
 8008110:	db02      	blt.n	8008118 <_printf_float+0x21c>
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	07d8      	lsls	r0, r3, #31
 8008116:	d50f      	bpl.n	8008138 <_printf_float+0x23c>
 8008118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f af45 	beq.w	8007fb2 <_printf_float+0xb6>
 8008128:	f04f 0900 	mov.w	r9, #0
 800812c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008130:	f104 0a1a 	add.w	sl, r4, #26
 8008134:	45c8      	cmp	r8, r9
 8008136:	dc09      	bgt.n	800814c <_printf_float+0x250>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	079b      	lsls	r3, r3, #30
 800813c:	f100 8103 	bmi.w	8008346 <_printf_float+0x44a>
 8008140:	68e0      	ldr	r0, [r4, #12]
 8008142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008144:	4298      	cmp	r0, r3
 8008146:	bfb8      	it	lt
 8008148:	4618      	movlt	r0, r3
 800814a:	e734      	b.n	8007fb6 <_printf_float+0xba>
 800814c:	2301      	movs	r3, #1
 800814e:	4652      	mov	r2, sl
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f af2b 	beq.w	8007fb2 <_printf_float+0xb6>
 800815c:	f109 0901 	add.w	r9, r9, #1
 8008160:	e7e8      	b.n	8008134 <_printf_float+0x238>
 8008162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	dc39      	bgt.n	80081dc <_printf_float+0x2e0>
 8008168:	4a1b      	ldr	r2, [pc, #108]	@ (80081d8 <_printf_float+0x2dc>)
 800816a:	2301      	movs	r3, #1
 800816c:	4631      	mov	r1, r6
 800816e:	4628      	mov	r0, r5
 8008170:	47b8      	blx	r7
 8008172:	3001      	adds	r0, #1
 8008174:	f43f af1d 	beq.w	8007fb2 <_printf_float+0xb6>
 8008178:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800817c:	ea59 0303 	orrs.w	r3, r9, r3
 8008180:	d102      	bne.n	8008188 <_printf_float+0x28c>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	07d9      	lsls	r1, r3, #31
 8008186:	d5d7      	bpl.n	8008138 <_printf_float+0x23c>
 8008188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	f43f af0d 	beq.w	8007fb2 <_printf_float+0xb6>
 8008198:	f04f 0a00 	mov.w	sl, #0
 800819c:	f104 0b1a 	add.w	fp, r4, #26
 80081a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a2:	425b      	negs	r3, r3
 80081a4:	4553      	cmp	r3, sl
 80081a6:	dc01      	bgt.n	80081ac <_printf_float+0x2b0>
 80081a8:	464b      	mov	r3, r9
 80081aa:	e793      	b.n	80080d4 <_printf_float+0x1d8>
 80081ac:	2301      	movs	r3, #1
 80081ae:	465a      	mov	r2, fp
 80081b0:	4631      	mov	r1, r6
 80081b2:	4628      	mov	r0, r5
 80081b4:	47b8      	blx	r7
 80081b6:	3001      	adds	r0, #1
 80081b8:	f43f aefb 	beq.w	8007fb2 <_printf_float+0xb6>
 80081bc:	f10a 0a01 	add.w	sl, sl, #1
 80081c0:	e7ee      	b.n	80081a0 <_printf_float+0x2a4>
 80081c2:	bf00      	nop
 80081c4:	7fefffff 	.word	0x7fefffff
 80081c8:	0800d8f8 	.word	0x0800d8f8
 80081cc:	0800d8f4 	.word	0x0800d8f4
 80081d0:	0800d900 	.word	0x0800d900
 80081d4:	0800d8fc 	.word	0x0800d8fc
 80081d8:	0800d904 	.word	0x0800d904
 80081dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081e2:	4553      	cmp	r3, sl
 80081e4:	bfa8      	it	ge
 80081e6:	4653      	movge	r3, sl
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	4699      	mov	r9, r3
 80081ec:	dc36      	bgt.n	800825c <_printf_float+0x360>
 80081ee:	f04f 0b00 	mov.w	fp, #0
 80081f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081f6:	f104 021a 	add.w	r2, r4, #26
 80081fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081fc:	9306      	str	r3, [sp, #24]
 80081fe:	eba3 0309 	sub.w	r3, r3, r9
 8008202:	455b      	cmp	r3, fp
 8008204:	dc31      	bgt.n	800826a <_printf_float+0x36e>
 8008206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008208:	459a      	cmp	sl, r3
 800820a:	dc3a      	bgt.n	8008282 <_printf_float+0x386>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	07da      	lsls	r2, r3, #31
 8008210:	d437      	bmi.n	8008282 <_printf_float+0x386>
 8008212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008214:	ebaa 0903 	sub.w	r9, sl, r3
 8008218:	9b06      	ldr	r3, [sp, #24]
 800821a:	ebaa 0303 	sub.w	r3, sl, r3
 800821e:	4599      	cmp	r9, r3
 8008220:	bfa8      	it	ge
 8008222:	4699      	movge	r9, r3
 8008224:	f1b9 0f00 	cmp.w	r9, #0
 8008228:	dc33      	bgt.n	8008292 <_printf_float+0x396>
 800822a:	f04f 0800 	mov.w	r8, #0
 800822e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008232:	f104 0b1a 	add.w	fp, r4, #26
 8008236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008238:	ebaa 0303 	sub.w	r3, sl, r3
 800823c:	eba3 0309 	sub.w	r3, r3, r9
 8008240:	4543      	cmp	r3, r8
 8008242:	f77f af79 	ble.w	8008138 <_printf_float+0x23c>
 8008246:	2301      	movs	r3, #1
 8008248:	465a      	mov	r2, fp
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	47b8      	blx	r7
 8008250:	3001      	adds	r0, #1
 8008252:	f43f aeae 	beq.w	8007fb2 <_printf_float+0xb6>
 8008256:	f108 0801 	add.w	r8, r8, #1
 800825a:	e7ec      	b.n	8008236 <_printf_float+0x33a>
 800825c:	4642      	mov	r2, r8
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	47b8      	blx	r7
 8008264:	3001      	adds	r0, #1
 8008266:	d1c2      	bne.n	80081ee <_printf_float+0x2f2>
 8008268:	e6a3      	b.n	8007fb2 <_printf_float+0xb6>
 800826a:	2301      	movs	r3, #1
 800826c:	4631      	mov	r1, r6
 800826e:	4628      	mov	r0, r5
 8008270:	9206      	str	r2, [sp, #24]
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	f43f ae9c 	beq.w	8007fb2 <_printf_float+0xb6>
 800827a:	9a06      	ldr	r2, [sp, #24]
 800827c:	f10b 0b01 	add.w	fp, fp, #1
 8008280:	e7bb      	b.n	80081fa <_printf_float+0x2fe>
 8008282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	d1c0      	bne.n	8008212 <_printf_float+0x316>
 8008290:	e68f      	b.n	8007fb2 <_printf_float+0xb6>
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	464b      	mov	r3, r9
 8008296:	4442      	add	r2, r8
 8008298:	4631      	mov	r1, r6
 800829a:	4628      	mov	r0, r5
 800829c:	47b8      	blx	r7
 800829e:	3001      	adds	r0, #1
 80082a0:	d1c3      	bne.n	800822a <_printf_float+0x32e>
 80082a2:	e686      	b.n	8007fb2 <_printf_float+0xb6>
 80082a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082a8:	f1ba 0f01 	cmp.w	sl, #1
 80082ac:	dc01      	bgt.n	80082b2 <_printf_float+0x3b6>
 80082ae:	07db      	lsls	r3, r3, #31
 80082b0:	d536      	bpl.n	8008320 <_printf_float+0x424>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4642      	mov	r2, r8
 80082b6:	4631      	mov	r1, r6
 80082b8:	4628      	mov	r0, r5
 80082ba:	47b8      	blx	r7
 80082bc:	3001      	adds	r0, #1
 80082be:	f43f ae78 	beq.w	8007fb2 <_printf_float+0xb6>
 80082c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082c6:	4631      	mov	r1, r6
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b8      	blx	r7
 80082cc:	3001      	adds	r0, #1
 80082ce:	f43f ae70 	beq.w	8007fb2 <_printf_float+0xb6>
 80082d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082d6:	2200      	movs	r2, #0
 80082d8:	2300      	movs	r3, #0
 80082da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082de:	f7f8 fbfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80082e2:	b9c0      	cbnz	r0, 8008316 <_printf_float+0x41a>
 80082e4:	4653      	mov	r3, sl
 80082e6:	f108 0201 	add.w	r2, r8, #1
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	47b8      	blx	r7
 80082f0:	3001      	adds	r0, #1
 80082f2:	d10c      	bne.n	800830e <_printf_float+0x412>
 80082f4:	e65d      	b.n	8007fb2 <_printf_float+0xb6>
 80082f6:	2301      	movs	r3, #1
 80082f8:	465a      	mov	r2, fp
 80082fa:	4631      	mov	r1, r6
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b8      	blx	r7
 8008300:	3001      	adds	r0, #1
 8008302:	f43f ae56 	beq.w	8007fb2 <_printf_float+0xb6>
 8008306:	f108 0801 	add.w	r8, r8, #1
 800830a:	45d0      	cmp	r8, sl
 800830c:	dbf3      	blt.n	80082f6 <_printf_float+0x3fa>
 800830e:	464b      	mov	r3, r9
 8008310:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008314:	e6df      	b.n	80080d6 <_printf_float+0x1da>
 8008316:	f04f 0800 	mov.w	r8, #0
 800831a:	f104 0b1a 	add.w	fp, r4, #26
 800831e:	e7f4      	b.n	800830a <_printf_float+0x40e>
 8008320:	2301      	movs	r3, #1
 8008322:	4642      	mov	r2, r8
 8008324:	e7e1      	b.n	80082ea <_printf_float+0x3ee>
 8008326:	2301      	movs	r3, #1
 8008328:	464a      	mov	r2, r9
 800832a:	4631      	mov	r1, r6
 800832c:	4628      	mov	r0, r5
 800832e:	47b8      	blx	r7
 8008330:	3001      	adds	r0, #1
 8008332:	f43f ae3e 	beq.w	8007fb2 <_printf_float+0xb6>
 8008336:	f108 0801 	add.w	r8, r8, #1
 800833a:	68e3      	ldr	r3, [r4, #12]
 800833c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800833e:	1a5b      	subs	r3, r3, r1
 8008340:	4543      	cmp	r3, r8
 8008342:	dcf0      	bgt.n	8008326 <_printf_float+0x42a>
 8008344:	e6fc      	b.n	8008140 <_printf_float+0x244>
 8008346:	f04f 0800 	mov.w	r8, #0
 800834a:	f104 0919 	add.w	r9, r4, #25
 800834e:	e7f4      	b.n	800833a <_printf_float+0x43e>

08008350 <_printf_common>:
 8008350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008354:	4616      	mov	r6, r2
 8008356:	4698      	mov	r8, r3
 8008358:	688a      	ldr	r2, [r1, #8]
 800835a:	690b      	ldr	r3, [r1, #16]
 800835c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008360:	4293      	cmp	r3, r2
 8008362:	bfb8      	it	lt
 8008364:	4613      	movlt	r3, r2
 8008366:	6033      	str	r3, [r6, #0]
 8008368:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800836c:	4607      	mov	r7, r0
 800836e:	460c      	mov	r4, r1
 8008370:	b10a      	cbz	r2, 8008376 <_printf_common+0x26>
 8008372:	3301      	adds	r3, #1
 8008374:	6033      	str	r3, [r6, #0]
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	0699      	lsls	r1, r3, #26
 800837a:	bf42      	ittt	mi
 800837c:	6833      	ldrmi	r3, [r6, #0]
 800837e:	3302      	addmi	r3, #2
 8008380:	6033      	strmi	r3, [r6, #0]
 8008382:	6825      	ldr	r5, [r4, #0]
 8008384:	f015 0506 	ands.w	r5, r5, #6
 8008388:	d106      	bne.n	8008398 <_printf_common+0x48>
 800838a:	f104 0a19 	add.w	sl, r4, #25
 800838e:	68e3      	ldr	r3, [r4, #12]
 8008390:	6832      	ldr	r2, [r6, #0]
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	42ab      	cmp	r3, r5
 8008396:	dc26      	bgt.n	80083e6 <_printf_common+0x96>
 8008398:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800839c:	6822      	ldr	r2, [r4, #0]
 800839e:	3b00      	subs	r3, #0
 80083a0:	bf18      	it	ne
 80083a2:	2301      	movne	r3, #1
 80083a4:	0692      	lsls	r2, r2, #26
 80083a6:	d42b      	bmi.n	8008400 <_printf_common+0xb0>
 80083a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083ac:	4641      	mov	r1, r8
 80083ae:	4638      	mov	r0, r7
 80083b0:	47c8      	blx	r9
 80083b2:	3001      	adds	r0, #1
 80083b4:	d01e      	beq.n	80083f4 <_printf_common+0xa4>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	6922      	ldr	r2, [r4, #16]
 80083ba:	f003 0306 	and.w	r3, r3, #6
 80083be:	2b04      	cmp	r3, #4
 80083c0:	bf02      	ittt	eq
 80083c2:	68e5      	ldreq	r5, [r4, #12]
 80083c4:	6833      	ldreq	r3, [r6, #0]
 80083c6:	1aed      	subeq	r5, r5, r3
 80083c8:	68a3      	ldr	r3, [r4, #8]
 80083ca:	bf0c      	ite	eq
 80083cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083d0:	2500      	movne	r5, #0
 80083d2:	4293      	cmp	r3, r2
 80083d4:	bfc4      	itt	gt
 80083d6:	1a9b      	subgt	r3, r3, r2
 80083d8:	18ed      	addgt	r5, r5, r3
 80083da:	2600      	movs	r6, #0
 80083dc:	341a      	adds	r4, #26
 80083de:	42b5      	cmp	r5, r6
 80083e0:	d11a      	bne.n	8008418 <_printf_common+0xc8>
 80083e2:	2000      	movs	r0, #0
 80083e4:	e008      	b.n	80083f8 <_printf_common+0xa8>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4652      	mov	r2, sl
 80083ea:	4641      	mov	r1, r8
 80083ec:	4638      	mov	r0, r7
 80083ee:	47c8      	blx	r9
 80083f0:	3001      	adds	r0, #1
 80083f2:	d103      	bne.n	80083fc <_printf_common+0xac>
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fc:	3501      	adds	r5, #1
 80083fe:	e7c6      	b.n	800838e <_printf_common+0x3e>
 8008400:	18e1      	adds	r1, r4, r3
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	2030      	movs	r0, #48	@ 0x30
 8008406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800840a:	4422      	add	r2, r4
 800840c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008414:	3302      	adds	r3, #2
 8008416:	e7c7      	b.n	80083a8 <_printf_common+0x58>
 8008418:	2301      	movs	r3, #1
 800841a:	4622      	mov	r2, r4
 800841c:	4641      	mov	r1, r8
 800841e:	4638      	mov	r0, r7
 8008420:	47c8      	blx	r9
 8008422:	3001      	adds	r0, #1
 8008424:	d0e6      	beq.n	80083f4 <_printf_common+0xa4>
 8008426:	3601      	adds	r6, #1
 8008428:	e7d9      	b.n	80083de <_printf_common+0x8e>
	...

0800842c <_printf_i>:
 800842c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	7e0f      	ldrb	r7, [r1, #24]
 8008432:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008434:	2f78      	cmp	r7, #120	@ 0x78
 8008436:	4691      	mov	r9, r2
 8008438:	4680      	mov	r8, r0
 800843a:	460c      	mov	r4, r1
 800843c:	469a      	mov	sl, r3
 800843e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008442:	d807      	bhi.n	8008454 <_printf_i+0x28>
 8008444:	2f62      	cmp	r7, #98	@ 0x62
 8008446:	d80a      	bhi.n	800845e <_printf_i+0x32>
 8008448:	2f00      	cmp	r7, #0
 800844a:	f000 80d1 	beq.w	80085f0 <_printf_i+0x1c4>
 800844e:	2f58      	cmp	r7, #88	@ 0x58
 8008450:	f000 80b8 	beq.w	80085c4 <_printf_i+0x198>
 8008454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800845c:	e03a      	b.n	80084d4 <_printf_i+0xa8>
 800845e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008462:	2b15      	cmp	r3, #21
 8008464:	d8f6      	bhi.n	8008454 <_printf_i+0x28>
 8008466:	a101      	add	r1, pc, #4	@ (adr r1, 800846c <_printf_i+0x40>)
 8008468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800846c:	080084c5 	.word	0x080084c5
 8008470:	080084d9 	.word	0x080084d9
 8008474:	08008455 	.word	0x08008455
 8008478:	08008455 	.word	0x08008455
 800847c:	08008455 	.word	0x08008455
 8008480:	08008455 	.word	0x08008455
 8008484:	080084d9 	.word	0x080084d9
 8008488:	08008455 	.word	0x08008455
 800848c:	08008455 	.word	0x08008455
 8008490:	08008455 	.word	0x08008455
 8008494:	08008455 	.word	0x08008455
 8008498:	080085d7 	.word	0x080085d7
 800849c:	08008503 	.word	0x08008503
 80084a0:	08008591 	.word	0x08008591
 80084a4:	08008455 	.word	0x08008455
 80084a8:	08008455 	.word	0x08008455
 80084ac:	080085f9 	.word	0x080085f9
 80084b0:	08008455 	.word	0x08008455
 80084b4:	08008503 	.word	0x08008503
 80084b8:	08008455 	.word	0x08008455
 80084bc:	08008455 	.word	0x08008455
 80084c0:	08008599 	.word	0x08008599
 80084c4:	6833      	ldr	r3, [r6, #0]
 80084c6:	1d1a      	adds	r2, r3, #4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6032      	str	r2, [r6, #0]
 80084cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084d4:	2301      	movs	r3, #1
 80084d6:	e09c      	b.n	8008612 <_printf_i+0x1e6>
 80084d8:	6833      	ldr	r3, [r6, #0]
 80084da:	6820      	ldr	r0, [r4, #0]
 80084dc:	1d19      	adds	r1, r3, #4
 80084de:	6031      	str	r1, [r6, #0]
 80084e0:	0606      	lsls	r6, r0, #24
 80084e2:	d501      	bpl.n	80084e8 <_printf_i+0xbc>
 80084e4:	681d      	ldr	r5, [r3, #0]
 80084e6:	e003      	b.n	80084f0 <_printf_i+0xc4>
 80084e8:	0645      	lsls	r5, r0, #25
 80084ea:	d5fb      	bpl.n	80084e4 <_printf_i+0xb8>
 80084ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	da03      	bge.n	80084fc <_printf_i+0xd0>
 80084f4:	232d      	movs	r3, #45	@ 0x2d
 80084f6:	426d      	negs	r5, r5
 80084f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084fc:	4858      	ldr	r0, [pc, #352]	@ (8008660 <_printf_i+0x234>)
 80084fe:	230a      	movs	r3, #10
 8008500:	e011      	b.n	8008526 <_printf_i+0xfa>
 8008502:	6821      	ldr	r1, [r4, #0]
 8008504:	6833      	ldr	r3, [r6, #0]
 8008506:	0608      	lsls	r0, r1, #24
 8008508:	f853 5b04 	ldr.w	r5, [r3], #4
 800850c:	d402      	bmi.n	8008514 <_printf_i+0xe8>
 800850e:	0649      	lsls	r1, r1, #25
 8008510:	bf48      	it	mi
 8008512:	b2ad      	uxthmi	r5, r5
 8008514:	2f6f      	cmp	r7, #111	@ 0x6f
 8008516:	4852      	ldr	r0, [pc, #328]	@ (8008660 <_printf_i+0x234>)
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	bf14      	ite	ne
 800851c:	230a      	movne	r3, #10
 800851e:	2308      	moveq	r3, #8
 8008520:	2100      	movs	r1, #0
 8008522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008526:	6866      	ldr	r6, [r4, #4]
 8008528:	60a6      	str	r6, [r4, #8]
 800852a:	2e00      	cmp	r6, #0
 800852c:	db05      	blt.n	800853a <_printf_i+0x10e>
 800852e:	6821      	ldr	r1, [r4, #0]
 8008530:	432e      	orrs	r6, r5
 8008532:	f021 0104 	bic.w	r1, r1, #4
 8008536:	6021      	str	r1, [r4, #0]
 8008538:	d04b      	beq.n	80085d2 <_printf_i+0x1a6>
 800853a:	4616      	mov	r6, r2
 800853c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008540:	fb03 5711 	mls	r7, r3, r1, r5
 8008544:	5dc7      	ldrb	r7, [r0, r7]
 8008546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800854a:	462f      	mov	r7, r5
 800854c:	42bb      	cmp	r3, r7
 800854e:	460d      	mov	r5, r1
 8008550:	d9f4      	bls.n	800853c <_printf_i+0x110>
 8008552:	2b08      	cmp	r3, #8
 8008554:	d10b      	bne.n	800856e <_printf_i+0x142>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	07df      	lsls	r7, r3, #31
 800855a:	d508      	bpl.n	800856e <_printf_i+0x142>
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	6861      	ldr	r1, [r4, #4]
 8008560:	4299      	cmp	r1, r3
 8008562:	bfde      	ittt	le
 8008564:	2330      	movle	r3, #48	@ 0x30
 8008566:	f806 3c01 	strble.w	r3, [r6, #-1]
 800856a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800856e:	1b92      	subs	r2, r2, r6
 8008570:	6122      	str	r2, [r4, #16]
 8008572:	f8cd a000 	str.w	sl, [sp]
 8008576:	464b      	mov	r3, r9
 8008578:	aa03      	add	r2, sp, #12
 800857a:	4621      	mov	r1, r4
 800857c:	4640      	mov	r0, r8
 800857e:	f7ff fee7 	bl	8008350 <_printf_common>
 8008582:	3001      	adds	r0, #1
 8008584:	d14a      	bne.n	800861c <_printf_i+0x1f0>
 8008586:	f04f 30ff 	mov.w	r0, #4294967295
 800858a:	b004      	add	sp, #16
 800858c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	f043 0320 	orr.w	r3, r3, #32
 8008596:	6023      	str	r3, [r4, #0]
 8008598:	4832      	ldr	r0, [pc, #200]	@ (8008664 <_printf_i+0x238>)
 800859a:	2778      	movs	r7, #120	@ 0x78
 800859c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	6831      	ldr	r1, [r6, #0]
 80085a4:	061f      	lsls	r7, r3, #24
 80085a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80085aa:	d402      	bmi.n	80085b2 <_printf_i+0x186>
 80085ac:	065f      	lsls	r7, r3, #25
 80085ae:	bf48      	it	mi
 80085b0:	b2ad      	uxthmi	r5, r5
 80085b2:	6031      	str	r1, [r6, #0]
 80085b4:	07d9      	lsls	r1, r3, #31
 80085b6:	bf44      	itt	mi
 80085b8:	f043 0320 	orrmi.w	r3, r3, #32
 80085bc:	6023      	strmi	r3, [r4, #0]
 80085be:	b11d      	cbz	r5, 80085c8 <_printf_i+0x19c>
 80085c0:	2310      	movs	r3, #16
 80085c2:	e7ad      	b.n	8008520 <_printf_i+0xf4>
 80085c4:	4826      	ldr	r0, [pc, #152]	@ (8008660 <_printf_i+0x234>)
 80085c6:	e7e9      	b.n	800859c <_printf_i+0x170>
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	f023 0320 	bic.w	r3, r3, #32
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	e7f6      	b.n	80085c0 <_printf_i+0x194>
 80085d2:	4616      	mov	r6, r2
 80085d4:	e7bd      	b.n	8008552 <_printf_i+0x126>
 80085d6:	6833      	ldr	r3, [r6, #0]
 80085d8:	6825      	ldr	r5, [r4, #0]
 80085da:	6961      	ldr	r1, [r4, #20]
 80085dc:	1d18      	adds	r0, r3, #4
 80085de:	6030      	str	r0, [r6, #0]
 80085e0:	062e      	lsls	r6, r5, #24
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	d501      	bpl.n	80085ea <_printf_i+0x1be>
 80085e6:	6019      	str	r1, [r3, #0]
 80085e8:	e002      	b.n	80085f0 <_printf_i+0x1c4>
 80085ea:	0668      	lsls	r0, r5, #25
 80085ec:	d5fb      	bpl.n	80085e6 <_printf_i+0x1ba>
 80085ee:	8019      	strh	r1, [r3, #0]
 80085f0:	2300      	movs	r3, #0
 80085f2:	6123      	str	r3, [r4, #16]
 80085f4:	4616      	mov	r6, r2
 80085f6:	e7bc      	b.n	8008572 <_printf_i+0x146>
 80085f8:	6833      	ldr	r3, [r6, #0]
 80085fa:	1d1a      	adds	r2, r3, #4
 80085fc:	6032      	str	r2, [r6, #0]
 80085fe:	681e      	ldr	r6, [r3, #0]
 8008600:	6862      	ldr	r2, [r4, #4]
 8008602:	2100      	movs	r1, #0
 8008604:	4630      	mov	r0, r6
 8008606:	f7f7 fdeb 	bl	80001e0 <memchr>
 800860a:	b108      	cbz	r0, 8008610 <_printf_i+0x1e4>
 800860c:	1b80      	subs	r0, r0, r6
 800860e:	6060      	str	r0, [r4, #4]
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	6123      	str	r3, [r4, #16]
 8008614:	2300      	movs	r3, #0
 8008616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800861a:	e7aa      	b.n	8008572 <_printf_i+0x146>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	4632      	mov	r2, r6
 8008620:	4649      	mov	r1, r9
 8008622:	4640      	mov	r0, r8
 8008624:	47d0      	blx	sl
 8008626:	3001      	adds	r0, #1
 8008628:	d0ad      	beq.n	8008586 <_printf_i+0x15a>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	079b      	lsls	r3, r3, #30
 800862e:	d413      	bmi.n	8008658 <_printf_i+0x22c>
 8008630:	68e0      	ldr	r0, [r4, #12]
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	4298      	cmp	r0, r3
 8008636:	bfb8      	it	lt
 8008638:	4618      	movlt	r0, r3
 800863a:	e7a6      	b.n	800858a <_printf_i+0x15e>
 800863c:	2301      	movs	r3, #1
 800863e:	4632      	mov	r2, r6
 8008640:	4649      	mov	r1, r9
 8008642:	4640      	mov	r0, r8
 8008644:	47d0      	blx	sl
 8008646:	3001      	adds	r0, #1
 8008648:	d09d      	beq.n	8008586 <_printf_i+0x15a>
 800864a:	3501      	adds	r5, #1
 800864c:	68e3      	ldr	r3, [r4, #12]
 800864e:	9903      	ldr	r1, [sp, #12]
 8008650:	1a5b      	subs	r3, r3, r1
 8008652:	42ab      	cmp	r3, r5
 8008654:	dcf2      	bgt.n	800863c <_printf_i+0x210>
 8008656:	e7eb      	b.n	8008630 <_printf_i+0x204>
 8008658:	2500      	movs	r5, #0
 800865a:	f104 0619 	add.w	r6, r4, #25
 800865e:	e7f5      	b.n	800864c <_printf_i+0x220>
 8008660:	0800d906 	.word	0x0800d906
 8008664:	0800d917 	.word	0x0800d917

08008668 <_scanf_float>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	b087      	sub	sp, #28
 800866e:	4691      	mov	r9, r2
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	688b      	ldr	r3, [r1, #8]
 8008674:	1e5a      	subs	r2, r3, #1
 8008676:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800867a:	bf81      	itttt	hi
 800867c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008680:	eb03 0b05 	addhi.w	fp, r3, r5
 8008684:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008688:	608b      	strhi	r3, [r1, #8]
 800868a:	680b      	ldr	r3, [r1, #0]
 800868c:	460a      	mov	r2, r1
 800868e:	f04f 0500 	mov.w	r5, #0
 8008692:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008696:	f842 3b1c 	str.w	r3, [r2], #28
 800869a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800869e:	4680      	mov	r8, r0
 80086a0:	460c      	mov	r4, r1
 80086a2:	bf98      	it	ls
 80086a4:	f04f 0b00 	movls.w	fp, #0
 80086a8:	9201      	str	r2, [sp, #4]
 80086aa:	4616      	mov	r6, r2
 80086ac:	46aa      	mov	sl, r5
 80086ae:	462f      	mov	r7, r5
 80086b0:	9502      	str	r5, [sp, #8]
 80086b2:	68a2      	ldr	r2, [r4, #8]
 80086b4:	b15a      	cbz	r2, 80086ce <_scanf_float+0x66>
 80086b6:	f8d9 3000 	ldr.w	r3, [r9]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80086be:	d863      	bhi.n	8008788 <_scanf_float+0x120>
 80086c0:	2b40      	cmp	r3, #64	@ 0x40
 80086c2:	d83b      	bhi.n	800873c <_scanf_float+0xd4>
 80086c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80086c8:	b2c8      	uxtb	r0, r1
 80086ca:	280e      	cmp	r0, #14
 80086cc:	d939      	bls.n	8008742 <_scanf_float+0xda>
 80086ce:	b11f      	cbz	r7, 80086d8 <_scanf_float+0x70>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086dc:	f1ba 0f01 	cmp.w	sl, #1
 80086e0:	f200 8114 	bhi.w	800890c <_scanf_float+0x2a4>
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	429e      	cmp	r6, r3
 80086e8:	f200 8105 	bhi.w	80088f6 <_scanf_float+0x28e>
 80086ec:	2001      	movs	r0, #1
 80086ee:	b007      	add	sp, #28
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80086f8:	2a0d      	cmp	r2, #13
 80086fa:	d8e8      	bhi.n	80086ce <_scanf_float+0x66>
 80086fc:	a101      	add	r1, pc, #4	@ (adr r1, 8008704 <_scanf_float+0x9c>)
 80086fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008702:	bf00      	nop
 8008704:	0800884d 	.word	0x0800884d
 8008708:	080086cf 	.word	0x080086cf
 800870c:	080086cf 	.word	0x080086cf
 8008710:	080086cf 	.word	0x080086cf
 8008714:	080088a9 	.word	0x080088a9
 8008718:	08008883 	.word	0x08008883
 800871c:	080086cf 	.word	0x080086cf
 8008720:	080086cf 	.word	0x080086cf
 8008724:	0800885b 	.word	0x0800885b
 8008728:	080086cf 	.word	0x080086cf
 800872c:	080086cf 	.word	0x080086cf
 8008730:	080086cf 	.word	0x080086cf
 8008734:	080086cf 	.word	0x080086cf
 8008738:	08008817 	.word	0x08008817
 800873c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008740:	e7da      	b.n	80086f8 <_scanf_float+0x90>
 8008742:	290e      	cmp	r1, #14
 8008744:	d8c3      	bhi.n	80086ce <_scanf_float+0x66>
 8008746:	a001      	add	r0, pc, #4	@ (adr r0, 800874c <_scanf_float+0xe4>)
 8008748:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800874c:	08008807 	.word	0x08008807
 8008750:	080086cf 	.word	0x080086cf
 8008754:	08008807 	.word	0x08008807
 8008758:	08008897 	.word	0x08008897
 800875c:	080086cf 	.word	0x080086cf
 8008760:	080087a9 	.word	0x080087a9
 8008764:	080087ed 	.word	0x080087ed
 8008768:	080087ed 	.word	0x080087ed
 800876c:	080087ed 	.word	0x080087ed
 8008770:	080087ed 	.word	0x080087ed
 8008774:	080087ed 	.word	0x080087ed
 8008778:	080087ed 	.word	0x080087ed
 800877c:	080087ed 	.word	0x080087ed
 8008780:	080087ed 	.word	0x080087ed
 8008784:	080087ed 	.word	0x080087ed
 8008788:	2b6e      	cmp	r3, #110	@ 0x6e
 800878a:	d809      	bhi.n	80087a0 <_scanf_float+0x138>
 800878c:	2b60      	cmp	r3, #96	@ 0x60
 800878e:	d8b1      	bhi.n	80086f4 <_scanf_float+0x8c>
 8008790:	2b54      	cmp	r3, #84	@ 0x54
 8008792:	d07b      	beq.n	800888c <_scanf_float+0x224>
 8008794:	2b59      	cmp	r3, #89	@ 0x59
 8008796:	d19a      	bne.n	80086ce <_scanf_float+0x66>
 8008798:	2d07      	cmp	r5, #7
 800879a:	d198      	bne.n	80086ce <_scanf_float+0x66>
 800879c:	2508      	movs	r5, #8
 800879e:	e02f      	b.n	8008800 <_scanf_float+0x198>
 80087a0:	2b74      	cmp	r3, #116	@ 0x74
 80087a2:	d073      	beq.n	800888c <_scanf_float+0x224>
 80087a4:	2b79      	cmp	r3, #121	@ 0x79
 80087a6:	e7f6      	b.n	8008796 <_scanf_float+0x12e>
 80087a8:	6821      	ldr	r1, [r4, #0]
 80087aa:	05c8      	lsls	r0, r1, #23
 80087ac:	d51e      	bpl.n	80087ec <_scanf_float+0x184>
 80087ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80087b2:	6021      	str	r1, [r4, #0]
 80087b4:	3701      	adds	r7, #1
 80087b6:	f1bb 0f00 	cmp.w	fp, #0
 80087ba:	d003      	beq.n	80087c4 <_scanf_float+0x15c>
 80087bc:	3201      	adds	r2, #1
 80087be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087c2:	60a2      	str	r2, [r4, #8]
 80087c4:	68a3      	ldr	r3, [r4, #8]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	60a3      	str	r3, [r4, #8]
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	3301      	adds	r3, #1
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80087dc:	f340 8082 	ble.w	80088e4 <_scanf_float+0x27c>
 80087e0:	f8d9 3000 	ldr.w	r3, [r9]
 80087e4:	3301      	adds	r3, #1
 80087e6:	f8c9 3000 	str.w	r3, [r9]
 80087ea:	e762      	b.n	80086b2 <_scanf_float+0x4a>
 80087ec:	eb1a 0105 	adds.w	r1, sl, r5
 80087f0:	f47f af6d 	bne.w	80086ce <_scanf_float+0x66>
 80087f4:	6822      	ldr	r2, [r4, #0]
 80087f6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80087fa:	6022      	str	r2, [r4, #0]
 80087fc:	460d      	mov	r5, r1
 80087fe:	468a      	mov	sl, r1
 8008800:	f806 3b01 	strb.w	r3, [r6], #1
 8008804:	e7de      	b.n	80087c4 <_scanf_float+0x15c>
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	0610      	lsls	r0, r2, #24
 800880a:	f57f af60 	bpl.w	80086ce <_scanf_float+0x66>
 800880e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008812:	6022      	str	r2, [r4, #0]
 8008814:	e7f4      	b.n	8008800 <_scanf_float+0x198>
 8008816:	f1ba 0f00 	cmp.w	sl, #0
 800881a:	d10c      	bne.n	8008836 <_scanf_float+0x1ce>
 800881c:	b977      	cbnz	r7, 800883c <_scanf_float+0x1d4>
 800881e:	6822      	ldr	r2, [r4, #0]
 8008820:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008824:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008828:	d108      	bne.n	800883c <_scanf_float+0x1d4>
 800882a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	f04f 0a01 	mov.w	sl, #1
 8008834:	e7e4      	b.n	8008800 <_scanf_float+0x198>
 8008836:	f1ba 0f02 	cmp.w	sl, #2
 800883a:	d050      	beq.n	80088de <_scanf_float+0x276>
 800883c:	2d01      	cmp	r5, #1
 800883e:	d002      	beq.n	8008846 <_scanf_float+0x1de>
 8008840:	2d04      	cmp	r5, #4
 8008842:	f47f af44 	bne.w	80086ce <_scanf_float+0x66>
 8008846:	3501      	adds	r5, #1
 8008848:	b2ed      	uxtb	r5, r5
 800884a:	e7d9      	b.n	8008800 <_scanf_float+0x198>
 800884c:	f1ba 0f01 	cmp.w	sl, #1
 8008850:	f47f af3d 	bne.w	80086ce <_scanf_float+0x66>
 8008854:	f04f 0a02 	mov.w	sl, #2
 8008858:	e7d2      	b.n	8008800 <_scanf_float+0x198>
 800885a:	b975      	cbnz	r5, 800887a <_scanf_float+0x212>
 800885c:	2f00      	cmp	r7, #0
 800885e:	f47f af37 	bne.w	80086d0 <_scanf_float+0x68>
 8008862:	6822      	ldr	r2, [r4, #0]
 8008864:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008868:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800886c:	f040 8103 	bne.w	8008a76 <_scanf_float+0x40e>
 8008870:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008874:	6022      	str	r2, [r4, #0]
 8008876:	2501      	movs	r5, #1
 8008878:	e7c2      	b.n	8008800 <_scanf_float+0x198>
 800887a:	2d03      	cmp	r5, #3
 800887c:	d0e3      	beq.n	8008846 <_scanf_float+0x1de>
 800887e:	2d05      	cmp	r5, #5
 8008880:	e7df      	b.n	8008842 <_scanf_float+0x1da>
 8008882:	2d02      	cmp	r5, #2
 8008884:	f47f af23 	bne.w	80086ce <_scanf_float+0x66>
 8008888:	2503      	movs	r5, #3
 800888a:	e7b9      	b.n	8008800 <_scanf_float+0x198>
 800888c:	2d06      	cmp	r5, #6
 800888e:	f47f af1e 	bne.w	80086ce <_scanf_float+0x66>
 8008892:	2507      	movs	r5, #7
 8008894:	e7b4      	b.n	8008800 <_scanf_float+0x198>
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	0591      	lsls	r1, r2, #22
 800889a:	f57f af18 	bpl.w	80086ce <_scanf_float+0x66>
 800889e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80088a2:	6022      	str	r2, [r4, #0]
 80088a4:	9702      	str	r7, [sp, #8]
 80088a6:	e7ab      	b.n	8008800 <_scanf_float+0x198>
 80088a8:	6822      	ldr	r2, [r4, #0]
 80088aa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80088ae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80088b2:	d005      	beq.n	80088c0 <_scanf_float+0x258>
 80088b4:	0550      	lsls	r0, r2, #21
 80088b6:	f57f af0a 	bpl.w	80086ce <_scanf_float+0x66>
 80088ba:	2f00      	cmp	r7, #0
 80088bc:	f000 80db 	beq.w	8008a76 <_scanf_float+0x40e>
 80088c0:	0591      	lsls	r1, r2, #22
 80088c2:	bf58      	it	pl
 80088c4:	9902      	ldrpl	r1, [sp, #8]
 80088c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088ca:	bf58      	it	pl
 80088cc:	1a79      	subpl	r1, r7, r1
 80088ce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80088d2:	bf58      	it	pl
 80088d4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088d8:	6022      	str	r2, [r4, #0]
 80088da:	2700      	movs	r7, #0
 80088dc:	e790      	b.n	8008800 <_scanf_float+0x198>
 80088de:	f04f 0a03 	mov.w	sl, #3
 80088e2:	e78d      	b.n	8008800 <_scanf_float+0x198>
 80088e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80088e8:	4649      	mov	r1, r9
 80088ea:	4640      	mov	r0, r8
 80088ec:	4798      	blx	r3
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f43f aedf 	beq.w	80086b2 <_scanf_float+0x4a>
 80088f4:	e6eb      	b.n	80086ce <_scanf_float+0x66>
 80088f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088fe:	464a      	mov	r2, r9
 8008900:	4640      	mov	r0, r8
 8008902:	4798      	blx	r3
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	3b01      	subs	r3, #1
 8008908:	6123      	str	r3, [r4, #16]
 800890a:	e6eb      	b.n	80086e4 <_scanf_float+0x7c>
 800890c:	1e6b      	subs	r3, r5, #1
 800890e:	2b06      	cmp	r3, #6
 8008910:	d824      	bhi.n	800895c <_scanf_float+0x2f4>
 8008912:	2d02      	cmp	r5, #2
 8008914:	d836      	bhi.n	8008984 <_scanf_float+0x31c>
 8008916:	9b01      	ldr	r3, [sp, #4]
 8008918:	429e      	cmp	r6, r3
 800891a:	f67f aee7 	bls.w	80086ec <_scanf_float+0x84>
 800891e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008926:	464a      	mov	r2, r9
 8008928:	4640      	mov	r0, r8
 800892a:	4798      	blx	r3
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	3b01      	subs	r3, #1
 8008930:	6123      	str	r3, [r4, #16]
 8008932:	e7f0      	b.n	8008916 <_scanf_float+0x2ae>
 8008934:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008938:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800893c:	464a      	mov	r2, r9
 800893e:	4640      	mov	r0, r8
 8008940:	4798      	blx	r3
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	3b01      	subs	r3, #1
 8008946:	6123      	str	r3, [r4, #16]
 8008948:	f10a 3aff 	add.w	sl, sl, #4294967295
 800894c:	fa5f fa8a 	uxtb.w	sl, sl
 8008950:	f1ba 0f02 	cmp.w	sl, #2
 8008954:	d1ee      	bne.n	8008934 <_scanf_float+0x2cc>
 8008956:	3d03      	subs	r5, #3
 8008958:	b2ed      	uxtb	r5, r5
 800895a:	1b76      	subs	r6, r6, r5
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	05da      	lsls	r2, r3, #23
 8008960:	d530      	bpl.n	80089c4 <_scanf_float+0x35c>
 8008962:	055b      	lsls	r3, r3, #21
 8008964:	d511      	bpl.n	800898a <_scanf_float+0x322>
 8008966:	9b01      	ldr	r3, [sp, #4]
 8008968:	429e      	cmp	r6, r3
 800896a:	f67f aebf 	bls.w	80086ec <_scanf_float+0x84>
 800896e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008976:	464a      	mov	r2, r9
 8008978:	4640      	mov	r0, r8
 800897a:	4798      	blx	r3
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	3b01      	subs	r3, #1
 8008980:	6123      	str	r3, [r4, #16]
 8008982:	e7f0      	b.n	8008966 <_scanf_float+0x2fe>
 8008984:	46aa      	mov	sl, r5
 8008986:	46b3      	mov	fp, r6
 8008988:	e7de      	b.n	8008948 <_scanf_float+0x2e0>
 800898a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	2965      	cmp	r1, #101	@ 0x65
 8008992:	f103 33ff 	add.w	r3, r3, #4294967295
 8008996:	f106 35ff 	add.w	r5, r6, #4294967295
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	d00c      	beq.n	80089b8 <_scanf_float+0x350>
 800899e:	2945      	cmp	r1, #69	@ 0x45
 80089a0:	d00a      	beq.n	80089b8 <_scanf_float+0x350>
 80089a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089a6:	464a      	mov	r2, r9
 80089a8:	4640      	mov	r0, r8
 80089aa:	4798      	blx	r3
 80089ac:	6923      	ldr	r3, [r4, #16]
 80089ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	1eb5      	subs	r5, r6, #2
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089bc:	464a      	mov	r2, r9
 80089be:	4640      	mov	r0, r8
 80089c0:	4798      	blx	r3
 80089c2:	462e      	mov	r6, r5
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	f012 0210 	ands.w	r2, r2, #16
 80089ca:	d001      	beq.n	80089d0 <_scanf_float+0x368>
 80089cc:	2000      	movs	r0, #0
 80089ce:	e68e      	b.n	80086ee <_scanf_float+0x86>
 80089d0:	7032      	strb	r2, [r6, #0]
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089dc:	d125      	bne.n	8008a2a <_scanf_float+0x3c2>
 80089de:	9b02      	ldr	r3, [sp, #8]
 80089e0:	429f      	cmp	r7, r3
 80089e2:	d00a      	beq.n	80089fa <_scanf_float+0x392>
 80089e4:	1bda      	subs	r2, r3, r7
 80089e6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80089ea:	429e      	cmp	r6, r3
 80089ec:	bf28      	it	cs
 80089ee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80089f2:	4922      	ldr	r1, [pc, #136]	@ (8008a7c <_scanf_float+0x414>)
 80089f4:	4630      	mov	r0, r6
 80089f6:	f000 fa4f 	bl	8008e98 <siprintf>
 80089fa:	9901      	ldr	r1, [sp, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	4640      	mov	r0, r8
 8008a00:	f002 fdf2 	bl	800b5e8 <_strtod_r>
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	6821      	ldr	r1, [r4, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f011 0f02 	tst.w	r1, #2
 8008a0e:	ec57 6b10 	vmov	r6, r7, d0
 8008a12:	f103 0204 	add.w	r2, r3, #4
 8008a16:	d015      	beq.n	8008a44 <_scanf_float+0x3dc>
 8008a18:	9903      	ldr	r1, [sp, #12]
 8008a1a:	600a      	str	r2, [r1, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	e9c3 6700 	strd	r6, r7, [r3]
 8008a22:	68e3      	ldr	r3, [r4, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	60e3      	str	r3, [r4, #12]
 8008a28:	e7d0      	b.n	80089cc <_scanf_float+0x364>
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d0e4      	beq.n	80089fa <_scanf_float+0x392>
 8008a30:	9905      	ldr	r1, [sp, #20]
 8008a32:	230a      	movs	r3, #10
 8008a34:	3101      	adds	r1, #1
 8008a36:	4640      	mov	r0, r8
 8008a38:	f002 fe56 	bl	800b6e8 <_strtol_r>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	9e05      	ldr	r6, [sp, #20]
 8008a40:	1ac2      	subs	r2, r0, r3
 8008a42:	e7d0      	b.n	80089e6 <_scanf_float+0x37e>
 8008a44:	f011 0f04 	tst.w	r1, #4
 8008a48:	9903      	ldr	r1, [sp, #12]
 8008a4a:	600a      	str	r2, [r1, #0]
 8008a4c:	d1e6      	bne.n	8008a1c <_scanf_float+0x3b4>
 8008a4e:	681d      	ldr	r5, [r3, #0]
 8008a50:	4632      	mov	r2, r6
 8008a52:	463b      	mov	r3, r7
 8008a54:	4630      	mov	r0, r6
 8008a56:	4639      	mov	r1, r7
 8008a58:	f7f8 f870 	bl	8000b3c <__aeabi_dcmpun>
 8008a5c:	b128      	cbz	r0, 8008a6a <_scanf_float+0x402>
 8008a5e:	4808      	ldr	r0, [pc, #32]	@ (8008a80 <_scanf_float+0x418>)
 8008a60:	f000 fbb6 	bl	80091d0 <nanf>
 8008a64:	ed85 0a00 	vstr	s0, [r5]
 8008a68:	e7db      	b.n	8008a22 <_scanf_float+0x3ba>
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	f7f8 f8c3 	bl	8000bf8 <__aeabi_d2f>
 8008a72:	6028      	str	r0, [r5, #0]
 8008a74:	e7d5      	b.n	8008a22 <_scanf_float+0x3ba>
 8008a76:	2700      	movs	r7, #0
 8008a78:	e62e      	b.n	80086d8 <_scanf_float+0x70>
 8008a7a:	bf00      	nop
 8008a7c:	0800d928 	.word	0x0800d928
 8008a80:	0800da69 	.word	0x0800da69

08008a84 <std>:
 8008a84:	2300      	movs	r3, #0
 8008a86:	b510      	push	{r4, lr}
 8008a88:	4604      	mov	r4, r0
 8008a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a92:	6083      	str	r3, [r0, #8]
 8008a94:	8181      	strh	r1, [r0, #12]
 8008a96:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a98:	81c2      	strh	r2, [r0, #14]
 8008a9a:	6183      	str	r3, [r0, #24]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	305c      	adds	r0, #92	@ 0x5c
 8008aa2:	f000 faf3 	bl	800908c <memset>
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <std+0x58>)
 8008aa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae0 <std+0x5c>)
 8008aac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008aae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <std+0x60>)
 8008ab0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae8 <std+0x64>)
 8008ab4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8008aec <std+0x68>)
 8008ab8:	6224      	str	r4, [r4, #32]
 8008aba:	429c      	cmp	r4, r3
 8008abc:	d006      	beq.n	8008acc <std+0x48>
 8008abe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ac2:	4294      	cmp	r4, r2
 8008ac4:	d002      	beq.n	8008acc <std+0x48>
 8008ac6:	33d0      	adds	r3, #208	@ 0xd0
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	d105      	bne.n	8008ad8 <std+0x54>
 8008acc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad4:	f000 bb6a 	b.w	80091ac <__retarget_lock_init_recursive>
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	08008edd 	.word	0x08008edd
 8008ae0:	08008eff 	.word	0x08008eff
 8008ae4:	08008f37 	.word	0x08008f37
 8008ae8:	08008f5b 	.word	0x08008f5b
 8008aec:	200008fc 	.word	0x200008fc

08008af0 <stdio_exit_handler>:
 8008af0:	4a02      	ldr	r2, [pc, #8]	@ (8008afc <stdio_exit_handler+0xc>)
 8008af2:	4903      	ldr	r1, [pc, #12]	@ (8008b00 <stdio_exit_handler+0x10>)
 8008af4:	4803      	ldr	r0, [pc, #12]	@ (8008b04 <stdio_exit_handler+0x14>)
 8008af6:	f000 b869 	b.w	8008bcc <_fwalk_sglue>
 8008afa:	bf00      	nop
 8008afc:	2000007c 	.word	0x2000007c
 8008b00:	0800baa5 	.word	0x0800baa5
 8008b04:	2000008c 	.word	0x2000008c

08008b08 <cleanup_stdio>:
 8008b08:	6841      	ldr	r1, [r0, #4]
 8008b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b3c <cleanup_stdio+0x34>)
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	b510      	push	{r4, lr}
 8008b10:	4604      	mov	r4, r0
 8008b12:	d001      	beq.n	8008b18 <cleanup_stdio+0x10>
 8008b14:	f002 ffc6 	bl	800baa4 <_fflush_r>
 8008b18:	68a1      	ldr	r1, [r4, #8]
 8008b1a:	4b09      	ldr	r3, [pc, #36]	@ (8008b40 <cleanup_stdio+0x38>)
 8008b1c:	4299      	cmp	r1, r3
 8008b1e:	d002      	beq.n	8008b26 <cleanup_stdio+0x1e>
 8008b20:	4620      	mov	r0, r4
 8008b22:	f002 ffbf 	bl	800baa4 <_fflush_r>
 8008b26:	68e1      	ldr	r1, [r4, #12]
 8008b28:	4b06      	ldr	r3, [pc, #24]	@ (8008b44 <cleanup_stdio+0x3c>)
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	d004      	beq.n	8008b38 <cleanup_stdio+0x30>
 8008b2e:	4620      	mov	r0, r4
 8008b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b34:	f002 bfb6 	b.w	800baa4 <_fflush_r>
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200008fc 	.word	0x200008fc
 8008b40:	20000964 	.word	0x20000964
 8008b44:	200009cc 	.word	0x200009cc

08008b48 <global_stdio_init.part.0>:
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b78 <global_stdio_init.part.0+0x30>)
 8008b4c:	4c0b      	ldr	r4, [pc, #44]	@ (8008b7c <global_stdio_init.part.0+0x34>)
 8008b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b80 <global_stdio_init.part.0+0x38>)
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	4620      	mov	r0, r4
 8008b54:	2200      	movs	r2, #0
 8008b56:	2104      	movs	r1, #4
 8008b58:	f7ff ff94 	bl	8008a84 <std>
 8008b5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b60:	2201      	movs	r2, #1
 8008b62:	2109      	movs	r1, #9
 8008b64:	f7ff ff8e 	bl	8008a84 <std>
 8008b68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b72:	2112      	movs	r1, #18
 8008b74:	f7ff bf86 	b.w	8008a84 <std>
 8008b78:	20000a34 	.word	0x20000a34
 8008b7c:	200008fc 	.word	0x200008fc
 8008b80:	08008af1 	.word	0x08008af1

08008b84 <__sfp_lock_acquire>:
 8008b84:	4801      	ldr	r0, [pc, #4]	@ (8008b8c <__sfp_lock_acquire+0x8>)
 8008b86:	f000 bb12 	b.w	80091ae <__retarget_lock_acquire_recursive>
 8008b8a:	bf00      	nop
 8008b8c:	20000a3d 	.word	0x20000a3d

08008b90 <__sfp_lock_release>:
 8008b90:	4801      	ldr	r0, [pc, #4]	@ (8008b98 <__sfp_lock_release+0x8>)
 8008b92:	f000 bb0d 	b.w	80091b0 <__retarget_lock_release_recursive>
 8008b96:	bf00      	nop
 8008b98:	20000a3d 	.word	0x20000a3d

08008b9c <__sinit>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	f7ff fff0 	bl	8008b84 <__sfp_lock_acquire>
 8008ba4:	6a23      	ldr	r3, [r4, #32]
 8008ba6:	b11b      	cbz	r3, 8008bb0 <__sinit+0x14>
 8008ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bac:	f7ff bff0 	b.w	8008b90 <__sfp_lock_release>
 8008bb0:	4b04      	ldr	r3, [pc, #16]	@ (8008bc4 <__sinit+0x28>)
 8008bb2:	6223      	str	r3, [r4, #32]
 8008bb4:	4b04      	ldr	r3, [pc, #16]	@ (8008bc8 <__sinit+0x2c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1f5      	bne.n	8008ba8 <__sinit+0xc>
 8008bbc:	f7ff ffc4 	bl	8008b48 <global_stdio_init.part.0>
 8008bc0:	e7f2      	b.n	8008ba8 <__sinit+0xc>
 8008bc2:	bf00      	nop
 8008bc4:	08008b09 	.word	0x08008b09
 8008bc8:	20000a34 	.word	0x20000a34

08008bcc <_fwalk_sglue>:
 8008bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	4607      	mov	r7, r0
 8008bd2:	4688      	mov	r8, r1
 8008bd4:	4614      	mov	r4, r2
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8008be0:	d505      	bpl.n	8008bee <_fwalk_sglue+0x22>
 8008be2:	6824      	ldr	r4, [r4, #0]
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	d1f7      	bne.n	8008bd8 <_fwalk_sglue+0xc>
 8008be8:	4630      	mov	r0, r6
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d907      	bls.n	8008c04 <_fwalk_sglue+0x38>
 8008bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	d003      	beq.n	8008c04 <_fwalk_sglue+0x38>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4638      	mov	r0, r7
 8008c00:	47c0      	blx	r8
 8008c02:	4306      	orrs	r6, r0
 8008c04:	3568      	adds	r5, #104	@ 0x68
 8008c06:	e7e9      	b.n	8008bdc <_fwalk_sglue+0x10>

08008c08 <_puts_r>:
 8008c08:	6a03      	ldr	r3, [r0, #32]
 8008c0a:	b570      	push	{r4, r5, r6, lr}
 8008c0c:	6884      	ldr	r4, [r0, #8]
 8008c0e:	4605      	mov	r5, r0
 8008c10:	460e      	mov	r6, r1
 8008c12:	b90b      	cbnz	r3, 8008c18 <_puts_r+0x10>
 8008c14:	f7ff ffc2 	bl	8008b9c <__sinit>
 8008c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c1a:	07db      	lsls	r3, r3, #31
 8008c1c:	d405      	bmi.n	8008c2a <_puts_r+0x22>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	0598      	lsls	r0, r3, #22
 8008c22:	d402      	bmi.n	8008c2a <_puts_r+0x22>
 8008c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c26:	f000 fac2 	bl	80091ae <__retarget_lock_acquire_recursive>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	0719      	lsls	r1, r3, #28
 8008c2e:	d502      	bpl.n	8008c36 <_puts_r+0x2e>
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d135      	bne.n	8008ca2 <_puts_r+0x9a>
 8008c36:	4621      	mov	r1, r4
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f000 f9d1 	bl	8008fe0 <__swsetup_r>
 8008c3e:	b380      	cbz	r0, 8008ca2 <_puts_r+0x9a>
 8008c40:	f04f 35ff 	mov.w	r5, #4294967295
 8008c44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c46:	07da      	lsls	r2, r3, #31
 8008c48:	d405      	bmi.n	8008c56 <_puts_r+0x4e>
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	059b      	lsls	r3, r3, #22
 8008c4e:	d402      	bmi.n	8008c56 <_puts_r+0x4e>
 8008c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c52:	f000 faad 	bl	80091b0 <__retarget_lock_release_recursive>
 8008c56:	4628      	mov	r0, r5
 8008c58:	bd70      	pop	{r4, r5, r6, pc}
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	da04      	bge.n	8008c68 <_puts_r+0x60>
 8008c5e:	69a2      	ldr	r2, [r4, #24]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	dc17      	bgt.n	8008c94 <_puts_r+0x8c>
 8008c64:	290a      	cmp	r1, #10
 8008c66:	d015      	beq.n	8008c94 <_puts_r+0x8c>
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	6022      	str	r2, [r4, #0]
 8008c6e:	7019      	strb	r1, [r3, #0]
 8008c70:	68a3      	ldr	r3, [r4, #8]
 8008c72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c76:	3b01      	subs	r3, #1
 8008c78:	60a3      	str	r3, [r4, #8]
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d1ed      	bne.n	8008c5a <_puts_r+0x52>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da11      	bge.n	8008ca6 <_puts_r+0x9e>
 8008c82:	4622      	mov	r2, r4
 8008c84:	210a      	movs	r1, #10
 8008c86:	4628      	mov	r0, r5
 8008c88:	f000 f96b 	bl	8008f62 <__swbuf_r>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d0d7      	beq.n	8008c40 <_puts_r+0x38>
 8008c90:	250a      	movs	r5, #10
 8008c92:	e7d7      	b.n	8008c44 <_puts_r+0x3c>
 8008c94:	4622      	mov	r2, r4
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 f963 	bl	8008f62 <__swbuf_r>
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d1e7      	bne.n	8008c70 <_puts_r+0x68>
 8008ca0:	e7ce      	b.n	8008c40 <_puts_r+0x38>
 8008ca2:	3e01      	subs	r6, #1
 8008ca4:	e7e4      	b.n	8008c70 <_puts_r+0x68>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	6022      	str	r2, [r4, #0]
 8008cac:	220a      	movs	r2, #10
 8008cae:	701a      	strb	r2, [r3, #0]
 8008cb0:	e7ee      	b.n	8008c90 <_puts_r+0x88>
	...

08008cb4 <puts>:
 8008cb4:	4b02      	ldr	r3, [pc, #8]	@ (8008cc0 <puts+0xc>)
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	f7ff bfa5 	b.w	8008c08 <_puts_r>
 8008cbe:	bf00      	nop
 8008cc0:	20000088 	.word	0x20000088

08008cc4 <setvbuf>:
 8008cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cc8:	461d      	mov	r5, r3
 8008cca:	4b57      	ldr	r3, [pc, #348]	@ (8008e28 <setvbuf+0x164>)
 8008ccc:	681f      	ldr	r7, [r3, #0]
 8008cce:	4604      	mov	r4, r0
 8008cd0:	460e      	mov	r6, r1
 8008cd2:	4690      	mov	r8, r2
 8008cd4:	b127      	cbz	r7, 8008ce0 <setvbuf+0x1c>
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	b913      	cbnz	r3, 8008ce0 <setvbuf+0x1c>
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f7ff ff5e 	bl	8008b9c <__sinit>
 8008ce0:	f1b8 0f02 	cmp.w	r8, #2
 8008ce4:	d006      	beq.n	8008cf4 <setvbuf+0x30>
 8008ce6:	f1b8 0f01 	cmp.w	r8, #1
 8008cea:	f200 809a 	bhi.w	8008e22 <setvbuf+0x15e>
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	f2c0 8097 	blt.w	8008e22 <setvbuf+0x15e>
 8008cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cf6:	07d9      	lsls	r1, r3, #31
 8008cf8:	d405      	bmi.n	8008d06 <setvbuf+0x42>
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	059a      	lsls	r2, r3, #22
 8008cfe:	d402      	bmi.n	8008d06 <setvbuf+0x42>
 8008d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d02:	f000 fa54 	bl	80091ae <__retarget_lock_acquire_recursive>
 8008d06:	4621      	mov	r1, r4
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f002 fecb 	bl	800baa4 <_fflush_r>
 8008d0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d10:	b141      	cbz	r1, 8008d24 <setvbuf+0x60>
 8008d12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d16:	4299      	cmp	r1, r3
 8008d18:	d002      	beq.n	8008d20 <setvbuf+0x5c>
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f001 f8b8 	bl	8009e90 <_free_r>
 8008d20:	2300      	movs	r3, #0
 8008d22:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d24:	2300      	movs	r3, #0
 8008d26:	61a3      	str	r3, [r4, #24]
 8008d28:	6063      	str	r3, [r4, #4]
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	061b      	lsls	r3, r3, #24
 8008d2e:	d503      	bpl.n	8008d38 <setvbuf+0x74>
 8008d30:	6921      	ldr	r1, [r4, #16]
 8008d32:	4638      	mov	r0, r7
 8008d34:	f001 f8ac 	bl	8009e90 <_free_r>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008d3e:	f023 0303 	bic.w	r3, r3, #3
 8008d42:	f1b8 0f02 	cmp.w	r8, #2
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	d061      	beq.n	8008e0e <setvbuf+0x14a>
 8008d4a:	ab01      	add	r3, sp, #4
 8008d4c:	466a      	mov	r2, sp
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4638      	mov	r0, r7
 8008d52:	f002 fecf 	bl	800baf4 <__swhatbuf_r>
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	4318      	orrs	r0, r3
 8008d5a:	81a0      	strh	r0, [r4, #12]
 8008d5c:	bb2d      	cbnz	r5, 8008daa <setvbuf+0xe6>
 8008d5e:	9d00      	ldr	r5, [sp, #0]
 8008d60:	4628      	mov	r0, r5
 8008d62:	f001 f8df 	bl	8009f24 <malloc>
 8008d66:	4606      	mov	r6, r0
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d152      	bne.n	8008e12 <setvbuf+0x14e>
 8008d6c:	f8dd 9000 	ldr.w	r9, [sp]
 8008d70:	45a9      	cmp	r9, r5
 8008d72:	d140      	bne.n	8008df6 <setvbuf+0x132>
 8008d74:	f04f 35ff 	mov.w	r5, #4294967295
 8008d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d7c:	f043 0202 	orr.w	r2, r3, #2
 8008d80:	81a2      	strh	r2, [r4, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	60a2      	str	r2, [r4, #8]
 8008d86:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008d8a:	6022      	str	r2, [r4, #0]
 8008d8c:	6122      	str	r2, [r4, #16]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	6162      	str	r2, [r4, #20]
 8008d92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d94:	07d6      	lsls	r6, r2, #31
 8008d96:	d404      	bmi.n	8008da2 <setvbuf+0xde>
 8008d98:	0598      	lsls	r0, r3, #22
 8008d9a:	d402      	bmi.n	8008da2 <setvbuf+0xde>
 8008d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d9e:	f000 fa07 	bl	80091b0 <__retarget_lock_release_recursive>
 8008da2:	4628      	mov	r0, r5
 8008da4:	b003      	add	sp, #12
 8008da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008daa:	2e00      	cmp	r6, #0
 8008dac:	d0d8      	beq.n	8008d60 <setvbuf+0x9c>
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	b913      	cbnz	r3, 8008db8 <setvbuf+0xf4>
 8008db2:	4638      	mov	r0, r7
 8008db4:	f7ff fef2 	bl	8008b9c <__sinit>
 8008db8:	f1b8 0f01 	cmp.w	r8, #1
 8008dbc:	bf08      	it	eq
 8008dbe:	89a3      	ldrheq	r3, [r4, #12]
 8008dc0:	6026      	str	r6, [r4, #0]
 8008dc2:	bf04      	itt	eq
 8008dc4:	f043 0301 	orreq.w	r3, r3, #1
 8008dc8:	81a3      	strheq	r3, [r4, #12]
 8008dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dce:	f013 0208 	ands.w	r2, r3, #8
 8008dd2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008dd6:	d01e      	beq.n	8008e16 <setvbuf+0x152>
 8008dd8:	07d9      	lsls	r1, r3, #31
 8008dda:	bf41      	itttt	mi
 8008ddc:	2200      	movmi	r2, #0
 8008dde:	426d      	negmi	r5, r5
 8008de0:	60a2      	strmi	r2, [r4, #8]
 8008de2:	61a5      	strmi	r5, [r4, #24]
 8008de4:	bf58      	it	pl
 8008de6:	60a5      	strpl	r5, [r4, #8]
 8008de8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008dea:	07d2      	lsls	r2, r2, #31
 8008dec:	d401      	bmi.n	8008df2 <setvbuf+0x12e>
 8008dee:	059b      	lsls	r3, r3, #22
 8008df0:	d513      	bpl.n	8008e1a <setvbuf+0x156>
 8008df2:	2500      	movs	r5, #0
 8008df4:	e7d5      	b.n	8008da2 <setvbuf+0xde>
 8008df6:	4648      	mov	r0, r9
 8008df8:	f001 f894 	bl	8009f24 <malloc>
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d0b8      	beq.n	8008d74 <setvbuf+0xb0>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	464d      	mov	r5, r9
 8008e0c:	e7cf      	b.n	8008dae <setvbuf+0xea>
 8008e0e:	2500      	movs	r5, #0
 8008e10:	e7b2      	b.n	8008d78 <setvbuf+0xb4>
 8008e12:	46a9      	mov	r9, r5
 8008e14:	e7f5      	b.n	8008e02 <setvbuf+0x13e>
 8008e16:	60a2      	str	r2, [r4, #8]
 8008e18:	e7e6      	b.n	8008de8 <setvbuf+0x124>
 8008e1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e1c:	f000 f9c8 	bl	80091b0 <__retarget_lock_release_recursive>
 8008e20:	e7e7      	b.n	8008df2 <setvbuf+0x12e>
 8008e22:	f04f 35ff 	mov.w	r5, #4294967295
 8008e26:	e7bc      	b.n	8008da2 <setvbuf+0xde>
 8008e28:	20000088 	.word	0x20000088

08008e2c <sniprintf>:
 8008e2c:	b40c      	push	{r2, r3}
 8008e2e:	b530      	push	{r4, r5, lr}
 8008e30:	4b18      	ldr	r3, [pc, #96]	@ (8008e94 <sniprintf+0x68>)
 8008e32:	1e0c      	subs	r4, r1, #0
 8008e34:	681d      	ldr	r5, [r3, #0]
 8008e36:	b09d      	sub	sp, #116	@ 0x74
 8008e38:	da08      	bge.n	8008e4c <sniprintf+0x20>
 8008e3a:	238b      	movs	r3, #139	@ 0x8b
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	b01d      	add	sp, #116	@ 0x74
 8008e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e48:	b002      	add	sp, #8
 8008e4a:	4770      	bx	lr
 8008e4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e54:	f04f 0300 	mov.w	r3, #0
 8008e58:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008e5a:	bf14      	ite	ne
 8008e5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e60:	4623      	moveq	r3, r4
 8008e62:	9304      	str	r3, [sp, #16]
 8008e64:	9307      	str	r3, [sp, #28]
 8008e66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e6a:	9002      	str	r0, [sp, #8]
 8008e6c:	9006      	str	r0, [sp, #24]
 8008e6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e74:	ab21      	add	r3, sp, #132	@ 0x84
 8008e76:	a902      	add	r1, sp, #8
 8008e78:	4628      	mov	r0, r5
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	f002 fc92 	bl	800b7a4 <_svfiprintf_r>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	bfbc      	itt	lt
 8008e84:	238b      	movlt	r3, #139	@ 0x8b
 8008e86:	602b      	strlt	r3, [r5, #0]
 8008e88:	2c00      	cmp	r4, #0
 8008e8a:	d0da      	beq.n	8008e42 <sniprintf+0x16>
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	e7d6      	b.n	8008e42 <sniprintf+0x16>
 8008e94:	20000088 	.word	0x20000088

08008e98 <siprintf>:
 8008e98:	b40e      	push	{r1, r2, r3}
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	b09d      	sub	sp, #116	@ 0x74
 8008e9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ea0:	9002      	str	r0, [sp, #8]
 8008ea2:	9006      	str	r0, [sp, #24]
 8008ea4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ea8:	480a      	ldr	r0, [pc, #40]	@ (8008ed4 <siprintf+0x3c>)
 8008eaa:	9107      	str	r1, [sp, #28]
 8008eac:	9104      	str	r1, [sp, #16]
 8008eae:	490a      	ldr	r1, [pc, #40]	@ (8008ed8 <siprintf+0x40>)
 8008eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb4:	9105      	str	r1, [sp, #20]
 8008eb6:	2400      	movs	r4, #0
 8008eb8:	a902      	add	r1, sp, #8
 8008eba:	6800      	ldr	r0, [r0, #0]
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008ec0:	f002 fc70 	bl	800b7a4 <_svfiprintf_r>
 8008ec4:	9b02      	ldr	r3, [sp, #8]
 8008ec6:	701c      	strb	r4, [r3, #0]
 8008ec8:	b01d      	add	sp, #116	@ 0x74
 8008eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ece:	b003      	add	sp, #12
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20000088 	.word	0x20000088
 8008ed8:	ffff0208 	.word	0xffff0208

08008edc <__sread>:
 8008edc:	b510      	push	{r4, lr}
 8008ede:	460c      	mov	r4, r1
 8008ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee4:	f000 f914 	bl	8009110 <_read_r>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	bfab      	itete	ge
 8008eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008eee:	89a3      	ldrhlt	r3, [r4, #12]
 8008ef0:	181b      	addge	r3, r3, r0
 8008ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ef6:	bfac      	ite	ge
 8008ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008efa:	81a3      	strhlt	r3, [r4, #12]
 8008efc:	bd10      	pop	{r4, pc}

08008efe <__swrite>:
 8008efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f02:	461f      	mov	r7, r3
 8008f04:	898b      	ldrh	r3, [r1, #12]
 8008f06:	05db      	lsls	r3, r3, #23
 8008f08:	4605      	mov	r5, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	4616      	mov	r6, r2
 8008f0e:	d505      	bpl.n	8008f1c <__swrite+0x1e>
 8008f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f14:	2302      	movs	r3, #2
 8008f16:	2200      	movs	r2, #0
 8008f18:	f000 f8e8 	bl	80090ec <_lseek_r>
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f26:	81a3      	strh	r3, [r4, #12]
 8008f28:	4632      	mov	r2, r6
 8008f2a:	463b      	mov	r3, r7
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f32:	f000 b8ff 	b.w	8009134 <_write_r>

08008f36 <__sseek>:
 8008f36:	b510      	push	{r4, lr}
 8008f38:	460c      	mov	r4, r1
 8008f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3e:	f000 f8d5 	bl	80090ec <_lseek_r>
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	bf15      	itete	ne
 8008f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f52:	81a3      	strheq	r3, [r4, #12]
 8008f54:	bf18      	it	ne
 8008f56:	81a3      	strhne	r3, [r4, #12]
 8008f58:	bd10      	pop	{r4, pc}

08008f5a <__sclose>:
 8008f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5e:	f000 b8b5 	b.w	80090cc <_close_r>

08008f62 <__swbuf_r>:
 8008f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f64:	460e      	mov	r6, r1
 8008f66:	4614      	mov	r4, r2
 8008f68:	4605      	mov	r5, r0
 8008f6a:	b118      	cbz	r0, 8008f74 <__swbuf_r+0x12>
 8008f6c:	6a03      	ldr	r3, [r0, #32]
 8008f6e:	b90b      	cbnz	r3, 8008f74 <__swbuf_r+0x12>
 8008f70:	f7ff fe14 	bl	8008b9c <__sinit>
 8008f74:	69a3      	ldr	r3, [r4, #24]
 8008f76:	60a3      	str	r3, [r4, #8]
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	071a      	lsls	r2, r3, #28
 8008f7c:	d501      	bpl.n	8008f82 <__swbuf_r+0x20>
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	b943      	cbnz	r3, 8008f94 <__swbuf_r+0x32>
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 f82b 	bl	8008fe0 <__swsetup_r>
 8008f8a:	b118      	cbz	r0, 8008f94 <__swbuf_r+0x32>
 8008f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f90:	4638      	mov	r0, r7
 8008f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	6922      	ldr	r2, [r4, #16]
 8008f98:	1a98      	subs	r0, r3, r2
 8008f9a:	6963      	ldr	r3, [r4, #20]
 8008f9c:	b2f6      	uxtb	r6, r6
 8008f9e:	4283      	cmp	r3, r0
 8008fa0:	4637      	mov	r7, r6
 8008fa2:	dc05      	bgt.n	8008fb0 <__swbuf_r+0x4e>
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f002 fd7c 	bl	800baa4 <_fflush_r>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d1ed      	bne.n	8008f8c <__swbuf_r+0x2a>
 8008fb0:	68a3      	ldr	r3, [r4, #8]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	60a3      	str	r3, [r4, #8]
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	6022      	str	r2, [r4, #0]
 8008fbc:	701e      	strb	r6, [r3, #0]
 8008fbe:	6962      	ldr	r2, [r4, #20]
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d004      	beq.n	8008fd0 <__swbuf_r+0x6e>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	07db      	lsls	r3, r3, #31
 8008fca:	d5e1      	bpl.n	8008f90 <__swbuf_r+0x2e>
 8008fcc:	2e0a      	cmp	r6, #10
 8008fce:	d1df      	bne.n	8008f90 <__swbuf_r+0x2e>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f002 fd66 	bl	800baa4 <_fflush_r>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d0d9      	beq.n	8008f90 <__swbuf_r+0x2e>
 8008fdc:	e7d6      	b.n	8008f8c <__swbuf_r+0x2a>
	...

08008fe0 <__swsetup_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4b29      	ldr	r3, [pc, #164]	@ (8009088 <__swsetup_r+0xa8>)
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	460c      	mov	r4, r1
 8008fea:	b118      	cbz	r0, 8008ff4 <__swsetup_r+0x14>
 8008fec:	6a03      	ldr	r3, [r0, #32]
 8008fee:	b90b      	cbnz	r3, 8008ff4 <__swsetup_r+0x14>
 8008ff0:	f7ff fdd4 	bl	8008b9c <__sinit>
 8008ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff8:	0719      	lsls	r1, r3, #28
 8008ffa:	d422      	bmi.n	8009042 <__swsetup_r+0x62>
 8008ffc:	06da      	lsls	r2, r3, #27
 8008ffe:	d407      	bmi.n	8009010 <__swsetup_r+0x30>
 8009000:	2209      	movs	r2, #9
 8009002:	602a      	str	r2, [r5, #0]
 8009004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009008:	81a3      	strh	r3, [r4, #12]
 800900a:	f04f 30ff 	mov.w	r0, #4294967295
 800900e:	e033      	b.n	8009078 <__swsetup_r+0x98>
 8009010:	0758      	lsls	r0, r3, #29
 8009012:	d512      	bpl.n	800903a <__swsetup_r+0x5a>
 8009014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009016:	b141      	cbz	r1, 800902a <__swsetup_r+0x4a>
 8009018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800901c:	4299      	cmp	r1, r3
 800901e:	d002      	beq.n	8009026 <__swsetup_r+0x46>
 8009020:	4628      	mov	r0, r5
 8009022:	f000 ff35 	bl	8009e90 <_free_r>
 8009026:	2300      	movs	r3, #0
 8009028:	6363      	str	r3, [r4, #52]	@ 0x34
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009030:	81a3      	strh	r3, [r4, #12]
 8009032:	2300      	movs	r3, #0
 8009034:	6063      	str	r3, [r4, #4]
 8009036:	6923      	ldr	r3, [r4, #16]
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f043 0308 	orr.w	r3, r3, #8
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	b94b      	cbnz	r3, 800905a <__swsetup_r+0x7a>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800904c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009050:	d003      	beq.n	800905a <__swsetup_r+0x7a>
 8009052:	4621      	mov	r1, r4
 8009054:	4628      	mov	r0, r5
 8009056:	f002 fd73 	bl	800bb40 <__smakebuf_r>
 800905a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905e:	f013 0201 	ands.w	r2, r3, #1
 8009062:	d00a      	beq.n	800907a <__swsetup_r+0x9a>
 8009064:	2200      	movs	r2, #0
 8009066:	60a2      	str	r2, [r4, #8]
 8009068:	6962      	ldr	r2, [r4, #20]
 800906a:	4252      	negs	r2, r2
 800906c:	61a2      	str	r2, [r4, #24]
 800906e:	6922      	ldr	r2, [r4, #16]
 8009070:	b942      	cbnz	r2, 8009084 <__swsetup_r+0xa4>
 8009072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009076:	d1c5      	bne.n	8009004 <__swsetup_r+0x24>
 8009078:	bd38      	pop	{r3, r4, r5, pc}
 800907a:	0799      	lsls	r1, r3, #30
 800907c:	bf58      	it	pl
 800907e:	6962      	ldrpl	r2, [r4, #20]
 8009080:	60a2      	str	r2, [r4, #8]
 8009082:	e7f4      	b.n	800906e <__swsetup_r+0x8e>
 8009084:	2000      	movs	r0, #0
 8009086:	e7f7      	b.n	8009078 <__swsetup_r+0x98>
 8009088:	20000088 	.word	0x20000088

0800908c <memset>:
 800908c:	4402      	add	r2, r0
 800908e:	4603      	mov	r3, r0
 8009090:	4293      	cmp	r3, r2
 8009092:	d100      	bne.n	8009096 <memset+0xa>
 8009094:	4770      	bx	lr
 8009096:	f803 1b01 	strb.w	r1, [r3], #1
 800909a:	e7f9      	b.n	8009090 <memset+0x4>

0800909c <strncpy>:
 800909c:	b510      	push	{r4, lr}
 800909e:	3901      	subs	r1, #1
 80090a0:	4603      	mov	r3, r0
 80090a2:	b132      	cbz	r2, 80090b2 <strncpy+0x16>
 80090a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80090a8:	f803 4b01 	strb.w	r4, [r3], #1
 80090ac:	3a01      	subs	r2, #1
 80090ae:	2c00      	cmp	r4, #0
 80090b0:	d1f7      	bne.n	80090a2 <strncpy+0x6>
 80090b2:	441a      	add	r2, r3
 80090b4:	2100      	movs	r1, #0
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d100      	bne.n	80090bc <strncpy+0x20>
 80090ba:	bd10      	pop	{r4, pc}
 80090bc:	f803 1b01 	strb.w	r1, [r3], #1
 80090c0:	e7f9      	b.n	80090b6 <strncpy+0x1a>
	...

080090c4 <_localeconv_r>:
 80090c4:	4800      	ldr	r0, [pc, #0]	@ (80090c8 <_localeconv_r+0x4>)
 80090c6:	4770      	bx	lr
 80090c8:	200001c8 	.word	0x200001c8

080090cc <_close_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4d06      	ldr	r5, [pc, #24]	@ (80090e8 <_close_r+0x1c>)
 80090d0:	2300      	movs	r3, #0
 80090d2:	4604      	mov	r4, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	f7fb f876 	bl	80041c8 <_close>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_close_r+0x1a>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_close_r+0x1a>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20000a38 	.word	0x20000a38

080090ec <_lseek_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	@ (800910c <_lseek_r+0x20>)
 80090f0:	4604      	mov	r4, r0
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	602a      	str	r2, [r5, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7fb f88b 	bl	8004216 <_lseek>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_lseek_r+0x1e>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_lseek_r+0x1e>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20000a38 	.word	0x20000a38

08009110 <_read_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d07      	ldr	r5, [pc, #28]	@ (8009130 <_read_r+0x20>)
 8009114:	4604      	mov	r4, r0
 8009116:	4608      	mov	r0, r1
 8009118:	4611      	mov	r1, r2
 800911a:	2200      	movs	r2, #0
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7fb f835 	bl	800418e <_read>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_read_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_read_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000a38 	.word	0x20000a38

08009134 <_write_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	@ (8009154 <_write_r+0x20>)
 8009138:	4604      	mov	r4, r0
 800913a:	4608      	mov	r0, r1
 800913c:	4611      	mov	r1, r2
 800913e:	2200      	movs	r2, #0
 8009140:	602a      	str	r2, [r5, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f7fa fb28 	bl	8003798 <_write>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_write_r+0x1e>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_write_r+0x1e>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20000a38 	.word	0x20000a38

08009158 <__errno>:
 8009158:	4b01      	ldr	r3, [pc, #4]	@ (8009160 <__errno+0x8>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	20000088 	.word	0x20000088

08009164 <__libc_init_array>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	4d0d      	ldr	r5, [pc, #52]	@ (800919c <__libc_init_array+0x38>)
 8009168:	4c0d      	ldr	r4, [pc, #52]	@ (80091a0 <__libc_init_array+0x3c>)
 800916a:	1b64      	subs	r4, r4, r5
 800916c:	10a4      	asrs	r4, r4, #2
 800916e:	2600      	movs	r6, #0
 8009170:	42a6      	cmp	r6, r4
 8009172:	d109      	bne.n	8009188 <__libc_init_array+0x24>
 8009174:	4d0b      	ldr	r5, [pc, #44]	@ (80091a4 <__libc_init_array+0x40>)
 8009176:	4c0c      	ldr	r4, [pc, #48]	@ (80091a8 <__libc_init_array+0x44>)
 8009178:	f003 fae4 	bl	800c744 <_init>
 800917c:	1b64      	subs	r4, r4, r5
 800917e:	10a4      	asrs	r4, r4, #2
 8009180:	2600      	movs	r6, #0
 8009182:	42a6      	cmp	r6, r4
 8009184:	d105      	bne.n	8009192 <__libc_init_array+0x2e>
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	f855 3b04 	ldr.w	r3, [r5], #4
 800918c:	4798      	blx	r3
 800918e:	3601      	adds	r6, #1
 8009190:	e7ee      	b.n	8009170 <__libc_init_array+0xc>
 8009192:	f855 3b04 	ldr.w	r3, [r5], #4
 8009196:	4798      	blx	r3
 8009198:	3601      	adds	r6, #1
 800919a:	e7f2      	b.n	8009182 <__libc_init_array+0x1e>
 800919c:	0800dd24 	.word	0x0800dd24
 80091a0:	0800dd24 	.word	0x0800dd24
 80091a4:	0800dd24 	.word	0x0800dd24
 80091a8:	0800dd28 	.word	0x0800dd28

080091ac <__retarget_lock_init_recursive>:
 80091ac:	4770      	bx	lr

080091ae <__retarget_lock_acquire_recursive>:
 80091ae:	4770      	bx	lr

080091b0 <__retarget_lock_release_recursive>:
 80091b0:	4770      	bx	lr

080091b2 <memcpy>:
 80091b2:	440a      	add	r2, r1
 80091b4:	4291      	cmp	r1, r2
 80091b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80091ba:	d100      	bne.n	80091be <memcpy+0xc>
 80091bc:	4770      	bx	lr
 80091be:	b510      	push	{r4, lr}
 80091c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091c8:	4291      	cmp	r1, r2
 80091ca:	d1f9      	bne.n	80091c0 <memcpy+0xe>
 80091cc:	bd10      	pop	{r4, pc}
	...

080091d0 <nanf>:
 80091d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80091d8 <nanf+0x8>
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	7fc00000 	.word	0x7fc00000

080091dc <quorem>:
 80091dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	6903      	ldr	r3, [r0, #16]
 80091e2:	690c      	ldr	r4, [r1, #16]
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	4607      	mov	r7, r0
 80091e8:	db7e      	blt.n	80092e8 <quorem+0x10c>
 80091ea:	3c01      	subs	r4, #1
 80091ec:	f101 0814 	add.w	r8, r1, #20
 80091f0:	00a3      	lsls	r3, r4, #2
 80091f2:	f100 0514 	add.w	r5, r0, #20
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009206:	3301      	adds	r3, #1
 8009208:	429a      	cmp	r2, r3
 800920a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800920e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009212:	d32e      	bcc.n	8009272 <quorem+0x96>
 8009214:	f04f 0a00 	mov.w	sl, #0
 8009218:	46c4      	mov	ip, r8
 800921a:	46ae      	mov	lr, r5
 800921c:	46d3      	mov	fp, sl
 800921e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009222:	b298      	uxth	r0, r3
 8009224:	fb06 a000 	mla	r0, r6, r0, sl
 8009228:	0c02      	lsrs	r2, r0, #16
 800922a:	0c1b      	lsrs	r3, r3, #16
 800922c:	fb06 2303 	mla	r3, r6, r3, r2
 8009230:	f8de 2000 	ldr.w	r2, [lr]
 8009234:	b280      	uxth	r0, r0
 8009236:	b292      	uxth	r2, r2
 8009238:	1a12      	subs	r2, r2, r0
 800923a:	445a      	add	r2, fp
 800923c:	f8de 0000 	ldr.w	r0, [lr]
 8009240:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009244:	b29b      	uxth	r3, r3
 8009246:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800924a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800924e:	b292      	uxth	r2, r2
 8009250:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009254:	45e1      	cmp	r9, ip
 8009256:	f84e 2b04 	str.w	r2, [lr], #4
 800925a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800925e:	d2de      	bcs.n	800921e <quorem+0x42>
 8009260:	9b00      	ldr	r3, [sp, #0]
 8009262:	58eb      	ldr	r3, [r5, r3]
 8009264:	b92b      	cbnz	r3, 8009272 <quorem+0x96>
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	3b04      	subs	r3, #4
 800926a:	429d      	cmp	r5, r3
 800926c:	461a      	mov	r2, r3
 800926e:	d32f      	bcc.n	80092d0 <quorem+0xf4>
 8009270:	613c      	str	r4, [r7, #16]
 8009272:	4638      	mov	r0, r7
 8009274:	f001 f9c8 	bl	800a608 <__mcmp>
 8009278:	2800      	cmp	r0, #0
 800927a:	db25      	blt.n	80092c8 <quorem+0xec>
 800927c:	4629      	mov	r1, r5
 800927e:	2000      	movs	r0, #0
 8009280:	f858 2b04 	ldr.w	r2, [r8], #4
 8009284:	f8d1 c000 	ldr.w	ip, [r1]
 8009288:	fa1f fe82 	uxth.w	lr, r2
 800928c:	fa1f f38c 	uxth.w	r3, ip
 8009290:	eba3 030e 	sub.w	r3, r3, lr
 8009294:	4403      	add	r3, r0
 8009296:	0c12      	lsrs	r2, r2, #16
 8009298:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800929c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a6:	45c1      	cmp	r9, r8
 80092a8:	f841 3b04 	str.w	r3, [r1], #4
 80092ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092b0:	d2e6      	bcs.n	8009280 <quorem+0xa4>
 80092b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ba:	b922      	cbnz	r2, 80092c6 <quorem+0xea>
 80092bc:	3b04      	subs	r3, #4
 80092be:	429d      	cmp	r5, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	d30b      	bcc.n	80092dc <quorem+0x100>
 80092c4:	613c      	str	r4, [r7, #16]
 80092c6:	3601      	adds	r6, #1
 80092c8:	4630      	mov	r0, r6
 80092ca:	b003      	add	sp, #12
 80092cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	3b04      	subs	r3, #4
 80092d4:	2a00      	cmp	r2, #0
 80092d6:	d1cb      	bne.n	8009270 <quorem+0x94>
 80092d8:	3c01      	subs	r4, #1
 80092da:	e7c6      	b.n	800926a <quorem+0x8e>
 80092dc:	6812      	ldr	r2, [r2, #0]
 80092de:	3b04      	subs	r3, #4
 80092e0:	2a00      	cmp	r2, #0
 80092e2:	d1ef      	bne.n	80092c4 <quorem+0xe8>
 80092e4:	3c01      	subs	r4, #1
 80092e6:	e7ea      	b.n	80092be <quorem+0xe2>
 80092e8:	2000      	movs	r0, #0
 80092ea:	e7ee      	b.n	80092ca <quorem+0xee>
 80092ec:	0000      	movs	r0, r0
	...

080092f0 <_dtoa_r>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	69c7      	ldr	r7, [r0, #28]
 80092f6:	b097      	sub	sp, #92	@ 0x5c
 80092f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80092fc:	ec55 4b10 	vmov	r4, r5, d0
 8009300:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009302:	9107      	str	r1, [sp, #28]
 8009304:	4681      	mov	r9, r0
 8009306:	920c      	str	r2, [sp, #48]	@ 0x30
 8009308:	9311      	str	r3, [sp, #68]	@ 0x44
 800930a:	b97f      	cbnz	r7, 800932c <_dtoa_r+0x3c>
 800930c:	2010      	movs	r0, #16
 800930e:	f000 fe09 	bl	8009f24 <malloc>
 8009312:	4602      	mov	r2, r0
 8009314:	f8c9 001c 	str.w	r0, [r9, #28]
 8009318:	b920      	cbnz	r0, 8009324 <_dtoa_r+0x34>
 800931a:	4ba9      	ldr	r3, [pc, #676]	@ (80095c0 <_dtoa_r+0x2d0>)
 800931c:	21ef      	movs	r1, #239	@ 0xef
 800931e:	48a9      	ldr	r0, [pc, #676]	@ (80095c4 <_dtoa_r+0x2d4>)
 8009320:	f002 fcb2 	bl	800bc88 <__assert_func>
 8009324:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009328:	6007      	str	r7, [r0, #0]
 800932a:	60c7      	str	r7, [r0, #12]
 800932c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009330:	6819      	ldr	r1, [r3, #0]
 8009332:	b159      	cbz	r1, 800934c <_dtoa_r+0x5c>
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	604a      	str	r2, [r1, #4]
 8009338:	2301      	movs	r3, #1
 800933a:	4093      	lsls	r3, r2
 800933c:	608b      	str	r3, [r1, #8]
 800933e:	4648      	mov	r0, r9
 8009340:	f000 fee6 	bl	800a110 <_Bfree>
 8009344:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	1e2b      	subs	r3, r5, #0
 800934e:	bfb9      	ittee	lt
 8009350:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009354:	9305      	strlt	r3, [sp, #20]
 8009356:	2300      	movge	r3, #0
 8009358:	6033      	strge	r3, [r6, #0]
 800935a:	9f05      	ldr	r7, [sp, #20]
 800935c:	4b9a      	ldr	r3, [pc, #616]	@ (80095c8 <_dtoa_r+0x2d8>)
 800935e:	bfbc      	itt	lt
 8009360:	2201      	movlt	r2, #1
 8009362:	6032      	strlt	r2, [r6, #0]
 8009364:	43bb      	bics	r3, r7
 8009366:	d112      	bne.n	800938e <_dtoa_r+0x9e>
 8009368:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800936a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009374:	4323      	orrs	r3, r4
 8009376:	f000 855a 	beq.w	8009e2e <_dtoa_r+0xb3e>
 800937a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800937c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80095dc <_dtoa_r+0x2ec>
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 855c 	beq.w	8009e3e <_dtoa_r+0xb4e>
 8009386:	f10a 0303 	add.w	r3, sl, #3
 800938a:	f000 bd56 	b.w	8009e3a <_dtoa_r+0xb4a>
 800938e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009392:	2200      	movs	r2, #0
 8009394:	ec51 0b17 	vmov	r0, r1, d7
 8009398:	2300      	movs	r3, #0
 800939a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800939e:	f7f7 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80093a2:	4680      	mov	r8, r0
 80093a4:	b158      	cbz	r0, 80093be <_dtoa_r+0xce>
 80093a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093a8:	2301      	movs	r3, #1
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093ae:	b113      	cbz	r3, 80093b6 <_dtoa_r+0xc6>
 80093b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80093b2:	4b86      	ldr	r3, [pc, #536]	@ (80095cc <_dtoa_r+0x2dc>)
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80095e0 <_dtoa_r+0x2f0>
 80093ba:	f000 bd40 	b.w	8009e3e <_dtoa_r+0xb4e>
 80093be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80093c2:	aa14      	add	r2, sp, #80	@ 0x50
 80093c4:	a915      	add	r1, sp, #84	@ 0x54
 80093c6:	4648      	mov	r0, r9
 80093c8:	f001 fa3e 	bl	800a848 <__d2b>
 80093cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80093d0:	9002      	str	r0, [sp, #8]
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	d078      	beq.n	80094c8 <_dtoa_r+0x1d8>
 80093d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80093dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80093e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80093e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80093ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80093f0:	4619      	mov	r1, r3
 80093f2:	2200      	movs	r2, #0
 80093f4:	4b76      	ldr	r3, [pc, #472]	@ (80095d0 <_dtoa_r+0x2e0>)
 80093f6:	f7f6 ff4f 	bl	8000298 <__aeabi_dsub>
 80093fa:	a36b      	add	r3, pc, #428	@ (adr r3, 80095a8 <_dtoa_r+0x2b8>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f7f7 f902 	bl	8000608 <__aeabi_dmul>
 8009404:	a36a      	add	r3, pc, #424	@ (adr r3, 80095b0 <_dtoa_r+0x2c0>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f6 ff47 	bl	800029c <__adddf3>
 800940e:	4604      	mov	r4, r0
 8009410:	4630      	mov	r0, r6
 8009412:	460d      	mov	r5, r1
 8009414:	f7f7 f88e 	bl	8000534 <__aeabi_i2d>
 8009418:	a367      	add	r3, pc, #412	@ (adr r3, 80095b8 <_dtoa_r+0x2c8>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f7 f8f3 	bl	8000608 <__aeabi_dmul>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f6 ff37 	bl	800029c <__adddf3>
 800942e:	4604      	mov	r4, r0
 8009430:	460d      	mov	r5, r1
 8009432:	f7f7 fb99 	bl	8000b68 <__aeabi_d2iz>
 8009436:	2200      	movs	r2, #0
 8009438:	4607      	mov	r7, r0
 800943a:	2300      	movs	r3, #0
 800943c:	4620      	mov	r0, r4
 800943e:	4629      	mov	r1, r5
 8009440:	f7f7 fb54 	bl	8000aec <__aeabi_dcmplt>
 8009444:	b140      	cbz	r0, 8009458 <_dtoa_r+0x168>
 8009446:	4638      	mov	r0, r7
 8009448:	f7f7 f874 	bl	8000534 <__aeabi_i2d>
 800944c:	4622      	mov	r2, r4
 800944e:	462b      	mov	r3, r5
 8009450:	f7f7 fb42 	bl	8000ad8 <__aeabi_dcmpeq>
 8009454:	b900      	cbnz	r0, 8009458 <_dtoa_r+0x168>
 8009456:	3f01      	subs	r7, #1
 8009458:	2f16      	cmp	r7, #22
 800945a:	d852      	bhi.n	8009502 <_dtoa_r+0x212>
 800945c:	4b5d      	ldr	r3, [pc, #372]	@ (80095d4 <_dtoa_r+0x2e4>)
 800945e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800946a:	f7f7 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800946e:	2800      	cmp	r0, #0
 8009470:	d049      	beq.n	8009506 <_dtoa_r+0x216>
 8009472:	3f01      	subs	r7, #1
 8009474:	2300      	movs	r3, #0
 8009476:	9310      	str	r3, [sp, #64]	@ 0x40
 8009478:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800947a:	1b9b      	subs	r3, r3, r6
 800947c:	1e5a      	subs	r2, r3, #1
 800947e:	bf45      	ittet	mi
 8009480:	f1c3 0301 	rsbmi	r3, r3, #1
 8009484:	9300      	strmi	r3, [sp, #0]
 8009486:	2300      	movpl	r3, #0
 8009488:	2300      	movmi	r3, #0
 800948a:	9206      	str	r2, [sp, #24]
 800948c:	bf54      	ite	pl
 800948e:	9300      	strpl	r3, [sp, #0]
 8009490:	9306      	strmi	r3, [sp, #24]
 8009492:	2f00      	cmp	r7, #0
 8009494:	db39      	blt.n	800950a <_dtoa_r+0x21a>
 8009496:	9b06      	ldr	r3, [sp, #24]
 8009498:	970d      	str	r7, [sp, #52]	@ 0x34
 800949a:	443b      	add	r3, r7
 800949c:	9306      	str	r3, [sp, #24]
 800949e:	2300      	movs	r3, #0
 80094a0:	9308      	str	r3, [sp, #32]
 80094a2:	9b07      	ldr	r3, [sp, #28]
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d863      	bhi.n	8009570 <_dtoa_r+0x280>
 80094a8:	2b05      	cmp	r3, #5
 80094aa:	bfc4      	itt	gt
 80094ac:	3b04      	subgt	r3, #4
 80094ae:	9307      	strgt	r3, [sp, #28]
 80094b0:	9b07      	ldr	r3, [sp, #28]
 80094b2:	f1a3 0302 	sub.w	r3, r3, #2
 80094b6:	bfcc      	ite	gt
 80094b8:	2400      	movgt	r4, #0
 80094ba:	2401      	movle	r4, #1
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d863      	bhi.n	8009588 <_dtoa_r+0x298>
 80094c0:	e8df f003 	tbb	[pc, r3]
 80094c4:	2b375452 	.word	0x2b375452
 80094c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80094cc:	441e      	add	r6, r3
 80094ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	bfc1      	itttt	gt
 80094d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80094da:	409f      	lslgt	r7, r3
 80094dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80094e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80094e4:	bfd6      	itet	le
 80094e6:	f1c3 0320 	rsble	r3, r3, #32
 80094ea:	ea47 0003 	orrgt.w	r0, r7, r3
 80094ee:	fa04 f003 	lslle.w	r0, r4, r3
 80094f2:	f7f7 f80f 	bl	8000514 <__aeabi_ui2d>
 80094f6:	2201      	movs	r2, #1
 80094f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80094fc:	3e01      	subs	r6, #1
 80094fe:	9212      	str	r2, [sp, #72]	@ 0x48
 8009500:	e776      	b.n	80093f0 <_dtoa_r+0x100>
 8009502:	2301      	movs	r3, #1
 8009504:	e7b7      	b.n	8009476 <_dtoa_r+0x186>
 8009506:	9010      	str	r0, [sp, #64]	@ 0x40
 8009508:	e7b6      	b.n	8009478 <_dtoa_r+0x188>
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	1bdb      	subs	r3, r3, r7
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	427b      	negs	r3, r7
 8009512:	9308      	str	r3, [sp, #32]
 8009514:	2300      	movs	r3, #0
 8009516:	930d      	str	r3, [sp, #52]	@ 0x34
 8009518:	e7c3      	b.n	80094a2 <_dtoa_r+0x1b2>
 800951a:	2301      	movs	r3, #1
 800951c:	9309      	str	r3, [sp, #36]	@ 0x24
 800951e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009520:	eb07 0b03 	add.w	fp, r7, r3
 8009524:	f10b 0301 	add.w	r3, fp, #1
 8009528:	2b01      	cmp	r3, #1
 800952a:	9303      	str	r3, [sp, #12]
 800952c:	bfb8      	it	lt
 800952e:	2301      	movlt	r3, #1
 8009530:	e006      	b.n	8009540 <_dtoa_r+0x250>
 8009532:	2301      	movs	r3, #1
 8009534:	9309      	str	r3, [sp, #36]	@ 0x24
 8009536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009538:	2b00      	cmp	r3, #0
 800953a:	dd28      	ble.n	800958e <_dtoa_r+0x29e>
 800953c:	469b      	mov	fp, r3
 800953e:	9303      	str	r3, [sp, #12]
 8009540:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009544:	2100      	movs	r1, #0
 8009546:	2204      	movs	r2, #4
 8009548:	f102 0514 	add.w	r5, r2, #20
 800954c:	429d      	cmp	r5, r3
 800954e:	d926      	bls.n	800959e <_dtoa_r+0x2ae>
 8009550:	6041      	str	r1, [r0, #4]
 8009552:	4648      	mov	r0, r9
 8009554:	f000 fd9c 	bl	800a090 <_Balloc>
 8009558:	4682      	mov	sl, r0
 800955a:	2800      	cmp	r0, #0
 800955c:	d142      	bne.n	80095e4 <_dtoa_r+0x2f4>
 800955e:	4b1e      	ldr	r3, [pc, #120]	@ (80095d8 <_dtoa_r+0x2e8>)
 8009560:	4602      	mov	r2, r0
 8009562:	f240 11af 	movw	r1, #431	@ 0x1af
 8009566:	e6da      	b.n	800931e <_dtoa_r+0x2e>
 8009568:	2300      	movs	r3, #0
 800956a:	e7e3      	b.n	8009534 <_dtoa_r+0x244>
 800956c:	2300      	movs	r3, #0
 800956e:	e7d5      	b.n	800951c <_dtoa_r+0x22c>
 8009570:	2401      	movs	r4, #1
 8009572:	2300      	movs	r3, #0
 8009574:	9307      	str	r3, [sp, #28]
 8009576:	9409      	str	r4, [sp, #36]	@ 0x24
 8009578:	f04f 3bff 	mov.w	fp, #4294967295
 800957c:	2200      	movs	r2, #0
 800957e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009582:	2312      	movs	r3, #18
 8009584:	920c      	str	r2, [sp, #48]	@ 0x30
 8009586:	e7db      	b.n	8009540 <_dtoa_r+0x250>
 8009588:	2301      	movs	r3, #1
 800958a:	9309      	str	r3, [sp, #36]	@ 0x24
 800958c:	e7f4      	b.n	8009578 <_dtoa_r+0x288>
 800958e:	f04f 0b01 	mov.w	fp, #1
 8009592:	f8cd b00c 	str.w	fp, [sp, #12]
 8009596:	465b      	mov	r3, fp
 8009598:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800959c:	e7d0      	b.n	8009540 <_dtoa_r+0x250>
 800959e:	3101      	adds	r1, #1
 80095a0:	0052      	lsls	r2, r2, #1
 80095a2:	e7d1      	b.n	8009548 <_dtoa_r+0x258>
 80095a4:	f3af 8000 	nop.w
 80095a8:	636f4361 	.word	0x636f4361
 80095ac:	3fd287a7 	.word	0x3fd287a7
 80095b0:	8b60c8b3 	.word	0x8b60c8b3
 80095b4:	3fc68a28 	.word	0x3fc68a28
 80095b8:	509f79fb 	.word	0x509f79fb
 80095bc:	3fd34413 	.word	0x3fd34413
 80095c0:	0800d93a 	.word	0x0800d93a
 80095c4:	0800d951 	.word	0x0800d951
 80095c8:	7ff00000 	.word	0x7ff00000
 80095cc:	0800d905 	.word	0x0800d905
 80095d0:	3ff80000 	.word	0x3ff80000
 80095d4:	0800db00 	.word	0x0800db00
 80095d8:	0800d9a9 	.word	0x0800d9a9
 80095dc:	0800d936 	.word	0x0800d936
 80095e0:	0800d904 	.word	0x0800d904
 80095e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095e8:	6018      	str	r0, [r3, #0]
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	2b0e      	cmp	r3, #14
 80095ee:	f200 80a1 	bhi.w	8009734 <_dtoa_r+0x444>
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	f000 809e 	beq.w	8009734 <_dtoa_r+0x444>
 80095f8:	2f00      	cmp	r7, #0
 80095fa:	dd33      	ble.n	8009664 <_dtoa_r+0x374>
 80095fc:	4b9c      	ldr	r3, [pc, #624]	@ (8009870 <_dtoa_r+0x580>)
 80095fe:	f007 020f 	and.w	r2, r7, #15
 8009602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009606:	ed93 7b00 	vldr	d7, [r3]
 800960a:	05f8      	lsls	r0, r7, #23
 800960c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009610:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009614:	d516      	bpl.n	8009644 <_dtoa_r+0x354>
 8009616:	4b97      	ldr	r3, [pc, #604]	@ (8009874 <_dtoa_r+0x584>)
 8009618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800961c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009620:	f7f7 f91c 	bl	800085c <__aeabi_ddiv>
 8009624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009628:	f004 040f 	and.w	r4, r4, #15
 800962c:	2603      	movs	r6, #3
 800962e:	4d91      	ldr	r5, [pc, #580]	@ (8009874 <_dtoa_r+0x584>)
 8009630:	b954      	cbnz	r4, 8009648 <_dtoa_r+0x358>
 8009632:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800963a:	f7f7 f90f 	bl	800085c <__aeabi_ddiv>
 800963e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009642:	e028      	b.n	8009696 <_dtoa_r+0x3a6>
 8009644:	2602      	movs	r6, #2
 8009646:	e7f2      	b.n	800962e <_dtoa_r+0x33e>
 8009648:	07e1      	lsls	r1, r4, #31
 800964a:	d508      	bpl.n	800965e <_dtoa_r+0x36e>
 800964c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009650:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009654:	f7f6 ffd8 	bl	8000608 <__aeabi_dmul>
 8009658:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800965c:	3601      	adds	r6, #1
 800965e:	1064      	asrs	r4, r4, #1
 8009660:	3508      	adds	r5, #8
 8009662:	e7e5      	b.n	8009630 <_dtoa_r+0x340>
 8009664:	f000 80af 	beq.w	80097c6 <_dtoa_r+0x4d6>
 8009668:	427c      	negs	r4, r7
 800966a:	4b81      	ldr	r3, [pc, #516]	@ (8009870 <_dtoa_r+0x580>)
 800966c:	4d81      	ldr	r5, [pc, #516]	@ (8009874 <_dtoa_r+0x584>)
 800966e:	f004 020f 	and.w	r2, r4, #15
 8009672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800967e:	f7f6 ffc3 	bl	8000608 <__aeabi_dmul>
 8009682:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009686:	1124      	asrs	r4, r4, #4
 8009688:	2300      	movs	r3, #0
 800968a:	2602      	movs	r6, #2
 800968c:	2c00      	cmp	r4, #0
 800968e:	f040 808f 	bne.w	80097b0 <_dtoa_r+0x4c0>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1d3      	bne.n	800963e <_dtoa_r+0x34e>
 8009696:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009698:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8094 	beq.w	80097ca <_dtoa_r+0x4da>
 80096a2:	4b75      	ldr	r3, [pc, #468]	@ (8009878 <_dtoa_r+0x588>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7f7 fa1f 	bl	8000aec <__aeabi_dcmplt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f000 808b 	beq.w	80097ca <_dtoa_r+0x4da>
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 8087 	beq.w	80097ca <_dtoa_r+0x4da>
 80096bc:	f1bb 0f00 	cmp.w	fp, #0
 80096c0:	dd34      	ble.n	800972c <_dtoa_r+0x43c>
 80096c2:	4620      	mov	r0, r4
 80096c4:	4b6d      	ldr	r3, [pc, #436]	@ (800987c <_dtoa_r+0x58c>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f6 ff9d 	bl	8000608 <__aeabi_dmul>
 80096ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096d2:	f107 38ff 	add.w	r8, r7, #4294967295
 80096d6:	3601      	adds	r6, #1
 80096d8:	465c      	mov	r4, fp
 80096da:	4630      	mov	r0, r6
 80096dc:	f7f6 ff2a 	bl	8000534 <__aeabi_i2d>
 80096e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e4:	f7f6 ff90 	bl	8000608 <__aeabi_dmul>
 80096e8:	4b65      	ldr	r3, [pc, #404]	@ (8009880 <_dtoa_r+0x590>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	f7f6 fdd6 	bl	800029c <__adddf3>
 80096f0:	4605      	mov	r5, r0
 80096f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80096f6:	2c00      	cmp	r4, #0
 80096f8:	d16a      	bne.n	80097d0 <_dtoa_r+0x4e0>
 80096fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096fe:	4b61      	ldr	r3, [pc, #388]	@ (8009884 <_dtoa_r+0x594>)
 8009700:	2200      	movs	r2, #0
 8009702:	f7f6 fdc9 	bl	8000298 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800970e:	462a      	mov	r2, r5
 8009710:	4633      	mov	r3, r6
 8009712:	f7f7 fa09 	bl	8000b28 <__aeabi_dcmpgt>
 8009716:	2800      	cmp	r0, #0
 8009718:	f040 8298 	bne.w	8009c4c <_dtoa_r+0x95c>
 800971c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009720:	462a      	mov	r2, r5
 8009722:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009726:	f7f7 f9e1 	bl	8000aec <__aeabi_dcmplt>
 800972a:	bb38      	cbnz	r0, 800977c <_dtoa_r+0x48c>
 800972c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009730:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009734:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009736:	2b00      	cmp	r3, #0
 8009738:	f2c0 8157 	blt.w	80099ea <_dtoa_r+0x6fa>
 800973c:	2f0e      	cmp	r7, #14
 800973e:	f300 8154 	bgt.w	80099ea <_dtoa_r+0x6fa>
 8009742:	4b4b      	ldr	r3, [pc, #300]	@ (8009870 <_dtoa_r+0x580>)
 8009744:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009748:	ed93 7b00 	vldr	d7, [r3]
 800974c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800974e:	2b00      	cmp	r3, #0
 8009750:	ed8d 7b00 	vstr	d7, [sp]
 8009754:	f280 80e5 	bge.w	8009922 <_dtoa_r+0x632>
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f300 80e1 	bgt.w	8009922 <_dtoa_r+0x632>
 8009760:	d10c      	bne.n	800977c <_dtoa_r+0x48c>
 8009762:	4b48      	ldr	r3, [pc, #288]	@ (8009884 <_dtoa_r+0x594>)
 8009764:	2200      	movs	r2, #0
 8009766:	ec51 0b17 	vmov	r0, r1, d7
 800976a:	f7f6 ff4d 	bl	8000608 <__aeabi_dmul>
 800976e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009772:	f7f7 f9cf 	bl	8000b14 <__aeabi_dcmpge>
 8009776:	2800      	cmp	r0, #0
 8009778:	f000 8266 	beq.w	8009c48 <_dtoa_r+0x958>
 800977c:	2400      	movs	r4, #0
 800977e:	4625      	mov	r5, r4
 8009780:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009782:	4656      	mov	r6, sl
 8009784:	ea6f 0803 	mvn.w	r8, r3
 8009788:	2700      	movs	r7, #0
 800978a:	4621      	mov	r1, r4
 800978c:	4648      	mov	r0, r9
 800978e:	f000 fcbf 	bl	800a110 <_Bfree>
 8009792:	2d00      	cmp	r5, #0
 8009794:	f000 80bd 	beq.w	8009912 <_dtoa_r+0x622>
 8009798:	b12f      	cbz	r7, 80097a6 <_dtoa_r+0x4b6>
 800979a:	42af      	cmp	r7, r5
 800979c:	d003      	beq.n	80097a6 <_dtoa_r+0x4b6>
 800979e:	4639      	mov	r1, r7
 80097a0:	4648      	mov	r0, r9
 80097a2:	f000 fcb5 	bl	800a110 <_Bfree>
 80097a6:	4629      	mov	r1, r5
 80097a8:	4648      	mov	r0, r9
 80097aa:	f000 fcb1 	bl	800a110 <_Bfree>
 80097ae:	e0b0      	b.n	8009912 <_dtoa_r+0x622>
 80097b0:	07e2      	lsls	r2, r4, #31
 80097b2:	d505      	bpl.n	80097c0 <_dtoa_r+0x4d0>
 80097b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097b8:	f7f6 ff26 	bl	8000608 <__aeabi_dmul>
 80097bc:	3601      	adds	r6, #1
 80097be:	2301      	movs	r3, #1
 80097c0:	1064      	asrs	r4, r4, #1
 80097c2:	3508      	adds	r5, #8
 80097c4:	e762      	b.n	800968c <_dtoa_r+0x39c>
 80097c6:	2602      	movs	r6, #2
 80097c8:	e765      	b.n	8009696 <_dtoa_r+0x3a6>
 80097ca:	9c03      	ldr	r4, [sp, #12]
 80097cc:	46b8      	mov	r8, r7
 80097ce:	e784      	b.n	80096da <_dtoa_r+0x3ea>
 80097d0:	4b27      	ldr	r3, [pc, #156]	@ (8009870 <_dtoa_r+0x580>)
 80097d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097dc:	4454      	add	r4, sl
 80097de:	2900      	cmp	r1, #0
 80097e0:	d054      	beq.n	800988c <_dtoa_r+0x59c>
 80097e2:	4929      	ldr	r1, [pc, #164]	@ (8009888 <_dtoa_r+0x598>)
 80097e4:	2000      	movs	r0, #0
 80097e6:	f7f7 f839 	bl	800085c <__aeabi_ddiv>
 80097ea:	4633      	mov	r3, r6
 80097ec:	462a      	mov	r2, r5
 80097ee:	f7f6 fd53 	bl	8000298 <__aeabi_dsub>
 80097f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097f6:	4656      	mov	r6, sl
 80097f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097fc:	f7f7 f9b4 	bl	8000b68 <__aeabi_d2iz>
 8009800:	4605      	mov	r5, r0
 8009802:	f7f6 fe97 	bl	8000534 <__aeabi_i2d>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800980e:	f7f6 fd43 	bl	8000298 <__aeabi_dsub>
 8009812:	3530      	adds	r5, #48	@ 0x30
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800981c:	f806 5b01 	strb.w	r5, [r6], #1
 8009820:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009824:	f7f7 f962 	bl	8000aec <__aeabi_dcmplt>
 8009828:	2800      	cmp	r0, #0
 800982a:	d172      	bne.n	8009912 <_dtoa_r+0x622>
 800982c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009830:	4911      	ldr	r1, [pc, #68]	@ (8009878 <_dtoa_r+0x588>)
 8009832:	2000      	movs	r0, #0
 8009834:	f7f6 fd30 	bl	8000298 <__aeabi_dsub>
 8009838:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800983c:	f7f7 f956 	bl	8000aec <__aeabi_dcmplt>
 8009840:	2800      	cmp	r0, #0
 8009842:	f040 80b4 	bne.w	80099ae <_dtoa_r+0x6be>
 8009846:	42a6      	cmp	r6, r4
 8009848:	f43f af70 	beq.w	800972c <_dtoa_r+0x43c>
 800984c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009850:	4b0a      	ldr	r3, [pc, #40]	@ (800987c <_dtoa_r+0x58c>)
 8009852:	2200      	movs	r2, #0
 8009854:	f7f6 fed8 	bl	8000608 <__aeabi_dmul>
 8009858:	4b08      	ldr	r3, [pc, #32]	@ (800987c <_dtoa_r+0x58c>)
 800985a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800985e:	2200      	movs	r2, #0
 8009860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009864:	f7f6 fed0 	bl	8000608 <__aeabi_dmul>
 8009868:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800986c:	e7c4      	b.n	80097f8 <_dtoa_r+0x508>
 800986e:	bf00      	nop
 8009870:	0800db00 	.word	0x0800db00
 8009874:	0800dad8 	.word	0x0800dad8
 8009878:	3ff00000 	.word	0x3ff00000
 800987c:	40240000 	.word	0x40240000
 8009880:	401c0000 	.word	0x401c0000
 8009884:	40140000 	.word	0x40140000
 8009888:	3fe00000 	.word	0x3fe00000
 800988c:	4631      	mov	r1, r6
 800988e:	4628      	mov	r0, r5
 8009890:	f7f6 feba 	bl	8000608 <__aeabi_dmul>
 8009894:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009898:	9413      	str	r4, [sp, #76]	@ 0x4c
 800989a:	4656      	mov	r6, sl
 800989c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098a0:	f7f7 f962 	bl	8000b68 <__aeabi_d2iz>
 80098a4:	4605      	mov	r5, r0
 80098a6:	f7f6 fe45 	bl	8000534 <__aeabi_i2d>
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098b2:	f7f6 fcf1 	bl	8000298 <__aeabi_dsub>
 80098b6:	3530      	adds	r5, #48	@ 0x30
 80098b8:	f806 5b01 	strb.w	r5, [r6], #1
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	42a6      	cmp	r6, r4
 80098c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098c6:	f04f 0200 	mov.w	r2, #0
 80098ca:	d124      	bne.n	8009916 <_dtoa_r+0x626>
 80098cc:	4baf      	ldr	r3, [pc, #700]	@ (8009b8c <_dtoa_r+0x89c>)
 80098ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098d2:	f7f6 fce3 	bl	800029c <__adddf3>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098de:	f7f7 f923 	bl	8000b28 <__aeabi_dcmpgt>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d163      	bne.n	80099ae <_dtoa_r+0x6be>
 80098e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098ea:	49a8      	ldr	r1, [pc, #672]	@ (8009b8c <_dtoa_r+0x89c>)
 80098ec:	2000      	movs	r0, #0
 80098ee:	f7f6 fcd3 	bl	8000298 <__aeabi_dsub>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098fa:	f7f7 f8f7 	bl	8000aec <__aeabi_dcmplt>
 80098fe:	2800      	cmp	r0, #0
 8009900:	f43f af14 	beq.w	800972c <_dtoa_r+0x43c>
 8009904:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009906:	1e73      	subs	r3, r6, #1
 8009908:	9313      	str	r3, [sp, #76]	@ 0x4c
 800990a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800990e:	2b30      	cmp	r3, #48	@ 0x30
 8009910:	d0f8      	beq.n	8009904 <_dtoa_r+0x614>
 8009912:	4647      	mov	r7, r8
 8009914:	e03b      	b.n	800998e <_dtoa_r+0x69e>
 8009916:	4b9e      	ldr	r3, [pc, #632]	@ (8009b90 <_dtoa_r+0x8a0>)
 8009918:	f7f6 fe76 	bl	8000608 <__aeabi_dmul>
 800991c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009920:	e7bc      	b.n	800989c <_dtoa_r+0x5ac>
 8009922:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009926:	4656      	mov	r6, sl
 8009928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992c:	4620      	mov	r0, r4
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 ff94 	bl	800085c <__aeabi_ddiv>
 8009934:	f7f7 f918 	bl	8000b68 <__aeabi_d2iz>
 8009938:	4680      	mov	r8, r0
 800993a:	f7f6 fdfb 	bl	8000534 <__aeabi_i2d>
 800993e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009942:	f7f6 fe61 	bl	8000608 <__aeabi_dmul>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009952:	f7f6 fca1 	bl	8000298 <__aeabi_dsub>
 8009956:	f806 4b01 	strb.w	r4, [r6], #1
 800995a:	9d03      	ldr	r5, [sp, #12]
 800995c:	eba6 040a 	sub.w	r4, r6, sl
 8009960:	42a5      	cmp	r5, r4
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	d133      	bne.n	80099d0 <_dtoa_r+0x6e0>
 8009968:	f7f6 fc98 	bl	800029c <__adddf3>
 800996c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009970:	4604      	mov	r4, r0
 8009972:	460d      	mov	r5, r1
 8009974:	f7f7 f8d8 	bl	8000b28 <__aeabi_dcmpgt>
 8009978:	b9c0      	cbnz	r0, 80099ac <_dtoa_r+0x6bc>
 800997a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f7 f8a9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009986:	b110      	cbz	r0, 800998e <_dtoa_r+0x69e>
 8009988:	f018 0f01 	tst.w	r8, #1
 800998c:	d10e      	bne.n	80099ac <_dtoa_r+0x6bc>
 800998e:	9902      	ldr	r1, [sp, #8]
 8009990:	4648      	mov	r0, r9
 8009992:	f000 fbbd 	bl	800a110 <_Bfree>
 8009996:	2300      	movs	r3, #0
 8009998:	7033      	strb	r3, [r6, #0]
 800999a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800999c:	3701      	adds	r7, #1
 800999e:	601f      	str	r7, [r3, #0]
 80099a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f000 824b 	beq.w	8009e3e <_dtoa_r+0xb4e>
 80099a8:	601e      	str	r6, [r3, #0]
 80099aa:	e248      	b.n	8009e3e <_dtoa_r+0xb4e>
 80099ac:	46b8      	mov	r8, r7
 80099ae:	4633      	mov	r3, r6
 80099b0:	461e      	mov	r6, r3
 80099b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099b6:	2a39      	cmp	r2, #57	@ 0x39
 80099b8:	d106      	bne.n	80099c8 <_dtoa_r+0x6d8>
 80099ba:	459a      	cmp	sl, r3
 80099bc:	d1f8      	bne.n	80099b0 <_dtoa_r+0x6c0>
 80099be:	2230      	movs	r2, #48	@ 0x30
 80099c0:	f108 0801 	add.w	r8, r8, #1
 80099c4:	f88a 2000 	strb.w	r2, [sl]
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	3201      	adds	r2, #1
 80099cc:	701a      	strb	r2, [r3, #0]
 80099ce:	e7a0      	b.n	8009912 <_dtoa_r+0x622>
 80099d0:	4b6f      	ldr	r3, [pc, #444]	@ (8009b90 <_dtoa_r+0x8a0>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	f7f6 fe18 	bl	8000608 <__aeabi_dmul>
 80099d8:	2200      	movs	r2, #0
 80099da:	2300      	movs	r3, #0
 80099dc:	4604      	mov	r4, r0
 80099de:	460d      	mov	r5, r1
 80099e0:	f7f7 f87a 	bl	8000ad8 <__aeabi_dcmpeq>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d09f      	beq.n	8009928 <_dtoa_r+0x638>
 80099e8:	e7d1      	b.n	800998e <_dtoa_r+0x69e>
 80099ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ec:	2a00      	cmp	r2, #0
 80099ee:	f000 80ea 	beq.w	8009bc6 <_dtoa_r+0x8d6>
 80099f2:	9a07      	ldr	r2, [sp, #28]
 80099f4:	2a01      	cmp	r2, #1
 80099f6:	f300 80cd 	bgt.w	8009b94 <_dtoa_r+0x8a4>
 80099fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099fc:	2a00      	cmp	r2, #0
 80099fe:	f000 80c1 	beq.w	8009b84 <_dtoa_r+0x894>
 8009a02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a06:	9c08      	ldr	r4, [sp, #32]
 8009a08:	9e00      	ldr	r6, [sp, #0]
 8009a0a:	9a00      	ldr	r2, [sp, #0]
 8009a0c:	441a      	add	r2, r3
 8009a0e:	9200      	str	r2, [sp, #0]
 8009a10:	9a06      	ldr	r2, [sp, #24]
 8009a12:	2101      	movs	r1, #1
 8009a14:	441a      	add	r2, r3
 8009a16:	4648      	mov	r0, r9
 8009a18:	9206      	str	r2, [sp, #24]
 8009a1a:	f000 fc77 	bl	800a30c <__i2b>
 8009a1e:	4605      	mov	r5, r0
 8009a20:	b166      	cbz	r6, 8009a3c <_dtoa_r+0x74c>
 8009a22:	9b06      	ldr	r3, [sp, #24]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dd09      	ble.n	8009a3c <_dtoa_r+0x74c>
 8009a28:	42b3      	cmp	r3, r6
 8009a2a:	9a00      	ldr	r2, [sp, #0]
 8009a2c:	bfa8      	it	ge
 8009a2e:	4633      	movge	r3, r6
 8009a30:	1ad2      	subs	r2, r2, r3
 8009a32:	9200      	str	r2, [sp, #0]
 8009a34:	9a06      	ldr	r2, [sp, #24]
 8009a36:	1af6      	subs	r6, r6, r3
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	9306      	str	r3, [sp, #24]
 8009a3c:	9b08      	ldr	r3, [sp, #32]
 8009a3e:	b30b      	cbz	r3, 8009a84 <_dtoa_r+0x794>
 8009a40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80c6 	beq.w	8009bd4 <_dtoa_r+0x8e4>
 8009a48:	2c00      	cmp	r4, #0
 8009a4a:	f000 80c0 	beq.w	8009bce <_dtoa_r+0x8de>
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4622      	mov	r2, r4
 8009a52:	4648      	mov	r0, r9
 8009a54:	f000 fd12 	bl	800a47c <__pow5mult>
 8009a58:	9a02      	ldr	r2, [sp, #8]
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	4648      	mov	r0, r9
 8009a60:	f000 fc6a 	bl	800a338 <__multiply>
 8009a64:	9902      	ldr	r1, [sp, #8]
 8009a66:	4680      	mov	r8, r0
 8009a68:	4648      	mov	r0, r9
 8009a6a:	f000 fb51 	bl	800a110 <_Bfree>
 8009a6e:	9b08      	ldr	r3, [sp, #32]
 8009a70:	1b1b      	subs	r3, r3, r4
 8009a72:	9308      	str	r3, [sp, #32]
 8009a74:	f000 80b1 	beq.w	8009bda <_dtoa_r+0x8ea>
 8009a78:	9a08      	ldr	r2, [sp, #32]
 8009a7a:	4641      	mov	r1, r8
 8009a7c:	4648      	mov	r0, r9
 8009a7e:	f000 fcfd 	bl	800a47c <__pow5mult>
 8009a82:	9002      	str	r0, [sp, #8]
 8009a84:	2101      	movs	r1, #1
 8009a86:	4648      	mov	r0, r9
 8009a88:	f000 fc40 	bl	800a30c <__i2b>
 8009a8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a8e:	4604      	mov	r4, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 81d8 	beq.w	8009e46 <_dtoa_r+0xb56>
 8009a96:	461a      	mov	r2, r3
 8009a98:	4601      	mov	r1, r0
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	f000 fcee 	bl	800a47c <__pow5mult>
 8009aa0:	9b07      	ldr	r3, [sp, #28]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	f300 809f 	bgt.w	8009be8 <_dtoa_r+0x8f8>
 8009aaa:	9b04      	ldr	r3, [sp, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f040 8097 	bne.w	8009be0 <_dtoa_r+0x8f0>
 8009ab2:	9b05      	ldr	r3, [sp, #20]
 8009ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f040 8093 	bne.w	8009be4 <_dtoa_r+0x8f4>
 8009abe:	9b05      	ldr	r3, [sp, #20]
 8009ac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ac4:	0d1b      	lsrs	r3, r3, #20
 8009ac6:	051b      	lsls	r3, r3, #20
 8009ac8:	b133      	cbz	r3, 8009ad8 <_dtoa_r+0x7e8>
 8009aca:	9b00      	ldr	r3, [sp, #0]
 8009acc:	3301      	adds	r3, #1
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	9b06      	ldr	r3, [sp, #24]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	9306      	str	r3, [sp, #24]
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	9308      	str	r3, [sp, #32]
 8009ada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 81b8 	beq.w	8009e52 <_dtoa_r+0xb62>
 8009ae2:	6923      	ldr	r3, [r4, #16]
 8009ae4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ae8:	6918      	ldr	r0, [r3, #16]
 8009aea:	f000 fbc3 	bl	800a274 <__hi0bits>
 8009aee:	f1c0 0020 	rsb	r0, r0, #32
 8009af2:	9b06      	ldr	r3, [sp, #24]
 8009af4:	4418      	add	r0, r3
 8009af6:	f010 001f 	ands.w	r0, r0, #31
 8009afa:	f000 8082 	beq.w	8009c02 <_dtoa_r+0x912>
 8009afe:	f1c0 0320 	rsb	r3, r0, #32
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	dd73      	ble.n	8009bee <_dtoa_r+0x8fe>
 8009b06:	9b00      	ldr	r3, [sp, #0]
 8009b08:	f1c0 001c 	rsb	r0, r0, #28
 8009b0c:	4403      	add	r3, r0
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	9b06      	ldr	r3, [sp, #24]
 8009b12:	4403      	add	r3, r0
 8009b14:	4406      	add	r6, r0
 8009b16:	9306      	str	r3, [sp, #24]
 8009b18:	9b00      	ldr	r3, [sp, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dd05      	ble.n	8009b2a <_dtoa_r+0x83a>
 8009b1e:	9902      	ldr	r1, [sp, #8]
 8009b20:	461a      	mov	r2, r3
 8009b22:	4648      	mov	r0, r9
 8009b24:	f000 fd04 	bl	800a530 <__lshift>
 8009b28:	9002      	str	r0, [sp, #8]
 8009b2a:	9b06      	ldr	r3, [sp, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd05      	ble.n	8009b3c <_dtoa_r+0x84c>
 8009b30:	4621      	mov	r1, r4
 8009b32:	461a      	mov	r2, r3
 8009b34:	4648      	mov	r0, r9
 8009b36:	f000 fcfb 	bl	800a530 <__lshift>
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d061      	beq.n	8009c06 <_dtoa_r+0x916>
 8009b42:	9802      	ldr	r0, [sp, #8]
 8009b44:	4621      	mov	r1, r4
 8009b46:	f000 fd5f 	bl	800a608 <__mcmp>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	da5b      	bge.n	8009c06 <_dtoa_r+0x916>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9902      	ldr	r1, [sp, #8]
 8009b52:	220a      	movs	r2, #10
 8009b54:	4648      	mov	r0, r9
 8009b56:	f000 fafd 	bl	800a154 <__multadd>
 8009b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5c:	9002      	str	r0, [sp, #8]
 8009b5e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 8177 	beq.w	8009e56 <_dtoa_r+0xb66>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	220a      	movs	r2, #10
 8009b6e:	4648      	mov	r0, r9
 8009b70:	f000 faf0 	bl	800a154 <__multadd>
 8009b74:	f1bb 0f00 	cmp.w	fp, #0
 8009b78:	4605      	mov	r5, r0
 8009b7a:	dc6f      	bgt.n	8009c5c <_dtoa_r+0x96c>
 8009b7c:	9b07      	ldr	r3, [sp, #28]
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	dc49      	bgt.n	8009c16 <_dtoa_r+0x926>
 8009b82:	e06b      	b.n	8009c5c <_dtoa_r+0x96c>
 8009b84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b8a:	e73c      	b.n	8009a06 <_dtoa_r+0x716>
 8009b8c:	3fe00000 	.word	0x3fe00000
 8009b90:	40240000 	.word	0x40240000
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	1e5c      	subs	r4, r3, #1
 8009b98:	9b08      	ldr	r3, [sp, #32]
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	db09      	blt.n	8009bb2 <_dtoa_r+0x8c2>
 8009b9e:	1b1c      	subs	r4, r3, r4
 8009ba0:	9b03      	ldr	r3, [sp, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f6bf af30 	bge.w	8009a08 <_dtoa_r+0x718>
 8009ba8:	9b00      	ldr	r3, [sp, #0]
 8009baa:	9a03      	ldr	r2, [sp, #12]
 8009bac:	1a9e      	subs	r6, r3, r2
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e72b      	b.n	8009a0a <_dtoa_r+0x71a>
 8009bb2:	9b08      	ldr	r3, [sp, #32]
 8009bb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bb6:	9408      	str	r4, [sp, #32]
 8009bb8:	1ae3      	subs	r3, r4, r3
 8009bba:	441a      	add	r2, r3
 8009bbc:	9e00      	ldr	r6, [sp, #0]
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009bc2:	2400      	movs	r4, #0
 8009bc4:	e721      	b.n	8009a0a <_dtoa_r+0x71a>
 8009bc6:	9c08      	ldr	r4, [sp, #32]
 8009bc8:	9e00      	ldr	r6, [sp, #0]
 8009bca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009bcc:	e728      	b.n	8009a20 <_dtoa_r+0x730>
 8009bce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009bd2:	e751      	b.n	8009a78 <_dtoa_r+0x788>
 8009bd4:	9a08      	ldr	r2, [sp, #32]
 8009bd6:	9902      	ldr	r1, [sp, #8]
 8009bd8:	e750      	b.n	8009a7c <_dtoa_r+0x78c>
 8009bda:	f8cd 8008 	str.w	r8, [sp, #8]
 8009bde:	e751      	b.n	8009a84 <_dtoa_r+0x794>
 8009be0:	2300      	movs	r3, #0
 8009be2:	e779      	b.n	8009ad8 <_dtoa_r+0x7e8>
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	e777      	b.n	8009ad8 <_dtoa_r+0x7e8>
 8009be8:	2300      	movs	r3, #0
 8009bea:	9308      	str	r3, [sp, #32]
 8009bec:	e779      	b.n	8009ae2 <_dtoa_r+0x7f2>
 8009bee:	d093      	beq.n	8009b18 <_dtoa_r+0x828>
 8009bf0:	9a00      	ldr	r2, [sp, #0]
 8009bf2:	331c      	adds	r3, #28
 8009bf4:	441a      	add	r2, r3
 8009bf6:	9200      	str	r2, [sp, #0]
 8009bf8:	9a06      	ldr	r2, [sp, #24]
 8009bfa:	441a      	add	r2, r3
 8009bfc:	441e      	add	r6, r3
 8009bfe:	9206      	str	r2, [sp, #24]
 8009c00:	e78a      	b.n	8009b18 <_dtoa_r+0x828>
 8009c02:	4603      	mov	r3, r0
 8009c04:	e7f4      	b.n	8009bf0 <_dtoa_r+0x900>
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	46b8      	mov	r8, r7
 8009c0c:	dc20      	bgt.n	8009c50 <_dtoa_r+0x960>
 8009c0e:	469b      	mov	fp, r3
 8009c10:	9b07      	ldr	r3, [sp, #28]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	dd1e      	ble.n	8009c54 <_dtoa_r+0x964>
 8009c16:	f1bb 0f00 	cmp.w	fp, #0
 8009c1a:	f47f adb1 	bne.w	8009780 <_dtoa_r+0x490>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	465b      	mov	r3, fp
 8009c22:	2205      	movs	r2, #5
 8009c24:	4648      	mov	r0, r9
 8009c26:	f000 fa95 	bl	800a154 <__multadd>
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	9802      	ldr	r0, [sp, #8]
 8009c30:	f000 fcea 	bl	800a608 <__mcmp>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	f77f ada3 	ble.w	8009780 <_dtoa_r+0x490>
 8009c3a:	4656      	mov	r6, sl
 8009c3c:	2331      	movs	r3, #49	@ 0x31
 8009c3e:	f806 3b01 	strb.w	r3, [r6], #1
 8009c42:	f108 0801 	add.w	r8, r8, #1
 8009c46:	e59f      	b.n	8009788 <_dtoa_r+0x498>
 8009c48:	9c03      	ldr	r4, [sp, #12]
 8009c4a:	46b8      	mov	r8, r7
 8009c4c:	4625      	mov	r5, r4
 8009c4e:	e7f4      	b.n	8009c3a <_dtoa_r+0x94a>
 8009c50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 8101 	beq.w	8009e5e <_dtoa_r+0xb6e>
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	dd05      	ble.n	8009c6c <_dtoa_r+0x97c>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4632      	mov	r2, r6
 8009c64:	4648      	mov	r0, r9
 8009c66:	f000 fc63 	bl	800a530 <__lshift>
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	9b08      	ldr	r3, [sp, #32]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d05c      	beq.n	8009d2c <_dtoa_r+0xa3c>
 8009c72:	6869      	ldr	r1, [r5, #4]
 8009c74:	4648      	mov	r0, r9
 8009c76:	f000 fa0b 	bl	800a090 <_Balloc>
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	b928      	cbnz	r0, 8009c8a <_dtoa_r+0x99a>
 8009c7e:	4b82      	ldr	r3, [pc, #520]	@ (8009e88 <_dtoa_r+0xb98>)
 8009c80:	4602      	mov	r2, r0
 8009c82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c86:	f7ff bb4a 	b.w	800931e <_dtoa_r+0x2e>
 8009c8a:	692a      	ldr	r2, [r5, #16]
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	0092      	lsls	r2, r2, #2
 8009c90:	f105 010c 	add.w	r1, r5, #12
 8009c94:	300c      	adds	r0, #12
 8009c96:	f7ff fa8c 	bl	80091b2 <memcpy>
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4648      	mov	r0, r9
 8009ca0:	f000 fc46 	bl	800a530 <__lshift>
 8009ca4:	f10a 0301 	add.w	r3, sl, #1
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	eb0a 030b 	add.w	r3, sl, fp
 8009cae:	9308      	str	r3, [sp, #32]
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	462f      	mov	r7, r5
 8009cb8:	9306      	str	r3, [sp, #24]
 8009cba:	4605      	mov	r5, r0
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	9802      	ldr	r0, [sp, #8]
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	f103 3bff 	add.w	fp, r3, #4294967295
 8009cc6:	f7ff fa89 	bl	80091dc <quorem>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	3330      	adds	r3, #48	@ 0x30
 8009cce:	9003      	str	r0, [sp, #12]
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	9802      	ldr	r0, [sp, #8]
 8009cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cd6:	f000 fc97 	bl	800a608 <__mcmp>
 8009cda:	462a      	mov	r2, r5
 8009cdc:	9004      	str	r0, [sp, #16]
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4648      	mov	r0, r9
 8009ce2:	f000 fcad 	bl	800a640 <__mdiff>
 8009ce6:	68c2      	ldr	r2, [r0, #12]
 8009ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cea:	4606      	mov	r6, r0
 8009cec:	bb02      	cbnz	r2, 8009d30 <_dtoa_r+0xa40>
 8009cee:	4601      	mov	r1, r0
 8009cf0:	9802      	ldr	r0, [sp, #8]
 8009cf2:	f000 fc89 	bl	800a608 <__mcmp>
 8009cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4648      	mov	r0, r9
 8009cfe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d02:	f000 fa05 	bl	800a110 <_Bfree>
 8009d06:	9b07      	ldr	r3, [sp, #28]
 8009d08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d0a:	9e00      	ldr	r6, [sp, #0]
 8009d0c:	ea42 0103 	orr.w	r1, r2, r3
 8009d10:	9b06      	ldr	r3, [sp, #24]
 8009d12:	4319      	orrs	r1, r3
 8009d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d16:	d10d      	bne.n	8009d34 <_dtoa_r+0xa44>
 8009d18:	2b39      	cmp	r3, #57	@ 0x39
 8009d1a:	d027      	beq.n	8009d6c <_dtoa_r+0xa7c>
 8009d1c:	9a04      	ldr	r2, [sp, #16]
 8009d1e:	2a00      	cmp	r2, #0
 8009d20:	dd01      	ble.n	8009d26 <_dtoa_r+0xa36>
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	3331      	adds	r3, #49	@ 0x31
 8009d26:	f88b 3000 	strb.w	r3, [fp]
 8009d2a:	e52e      	b.n	800978a <_dtoa_r+0x49a>
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	e7b9      	b.n	8009ca4 <_dtoa_r+0x9b4>
 8009d30:	2201      	movs	r2, #1
 8009d32:	e7e2      	b.n	8009cfa <_dtoa_r+0xa0a>
 8009d34:	9904      	ldr	r1, [sp, #16]
 8009d36:	2900      	cmp	r1, #0
 8009d38:	db04      	blt.n	8009d44 <_dtoa_r+0xa54>
 8009d3a:	9807      	ldr	r0, [sp, #28]
 8009d3c:	4301      	orrs	r1, r0
 8009d3e:	9806      	ldr	r0, [sp, #24]
 8009d40:	4301      	orrs	r1, r0
 8009d42:	d120      	bne.n	8009d86 <_dtoa_r+0xa96>
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	ddee      	ble.n	8009d26 <_dtoa_r+0xa36>
 8009d48:	9902      	ldr	r1, [sp, #8]
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	4648      	mov	r0, r9
 8009d50:	f000 fbee 	bl	800a530 <__lshift>
 8009d54:	4621      	mov	r1, r4
 8009d56:	9002      	str	r0, [sp, #8]
 8009d58:	f000 fc56 	bl	800a608 <__mcmp>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	9b00      	ldr	r3, [sp, #0]
 8009d60:	dc02      	bgt.n	8009d68 <_dtoa_r+0xa78>
 8009d62:	d1e0      	bne.n	8009d26 <_dtoa_r+0xa36>
 8009d64:	07da      	lsls	r2, r3, #31
 8009d66:	d5de      	bpl.n	8009d26 <_dtoa_r+0xa36>
 8009d68:	2b39      	cmp	r3, #57	@ 0x39
 8009d6a:	d1da      	bne.n	8009d22 <_dtoa_r+0xa32>
 8009d6c:	2339      	movs	r3, #57	@ 0x39
 8009d6e:	f88b 3000 	strb.w	r3, [fp]
 8009d72:	4633      	mov	r3, r6
 8009d74:	461e      	mov	r6, r3
 8009d76:	3b01      	subs	r3, #1
 8009d78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d7c:	2a39      	cmp	r2, #57	@ 0x39
 8009d7e:	d04e      	beq.n	8009e1e <_dtoa_r+0xb2e>
 8009d80:	3201      	adds	r2, #1
 8009d82:	701a      	strb	r2, [r3, #0]
 8009d84:	e501      	b.n	800978a <_dtoa_r+0x49a>
 8009d86:	2a00      	cmp	r2, #0
 8009d88:	dd03      	ble.n	8009d92 <_dtoa_r+0xaa2>
 8009d8a:	2b39      	cmp	r3, #57	@ 0x39
 8009d8c:	d0ee      	beq.n	8009d6c <_dtoa_r+0xa7c>
 8009d8e:	3301      	adds	r3, #1
 8009d90:	e7c9      	b.n	8009d26 <_dtoa_r+0xa36>
 8009d92:	9a00      	ldr	r2, [sp, #0]
 8009d94:	9908      	ldr	r1, [sp, #32]
 8009d96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d9a:	428a      	cmp	r2, r1
 8009d9c:	d028      	beq.n	8009df0 <_dtoa_r+0xb00>
 8009d9e:	9902      	ldr	r1, [sp, #8]
 8009da0:	2300      	movs	r3, #0
 8009da2:	220a      	movs	r2, #10
 8009da4:	4648      	mov	r0, r9
 8009da6:	f000 f9d5 	bl	800a154 <__multadd>
 8009daa:	42af      	cmp	r7, r5
 8009dac:	9002      	str	r0, [sp, #8]
 8009dae:	f04f 0300 	mov.w	r3, #0
 8009db2:	f04f 020a 	mov.w	r2, #10
 8009db6:	4639      	mov	r1, r7
 8009db8:	4648      	mov	r0, r9
 8009dba:	d107      	bne.n	8009dcc <_dtoa_r+0xadc>
 8009dbc:	f000 f9ca 	bl	800a154 <__multadd>
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	9b00      	ldr	r3, [sp, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	e777      	b.n	8009cbc <_dtoa_r+0x9cc>
 8009dcc:	f000 f9c2 	bl	800a154 <__multadd>
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	220a      	movs	r2, #10
 8009dd8:	4648      	mov	r0, r9
 8009dda:	f000 f9bb 	bl	800a154 <__multadd>
 8009dde:	4605      	mov	r5, r0
 8009de0:	e7f0      	b.n	8009dc4 <_dtoa_r+0xad4>
 8009de2:	f1bb 0f00 	cmp.w	fp, #0
 8009de6:	bfcc      	ite	gt
 8009de8:	465e      	movgt	r6, fp
 8009dea:	2601      	movle	r6, #1
 8009dec:	4456      	add	r6, sl
 8009dee:	2700      	movs	r7, #0
 8009df0:	9902      	ldr	r1, [sp, #8]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	2201      	movs	r2, #1
 8009df6:	4648      	mov	r0, r9
 8009df8:	f000 fb9a 	bl	800a530 <__lshift>
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	9002      	str	r0, [sp, #8]
 8009e00:	f000 fc02 	bl	800a608 <__mcmp>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	dcb4      	bgt.n	8009d72 <_dtoa_r+0xa82>
 8009e08:	d102      	bne.n	8009e10 <_dtoa_r+0xb20>
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	07db      	lsls	r3, r3, #31
 8009e0e:	d4b0      	bmi.n	8009d72 <_dtoa_r+0xa82>
 8009e10:	4633      	mov	r3, r6
 8009e12:	461e      	mov	r6, r3
 8009e14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e18:	2a30      	cmp	r2, #48	@ 0x30
 8009e1a:	d0fa      	beq.n	8009e12 <_dtoa_r+0xb22>
 8009e1c:	e4b5      	b.n	800978a <_dtoa_r+0x49a>
 8009e1e:	459a      	cmp	sl, r3
 8009e20:	d1a8      	bne.n	8009d74 <_dtoa_r+0xa84>
 8009e22:	2331      	movs	r3, #49	@ 0x31
 8009e24:	f108 0801 	add.w	r8, r8, #1
 8009e28:	f88a 3000 	strb.w	r3, [sl]
 8009e2c:	e4ad      	b.n	800978a <_dtoa_r+0x49a>
 8009e2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009e8c <_dtoa_r+0xb9c>
 8009e34:	b11b      	cbz	r3, 8009e3e <_dtoa_r+0xb4e>
 8009e36:	f10a 0308 	add.w	r3, sl, #8
 8009e3a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	4650      	mov	r0, sl
 8009e40:	b017      	add	sp, #92	@ 0x5c
 8009e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e46:	9b07      	ldr	r3, [sp, #28]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	f77f ae2e 	ble.w	8009aaa <_dtoa_r+0x7ba>
 8009e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e50:	9308      	str	r3, [sp, #32]
 8009e52:	2001      	movs	r0, #1
 8009e54:	e64d      	b.n	8009af2 <_dtoa_r+0x802>
 8009e56:	f1bb 0f00 	cmp.w	fp, #0
 8009e5a:	f77f aed9 	ble.w	8009c10 <_dtoa_r+0x920>
 8009e5e:	4656      	mov	r6, sl
 8009e60:	9802      	ldr	r0, [sp, #8]
 8009e62:	4621      	mov	r1, r4
 8009e64:	f7ff f9ba 	bl	80091dc <quorem>
 8009e68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8009e70:	eba6 020a 	sub.w	r2, r6, sl
 8009e74:	4593      	cmp	fp, r2
 8009e76:	ddb4      	ble.n	8009de2 <_dtoa_r+0xaf2>
 8009e78:	9902      	ldr	r1, [sp, #8]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	220a      	movs	r2, #10
 8009e7e:	4648      	mov	r0, r9
 8009e80:	f000 f968 	bl	800a154 <__multadd>
 8009e84:	9002      	str	r0, [sp, #8]
 8009e86:	e7eb      	b.n	8009e60 <_dtoa_r+0xb70>
 8009e88:	0800d9a9 	.word	0x0800d9a9
 8009e8c:	0800d92d 	.word	0x0800d92d

08009e90 <_free_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4605      	mov	r5, r0
 8009e94:	2900      	cmp	r1, #0
 8009e96:	d041      	beq.n	8009f1c <_free_r+0x8c>
 8009e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e9c:	1f0c      	subs	r4, r1, #4
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfb8      	it	lt
 8009ea2:	18e4      	addlt	r4, r4, r3
 8009ea4:	f000 f8e8 	bl	800a078 <__malloc_lock>
 8009ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f20 <_free_r+0x90>)
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	b933      	cbnz	r3, 8009ebc <_free_r+0x2c>
 8009eae:	6063      	str	r3, [r4, #4]
 8009eb0:	6014      	str	r4, [r2, #0]
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eb8:	f000 b8e4 	b.w	800a084 <__malloc_unlock>
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	d908      	bls.n	8009ed2 <_free_r+0x42>
 8009ec0:	6820      	ldr	r0, [r4, #0]
 8009ec2:	1821      	adds	r1, r4, r0
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	bf01      	itttt	eq
 8009ec8:	6819      	ldreq	r1, [r3, #0]
 8009eca:	685b      	ldreq	r3, [r3, #4]
 8009ecc:	1809      	addeq	r1, r1, r0
 8009ece:	6021      	streq	r1, [r4, #0]
 8009ed0:	e7ed      	b.n	8009eae <_free_r+0x1e>
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	b10b      	cbz	r3, 8009edc <_free_r+0x4c>
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	d9fa      	bls.n	8009ed2 <_free_r+0x42>
 8009edc:	6811      	ldr	r1, [r2, #0]
 8009ede:	1850      	adds	r0, r2, r1
 8009ee0:	42a0      	cmp	r0, r4
 8009ee2:	d10b      	bne.n	8009efc <_free_r+0x6c>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	4401      	add	r1, r0
 8009ee8:	1850      	adds	r0, r2, r1
 8009eea:	4283      	cmp	r3, r0
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	d1e0      	bne.n	8009eb2 <_free_r+0x22>
 8009ef0:	6818      	ldr	r0, [r3, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	6053      	str	r3, [r2, #4]
 8009ef6:	4408      	add	r0, r1
 8009ef8:	6010      	str	r0, [r2, #0]
 8009efa:	e7da      	b.n	8009eb2 <_free_r+0x22>
 8009efc:	d902      	bls.n	8009f04 <_free_r+0x74>
 8009efe:	230c      	movs	r3, #12
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	e7d6      	b.n	8009eb2 <_free_r+0x22>
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	1821      	adds	r1, r4, r0
 8009f08:	428b      	cmp	r3, r1
 8009f0a:	bf04      	itt	eq
 8009f0c:	6819      	ldreq	r1, [r3, #0]
 8009f0e:	685b      	ldreq	r3, [r3, #4]
 8009f10:	6063      	str	r3, [r4, #4]
 8009f12:	bf04      	itt	eq
 8009f14:	1809      	addeq	r1, r1, r0
 8009f16:	6021      	streq	r1, [r4, #0]
 8009f18:	6054      	str	r4, [r2, #4]
 8009f1a:	e7ca      	b.n	8009eb2 <_free_r+0x22>
 8009f1c:	bd38      	pop	{r3, r4, r5, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000a44 	.word	0x20000a44

08009f24 <malloc>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	@ (8009f30 <malloc+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f000 b825 	b.w	8009f78 <_malloc_r>
 8009f2e:	bf00      	nop
 8009f30:	20000088 	.word	0x20000088

08009f34 <sbrk_aligned>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4e0f      	ldr	r6, [pc, #60]	@ (8009f74 <sbrk_aligned+0x40>)
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	b911      	cbnz	r1, 8009f46 <sbrk_aligned+0x12>
 8009f40:	f001 fe88 	bl	800bc54 <_sbrk_r>
 8009f44:	6030      	str	r0, [r6, #0]
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f001 fe83 	bl	800bc54 <_sbrk_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d103      	bne.n	8009f5a <sbrk_aligned+0x26>
 8009f52:	f04f 34ff 	mov.w	r4, #4294967295
 8009f56:	4620      	mov	r0, r4
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	1cc4      	adds	r4, r0, #3
 8009f5c:	f024 0403 	bic.w	r4, r4, #3
 8009f60:	42a0      	cmp	r0, r4
 8009f62:	d0f8      	beq.n	8009f56 <sbrk_aligned+0x22>
 8009f64:	1a21      	subs	r1, r4, r0
 8009f66:	4628      	mov	r0, r5
 8009f68:	f001 fe74 	bl	800bc54 <_sbrk_r>
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d1f2      	bne.n	8009f56 <sbrk_aligned+0x22>
 8009f70:	e7ef      	b.n	8009f52 <sbrk_aligned+0x1e>
 8009f72:	bf00      	nop
 8009f74:	20000a40 	.word	0x20000a40

08009f78 <_malloc_r>:
 8009f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f7c:	1ccd      	adds	r5, r1, #3
 8009f7e:	f025 0503 	bic.w	r5, r5, #3
 8009f82:	3508      	adds	r5, #8
 8009f84:	2d0c      	cmp	r5, #12
 8009f86:	bf38      	it	cc
 8009f88:	250c      	movcc	r5, #12
 8009f8a:	2d00      	cmp	r5, #0
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	db01      	blt.n	8009f94 <_malloc_r+0x1c>
 8009f90:	42a9      	cmp	r1, r5
 8009f92:	d904      	bls.n	8009f9e <_malloc_r+0x26>
 8009f94:	230c      	movs	r3, #12
 8009f96:	6033      	str	r3, [r6, #0]
 8009f98:	2000      	movs	r0, #0
 8009f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a074 <_malloc_r+0xfc>
 8009fa2:	f000 f869 	bl	800a078 <__malloc_lock>
 8009fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8009faa:	461c      	mov	r4, r3
 8009fac:	bb44      	cbnz	r4, 800a000 <_malloc_r+0x88>
 8009fae:	4629      	mov	r1, r5
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7ff ffbf 	bl	8009f34 <sbrk_aligned>
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	4604      	mov	r4, r0
 8009fba:	d158      	bne.n	800a06e <_malloc_r+0xf6>
 8009fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8009fc0:	4627      	mov	r7, r4
 8009fc2:	2f00      	cmp	r7, #0
 8009fc4:	d143      	bne.n	800a04e <_malloc_r+0xd6>
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	d04b      	beq.n	800a062 <_malloc_r+0xea>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	4639      	mov	r1, r7
 8009fce:	4630      	mov	r0, r6
 8009fd0:	eb04 0903 	add.w	r9, r4, r3
 8009fd4:	f001 fe3e 	bl	800bc54 <_sbrk_r>
 8009fd8:	4581      	cmp	r9, r0
 8009fda:	d142      	bne.n	800a062 <_malloc_r+0xea>
 8009fdc:	6821      	ldr	r1, [r4, #0]
 8009fde:	1a6d      	subs	r5, r5, r1
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ffa6 	bl	8009f34 <sbrk_aligned>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d03a      	beq.n	800a062 <_malloc_r+0xea>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	442b      	add	r3, r5
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	bb62      	cbnz	r2, 800a054 <_malloc_r+0xdc>
 8009ffa:	f8c8 7000 	str.w	r7, [r8]
 8009ffe:	e00f      	b.n	800a020 <_malloc_r+0xa8>
 800a000:	6822      	ldr	r2, [r4, #0]
 800a002:	1b52      	subs	r2, r2, r5
 800a004:	d420      	bmi.n	800a048 <_malloc_r+0xd0>
 800a006:	2a0b      	cmp	r2, #11
 800a008:	d917      	bls.n	800a03a <_malloc_r+0xc2>
 800a00a:	1961      	adds	r1, r4, r5
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	6025      	str	r5, [r4, #0]
 800a010:	bf18      	it	ne
 800a012:	6059      	strne	r1, [r3, #4]
 800a014:	6863      	ldr	r3, [r4, #4]
 800a016:	bf08      	it	eq
 800a018:	f8c8 1000 	streq.w	r1, [r8]
 800a01c:	5162      	str	r2, [r4, r5]
 800a01e:	604b      	str	r3, [r1, #4]
 800a020:	4630      	mov	r0, r6
 800a022:	f000 f82f 	bl	800a084 <__malloc_unlock>
 800a026:	f104 000b 	add.w	r0, r4, #11
 800a02a:	1d23      	adds	r3, r4, #4
 800a02c:	f020 0007 	bic.w	r0, r0, #7
 800a030:	1ac2      	subs	r2, r0, r3
 800a032:	bf1c      	itt	ne
 800a034:	1a1b      	subne	r3, r3, r0
 800a036:	50a3      	strne	r3, [r4, r2]
 800a038:	e7af      	b.n	8009f9a <_malloc_r+0x22>
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	bf0c      	ite	eq
 800a040:	f8c8 2000 	streq.w	r2, [r8]
 800a044:	605a      	strne	r2, [r3, #4]
 800a046:	e7eb      	b.n	800a020 <_malloc_r+0xa8>
 800a048:	4623      	mov	r3, r4
 800a04a:	6864      	ldr	r4, [r4, #4]
 800a04c:	e7ae      	b.n	8009fac <_malloc_r+0x34>
 800a04e:	463c      	mov	r4, r7
 800a050:	687f      	ldr	r7, [r7, #4]
 800a052:	e7b6      	b.n	8009fc2 <_malloc_r+0x4a>
 800a054:	461a      	mov	r2, r3
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	42a3      	cmp	r3, r4
 800a05a:	d1fb      	bne.n	800a054 <_malloc_r+0xdc>
 800a05c:	2300      	movs	r3, #0
 800a05e:	6053      	str	r3, [r2, #4]
 800a060:	e7de      	b.n	800a020 <_malloc_r+0xa8>
 800a062:	230c      	movs	r3, #12
 800a064:	6033      	str	r3, [r6, #0]
 800a066:	4630      	mov	r0, r6
 800a068:	f000 f80c 	bl	800a084 <__malloc_unlock>
 800a06c:	e794      	b.n	8009f98 <_malloc_r+0x20>
 800a06e:	6005      	str	r5, [r0, #0]
 800a070:	e7d6      	b.n	800a020 <_malloc_r+0xa8>
 800a072:	bf00      	nop
 800a074:	20000a44 	.word	0x20000a44

0800a078 <__malloc_lock>:
 800a078:	4801      	ldr	r0, [pc, #4]	@ (800a080 <__malloc_lock+0x8>)
 800a07a:	f7ff b898 	b.w	80091ae <__retarget_lock_acquire_recursive>
 800a07e:	bf00      	nop
 800a080:	20000a3c 	.word	0x20000a3c

0800a084 <__malloc_unlock>:
 800a084:	4801      	ldr	r0, [pc, #4]	@ (800a08c <__malloc_unlock+0x8>)
 800a086:	f7ff b893 	b.w	80091b0 <__retarget_lock_release_recursive>
 800a08a:	bf00      	nop
 800a08c:	20000a3c 	.word	0x20000a3c

0800a090 <_Balloc>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	69c6      	ldr	r6, [r0, #28]
 800a094:	4604      	mov	r4, r0
 800a096:	460d      	mov	r5, r1
 800a098:	b976      	cbnz	r6, 800a0b8 <_Balloc+0x28>
 800a09a:	2010      	movs	r0, #16
 800a09c:	f7ff ff42 	bl	8009f24 <malloc>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	61e0      	str	r0, [r4, #28]
 800a0a4:	b920      	cbnz	r0, 800a0b0 <_Balloc+0x20>
 800a0a6:	4b18      	ldr	r3, [pc, #96]	@ (800a108 <_Balloc+0x78>)
 800a0a8:	4818      	ldr	r0, [pc, #96]	@ (800a10c <_Balloc+0x7c>)
 800a0aa:	216b      	movs	r1, #107	@ 0x6b
 800a0ac:	f001 fdec 	bl	800bc88 <__assert_func>
 800a0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0b4:	6006      	str	r6, [r0, #0]
 800a0b6:	60c6      	str	r6, [r0, #12]
 800a0b8:	69e6      	ldr	r6, [r4, #28]
 800a0ba:	68f3      	ldr	r3, [r6, #12]
 800a0bc:	b183      	cbz	r3, 800a0e0 <_Balloc+0x50>
 800a0be:	69e3      	ldr	r3, [r4, #28]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0c6:	b9b8      	cbnz	r0, 800a0f8 <_Balloc+0x68>
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	fa01 f605 	lsl.w	r6, r1, r5
 800a0ce:	1d72      	adds	r2, r6, #5
 800a0d0:	0092      	lsls	r2, r2, #2
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f001 fdf6 	bl	800bcc4 <_calloc_r>
 800a0d8:	b160      	cbz	r0, 800a0f4 <_Balloc+0x64>
 800a0da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0de:	e00e      	b.n	800a0fe <_Balloc+0x6e>
 800a0e0:	2221      	movs	r2, #33	@ 0x21
 800a0e2:	2104      	movs	r1, #4
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f001 fded 	bl	800bcc4 <_calloc_r>
 800a0ea:	69e3      	ldr	r3, [r4, #28]
 800a0ec:	60f0      	str	r0, [r6, #12]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e4      	bne.n	800a0be <_Balloc+0x2e>
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	6802      	ldr	r2, [r0, #0]
 800a0fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0fe:	2300      	movs	r3, #0
 800a100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a104:	e7f7      	b.n	800a0f6 <_Balloc+0x66>
 800a106:	bf00      	nop
 800a108:	0800d93a 	.word	0x0800d93a
 800a10c:	0800d9ba 	.word	0x0800d9ba

0800a110 <_Bfree>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	69c6      	ldr	r6, [r0, #28]
 800a114:	4605      	mov	r5, r0
 800a116:	460c      	mov	r4, r1
 800a118:	b976      	cbnz	r6, 800a138 <_Bfree+0x28>
 800a11a:	2010      	movs	r0, #16
 800a11c:	f7ff ff02 	bl	8009f24 <malloc>
 800a120:	4602      	mov	r2, r0
 800a122:	61e8      	str	r0, [r5, #28]
 800a124:	b920      	cbnz	r0, 800a130 <_Bfree+0x20>
 800a126:	4b09      	ldr	r3, [pc, #36]	@ (800a14c <_Bfree+0x3c>)
 800a128:	4809      	ldr	r0, [pc, #36]	@ (800a150 <_Bfree+0x40>)
 800a12a:	218f      	movs	r1, #143	@ 0x8f
 800a12c:	f001 fdac 	bl	800bc88 <__assert_func>
 800a130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a134:	6006      	str	r6, [r0, #0]
 800a136:	60c6      	str	r6, [r0, #12]
 800a138:	b13c      	cbz	r4, 800a14a <_Bfree+0x3a>
 800a13a:	69eb      	ldr	r3, [r5, #28]
 800a13c:	6862      	ldr	r2, [r4, #4]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a144:	6021      	str	r1, [r4, #0]
 800a146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	0800d93a 	.word	0x0800d93a
 800a150:	0800d9ba 	.word	0x0800d9ba

0800a154 <__multadd>:
 800a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a158:	690d      	ldr	r5, [r1, #16]
 800a15a:	4607      	mov	r7, r0
 800a15c:	460c      	mov	r4, r1
 800a15e:	461e      	mov	r6, r3
 800a160:	f101 0c14 	add.w	ip, r1, #20
 800a164:	2000      	movs	r0, #0
 800a166:	f8dc 3000 	ldr.w	r3, [ip]
 800a16a:	b299      	uxth	r1, r3
 800a16c:	fb02 6101 	mla	r1, r2, r1, r6
 800a170:	0c1e      	lsrs	r6, r3, #16
 800a172:	0c0b      	lsrs	r3, r1, #16
 800a174:	fb02 3306 	mla	r3, r2, r6, r3
 800a178:	b289      	uxth	r1, r1
 800a17a:	3001      	adds	r0, #1
 800a17c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a180:	4285      	cmp	r5, r0
 800a182:	f84c 1b04 	str.w	r1, [ip], #4
 800a186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a18a:	dcec      	bgt.n	800a166 <__multadd+0x12>
 800a18c:	b30e      	cbz	r6, 800a1d2 <__multadd+0x7e>
 800a18e:	68a3      	ldr	r3, [r4, #8]
 800a190:	42ab      	cmp	r3, r5
 800a192:	dc19      	bgt.n	800a1c8 <__multadd+0x74>
 800a194:	6861      	ldr	r1, [r4, #4]
 800a196:	4638      	mov	r0, r7
 800a198:	3101      	adds	r1, #1
 800a19a:	f7ff ff79 	bl	800a090 <_Balloc>
 800a19e:	4680      	mov	r8, r0
 800a1a0:	b928      	cbnz	r0, 800a1ae <__multadd+0x5a>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <__multadd+0x84>)
 800a1a6:	480d      	ldr	r0, [pc, #52]	@ (800a1dc <__multadd+0x88>)
 800a1a8:	21ba      	movs	r1, #186	@ 0xba
 800a1aa:	f001 fd6d 	bl	800bc88 <__assert_func>
 800a1ae:	6922      	ldr	r2, [r4, #16]
 800a1b0:	3202      	adds	r2, #2
 800a1b2:	f104 010c 	add.w	r1, r4, #12
 800a1b6:	0092      	lsls	r2, r2, #2
 800a1b8:	300c      	adds	r0, #12
 800a1ba:	f7fe fffa 	bl	80091b2 <memcpy>
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff ffa5 	bl	800a110 <_Bfree>
 800a1c6:	4644      	mov	r4, r8
 800a1c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1cc:	3501      	adds	r5, #1
 800a1ce:	615e      	str	r6, [r3, #20]
 800a1d0:	6125      	str	r5, [r4, #16]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d8:	0800d9a9 	.word	0x0800d9a9
 800a1dc:	0800d9ba 	.word	0x0800d9ba

0800a1e0 <__s2b>:
 800a1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	4615      	mov	r5, r2
 800a1e8:	461f      	mov	r7, r3
 800a1ea:	2209      	movs	r2, #9
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	db09      	blt.n	800a210 <__s2b+0x30>
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	f7ff ff47 	bl	800a090 <_Balloc>
 800a202:	b940      	cbnz	r0, 800a216 <__s2b+0x36>
 800a204:	4602      	mov	r2, r0
 800a206:	4b19      	ldr	r3, [pc, #100]	@ (800a26c <__s2b+0x8c>)
 800a208:	4819      	ldr	r0, [pc, #100]	@ (800a270 <__s2b+0x90>)
 800a20a:	21d3      	movs	r1, #211	@ 0xd3
 800a20c:	f001 fd3c 	bl	800bc88 <__assert_func>
 800a210:	0052      	lsls	r2, r2, #1
 800a212:	3101      	adds	r1, #1
 800a214:	e7f0      	b.n	800a1f8 <__s2b+0x18>
 800a216:	9b08      	ldr	r3, [sp, #32]
 800a218:	6143      	str	r3, [r0, #20]
 800a21a:	2d09      	cmp	r5, #9
 800a21c:	f04f 0301 	mov.w	r3, #1
 800a220:	6103      	str	r3, [r0, #16]
 800a222:	dd16      	ble.n	800a252 <__s2b+0x72>
 800a224:	f104 0909 	add.w	r9, r4, #9
 800a228:	46c8      	mov	r8, r9
 800a22a:	442c      	add	r4, r5
 800a22c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a230:	4601      	mov	r1, r0
 800a232:	3b30      	subs	r3, #48	@ 0x30
 800a234:	220a      	movs	r2, #10
 800a236:	4630      	mov	r0, r6
 800a238:	f7ff ff8c 	bl	800a154 <__multadd>
 800a23c:	45a0      	cmp	r8, r4
 800a23e:	d1f5      	bne.n	800a22c <__s2b+0x4c>
 800a240:	f1a5 0408 	sub.w	r4, r5, #8
 800a244:	444c      	add	r4, r9
 800a246:	1b2d      	subs	r5, r5, r4
 800a248:	1963      	adds	r3, r4, r5
 800a24a:	42bb      	cmp	r3, r7
 800a24c:	db04      	blt.n	800a258 <__s2b+0x78>
 800a24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a252:	340a      	adds	r4, #10
 800a254:	2509      	movs	r5, #9
 800a256:	e7f6      	b.n	800a246 <__s2b+0x66>
 800a258:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a25c:	4601      	mov	r1, r0
 800a25e:	3b30      	subs	r3, #48	@ 0x30
 800a260:	220a      	movs	r2, #10
 800a262:	4630      	mov	r0, r6
 800a264:	f7ff ff76 	bl	800a154 <__multadd>
 800a268:	e7ee      	b.n	800a248 <__s2b+0x68>
 800a26a:	bf00      	nop
 800a26c:	0800d9a9 	.word	0x0800d9a9
 800a270:	0800d9ba 	.word	0x0800d9ba

0800a274 <__hi0bits>:
 800a274:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a278:	4603      	mov	r3, r0
 800a27a:	bf36      	itet	cc
 800a27c:	0403      	lslcc	r3, r0, #16
 800a27e:	2000      	movcs	r0, #0
 800a280:	2010      	movcc	r0, #16
 800a282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a286:	bf3c      	itt	cc
 800a288:	021b      	lslcc	r3, r3, #8
 800a28a:	3008      	addcc	r0, #8
 800a28c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a290:	bf3c      	itt	cc
 800a292:	011b      	lslcc	r3, r3, #4
 800a294:	3004      	addcc	r0, #4
 800a296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a29a:	bf3c      	itt	cc
 800a29c:	009b      	lslcc	r3, r3, #2
 800a29e:	3002      	addcc	r0, #2
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	db05      	blt.n	800a2b0 <__hi0bits+0x3c>
 800a2a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2a8:	f100 0001 	add.w	r0, r0, #1
 800a2ac:	bf08      	it	eq
 800a2ae:	2020      	moveq	r0, #32
 800a2b0:	4770      	bx	lr

0800a2b2 <__lo0bits>:
 800a2b2:	6803      	ldr	r3, [r0, #0]
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	f013 0007 	ands.w	r0, r3, #7
 800a2ba:	d00b      	beq.n	800a2d4 <__lo0bits+0x22>
 800a2bc:	07d9      	lsls	r1, r3, #31
 800a2be:	d421      	bmi.n	800a304 <__lo0bits+0x52>
 800a2c0:	0798      	lsls	r0, r3, #30
 800a2c2:	bf49      	itett	mi
 800a2c4:	085b      	lsrmi	r3, r3, #1
 800a2c6:	089b      	lsrpl	r3, r3, #2
 800a2c8:	2001      	movmi	r0, #1
 800a2ca:	6013      	strmi	r3, [r2, #0]
 800a2cc:	bf5c      	itt	pl
 800a2ce:	6013      	strpl	r3, [r2, #0]
 800a2d0:	2002      	movpl	r0, #2
 800a2d2:	4770      	bx	lr
 800a2d4:	b299      	uxth	r1, r3
 800a2d6:	b909      	cbnz	r1, 800a2dc <__lo0bits+0x2a>
 800a2d8:	0c1b      	lsrs	r3, r3, #16
 800a2da:	2010      	movs	r0, #16
 800a2dc:	b2d9      	uxtb	r1, r3
 800a2de:	b909      	cbnz	r1, 800a2e4 <__lo0bits+0x32>
 800a2e0:	3008      	adds	r0, #8
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	0719      	lsls	r1, r3, #28
 800a2e6:	bf04      	itt	eq
 800a2e8:	091b      	lsreq	r3, r3, #4
 800a2ea:	3004      	addeq	r0, #4
 800a2ec:	0799      	lsls	r1, r3, #30
 800a2ee:	bf04      	itt	eq
 800a2f0:	089b      	lsreq	r3, r3, #2
 800a2f2:	3002      	addeq	r0, #2
 800a2f4:	07d9      	lsls	r1, r3, #31
 800a2f6:	d403      	bmi.n	800a300 <__lo0bits+0x4e>
 800a2f8:	085b      	lsrs	r3, r3, #1
 800a2fa:	f100 0001 	add.w	r0, r0, #1
 800a2fe:	d003      	beq.n	800a308 <__lo0bits+0x56>
 800a300:	6013      	str	r3, [r2, #0]
 800a302:	4770      	bx	lr
 800a304:	2000      	movs	r0, #0
 800a306:	4770      	bx	lr
 800a308:	2020      	movs	r0, #32
 800a30a:	4770      	bx	lr

0800a30c <__i2b>:
 800a30c:	b510      	push	{r4, lr}
 800a30e:	460c      	mov	r4, r1
 800a310:	2101      	movs	r1, #1
 800a312:	f7ff febd 	bl	800a090 <_Balloc>
 800a316:	4602      	mov	r2, r0
 800a318:	b928      	cbnz	r0, 800a326 <__i2b+0x1a>
 800a31a:	4b05      	ldr	r3, [pc, #20]	@ (800a330 <__i2b+0x24>)
 800a31c:	4805      	ldr	r0, [pc, #20]	@ (800a334 <__i2b+0x28>)
 800a31e:	f240 1145 	movw	r1, #325	@ 0x145
 800a322:	f001 fcb1 	bl	800bc88 <__assert_func>
 800a326:	2301      	movs	r3, #1
 800a328:	6144      	str	r4, [r0, #20]
 800a32a:	6103      	str	r3, [r0, #16]
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	bf00      	nop
 800a330:	0800d9a9 	.word	0x0800d9a9
 800a334:	0800d9ba 	.word	0x0800d9ba

0800a338 <__multiply>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	4617      	mov	r7, r2
 800a33e:	690a      	ldr	r2, [r1, #16]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	429a      	cmp	r2, r3
 800a344:	bfa8      	it	ge
 800a346:	463b      	movge	r3, r7
 800a348:	4689      	mov	r9, r1
 800a34a:	bfa4      	itt	ge
 800a34c:	460f      	movge	r7, r1
 800a34e:	4699      	movge	r9, r3
 800a350:	693d      	ldr	r5, [r7, #16]
 800a352:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	eb05 060a 	add.w	r6, r5, sl
 800a35e:	42b3      	cmp	r3, r6
 800a360:	b085      	sub	sp, #20
 800a362:	bfb8      	it	lt
 800a364:	3101      	addlt	r1, #1
 800a366:	f7ff fe93 	bl	800a090 <_Balloc>
 800a36a:	b930      	cbnz	r0, 800a37a <__multiply+0x42>
 800a36c:	4602      	mov	r2, r0
 800a36e:	4b41      	ldr	r3, [pc, #260]	@ (800a474 <__multiply+0x13c>)
 800a370:	4841      	ldr	r0, [pc, #260]	@ (800a478 <__multiply+0x140>)
 800a372:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a376:	f001 fc87 	bl	800bc88 <__assert_func>
 800a37a:	f100 0414 	add.w	r4, r0, #20
 800a37e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a382:	4623      	mov	r3, r4
 800a384:	2200      	movs	r2, #0
 800a386:	4573      	cmp	r3, lr
 800a388:	d320      	bcc.n	800a3cc <__multiply+0x94>
 800a38a:	f107 0814 	add.w	r8, r7, #20
 800a38e:	f109 0114 	add.w	r1, r9, #20
 800a392:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a396:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	1beb      	subs	r3, r5, r7
 800a39e:	3b15      	subs	r3, #21
 800a3a0:	f023 0303 	bic.w	r3, r3, #3
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	3715      	adds	r7, #21
 800a3a8:	42bd      	cmp	r5, r7
 800a3aa:	bf38      	it	cc
 800a3ac:	2304      	movcc	r3, #4
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	9b02      	ldr	r3, [sp, #8]
 800a3b2:	9103      	str	r1, [sp, #12]
 800a3b4:	428b      	cmp	r3, r1
 800a3b6:	d80c      	bhi.n	800a3d2 <__multiply+0x9a>
 800a3b8:	2e00      	cmp	r6, #0
 800a3ba:	dd03      	ble.n	800a3c4 <__multiply+0x8c>
 800a3bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d055      	beq.n	800a470 <__multiply+0x138>
 800a3c4:	6106      	str	r6, [r0, #16]
 800a3c6:	b005      	add	sp, #20
 800a3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3cc:	f843 2b04 	str.w	r2, [r3], #4
 800a3d0:	e7d9      	b.n	800a386 <__multiply+0x4e>
 800a3d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3d6:	f1ba 0f00 	cmp.w	sl, #0
 800a3da:	d01f      	beq.n	800a41c <__multiply+0xe4>
 800a3dc:	46c4      	mov	ip, r8
 800a3de:	46a1      	mov	r9, r4
 800a3e0:	2700      	movs	r7, #0
 800a3e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3e6:	f8d9 3000 	ldr.w	r3, [r9]
 800a3ea:	fa1f fb82 	uxth.w	fp, r2
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a3f4:	443b      	add	r3, r7
 800a3f6:	f8d9 7000 	ldr.w	r7, [r9]
 800a3fa:	0c12      	lsrs	r2, r2, #16
 800a3fc:	0c3f      	lsrs	r7, r7, #16
 800a3fe:	fb0a 7202 	mla	r2, sl, r2, r7
 800a402:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a406:	b29b      	uxth	r3, r3
 800a408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a40c:	4565      	cmp	r5, ip
 800a40e:	f849 3b04 	str.w	r3, [r9], #4
 800a412:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a416:	d8e4      	bhi.n	800a3e2 <__multiply+0xaa>
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	50e7      	str	r7, [r4, r3]
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a422:	3104      	adds	r1, #4
 800a424:	f1b9 0f00 	cmp.w	r9, #0
 800a428:	d020      	beq.n	800a46c <__multiply+0x134>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	4647      	mov	r7, r8
 800a42e:	46a4      	mov	ip, r4
 800a430:	f04f 0a00 	mov.w	sl, #0
 800a434:	f8b7 b000 	ldrh.w	fp, [r7]
 800a438:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a43c:	fb09 220b 	mla	r2, r9, fp, r2
 800a440:	4452      	add	r2, sl
 800a442:	b29b      	uxth	r3, r3
 800a444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a448:	f84c 3b04 	str.w	r3, [ip], #4
 800a44c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a450:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a454:	f8bc 3000 	ldrh.w	r3, [ip]
 800a458:	fb09 330a 	mla	r3, r9, sl, r3
 800a45c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a460:	42bd      	cmp	r5, r7
 800a462:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a466:	d8e5      	bhi.n	800a434 <__multiply+0xfc>
 800a468:	9a01      	ldr	r2, [sp, #4]
 800a46a:	50a3      	str	r3, [r4, r2]
 800a46c:	3404      	adds	r4, #4
 800a46e:	e79f      	b.n	800a3b0 <__multiply+0x78>
 800a470:	3e01      	subs	r6, #1
 800a472:	e7a1      	b.n	800a3b8 <__multiply+0x80>
 800a474:	0800d9a9 	.word	0x0800d9a9
 800a478:	0800d9ba 	.word	0x0800d9ba

0800a47c <__pow5mult>:
 800a47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a480:	4615      	mov	r5, r2
 800a482:	f012 0203 	ands.w	r2, r2, #3
 800a486:	4607      	mov	r7, r0
 800a488:	460e      	mov	r6, r1
 800a48a:	d007      	beq.n	800a49c <__pow5mult+0x20>
 800a48c:	4c25      	ldr	r4, [pc, #148]	@ (800a524 <__pow5mult+0xa8>)
 800a48e:	3a01      	subs	r2, #1
 800a490:	2300      	movs	r3, #0
 800a492:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a496:	f7ff fe5d 	bl	800a154 <__multadd>
 800a49a:	4606      	mov	r6, r0
 800a49c:	10ad      	asrs	r5, r5, #2
 800a49e:	d03d      	beq.n	800a51c <__pow5mult+0xa0>
 800a4a0:	69fc      	ldr	r4, [r7, #28]
 800a4a2:	b97c      	cbnz	r4, 800a4c4 <__pow5mult+0x48>
 800a4a4:	2010      	movs	r0, #16
 800a4a6:	f7ff fd3d 	bl	8009f24 <malloc>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	61f8      	str	r0, [r7, #28]
 800a4ae:	b928      	cbnz	r0, 800a4bc <__pow5mult+0x40>
 800a4b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a528 <__pow5mult+0xac>)
 800a4b2:	481e      	ldr	r0, [pc, #120]	@ (800a52c <__pow5mult+0xb0>)
 800a4b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a4b8:	f001 fbe6 	bl	800bc88 <__assert_func>
 800a4bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4c0:	6004      	str	r4, [r0, #0]
 800a4c2:	60c4      	str	r4, [r0, #12]
 800a4c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a4c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4cc:	b94c      	cbnz	r4, 800a4e2 <__pow5mult+0x66>
 800a4ce:	f240 2171 	movw	r1, #625	@ 0x271
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	f7ff ff1a 	bl	800a30c <__i2b>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4de:	4604      	mov	r4, r0
 800a4e0:	6003      	str	r3, [r0, #0]
 800a4e2:	f04f 0900 	mov.w	r9, #0
 800a4e6:	07eb      	lsls	r3, r5, #31
 800a4e8:	d50a      	bpl.n	800a500 <__pow5mult+0x84>
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f7ff ff22 	bl	800a338 <__multiply>
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4680      	mov	r8, r0
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7ff fe09 	bl	800a110 <_Bfree>
 800a4fe:	4646      	mov	r6, r8
 800a500:	106d      	asrs	r5, r5, #1
 800a502:	d00b      	beq.n	800a51c <__pow5mult+0xa0>
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	b938      	cbnz	r0, 800a518 <__pow5mult+0x9c>
 800a508:	4622      	mov	r2, r4
 800a50a:	4621      	mov	r1, r4
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff ff13 	bl	800a338 <__multiply>
 800a512:	6020      	str	r0, [r4, #0]
 800a514:	f8c0 9000 	str.w	r9, [r0]
 800a518:	4604      	mov	r4, r0
 800a51a:	e7e4      	b.n	800a4e6 <__pow5mult+0x6a>
 800a51c:	4630      	mov	r0, r6
 800a51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a522:	bf00      	nop
 800a524:	0800dacc 	.word	0x0800dacc
 800a528:	0800d93a 	.word	0x0800d93a
 800a52c:	0800d9ba 	.word	0x0800d9ba

0800a530 <__lshift>:
 800a530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a534:	460c      	mov	r4, r1
 800a536:	6849      	ldr	r1, [r1, #4]
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a53e:	68a3      	ldr	r3, [r4, #8]
 800a540:	4607      	mov	r7, r0
 800a542:	4691      	mov	r9, r2
 800a544:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a548:	f108 0601 	add.w	r6, r8, #1
 800a54c:	42b3      	cmp	r3, r6
 800a54e:	db0b      	blt.n	800a568 <__lshift+0x38>
 800a550:	4638      	mov	r0, r7
 800a552:	f7ff fd9d 	bl	800a090 <_Balloc>
 800a556:	4605      	mov	r5, r0
 800a558:	b948      	cbnz	r0, 800a56e <__lshift+0x3e>
 800a55a:	4602      	mov	r2, r0
 800a55c:	4b28      	ldr	r3, [pc, #160]	@ (800a600 <__lshift+0xd0>)
 800a55e:	4829      	ldr	r0, [pc, #164]	@ (800a604 <__lshift+0xd4>)
 800a560:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a564:	f001 fb90 	bl	800bc88 <__assert_func>
 800a568:	3101      	adds	r1, #1
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	e7ee      	b.n	800a54c <__lshift+0x1c>
 800a56e:	2300      	movs	r3, #0
 800a570:	f100 0114 	add.w	r1, r0, #20
 800a574:	f100 0210 	add.w	r2, r0, #16
 800a578:	4618      	mov	r0, r3
 800a57a:	4553      	cmp	r3, sl
 800a57c:	db33      	blt.n	800a5e6 <__lshift+0xb6>
 800a57e:	6920      	ldr	r0, [r4, #16]
 800a580:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a584:	f104 0314 	add.w	r3, r4, #20
 800a588:	f019 091f 	ands.w	r9, r9, #31
 800a58c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a590:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a594:	d02b      	beq.n	800a5ee <__lshift+0xbe>
 800a596:	f1c9 0e20 	rsb	lr, r9, #32
 800a59a:	468a      	mov	sl, r1
 800a59c:	2200      	movs	r2, #0
 800a59e:	6818      	ldr	r0, [r3, #0]
 800a5a0:	fa00 f009 	lsl.w	r0, r0, r9
 800a5a4:	4310      	orrs	r0, r2
 800a5a6:	f84a 0b04 	str.w	r0, [sl], #4
 800a5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ae:	459c      	cmp	ip, r3
 800a5b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5b4:	d8f3      	bhi.n	800a59e <__lshift+0x6e>
 800a5b6:	ebac 0304 	sub.w	r3, ip, r4
 800a5ba:	3b15      	subs	r3, #21
 800a5bc:	f023 0303 	bic.w	r3, r3, #3
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	f104 0015 	add.w	r0, r4, #21
 800a5c6:	4560      	cmp	r0, ip
 800a5c8:	bf88      	it	hi
 800a5ca:	2304      	movhi	r3, #4
 800a5cc:	50ca      	str	r2, [r1, r3]
 800a5ce:	b10a      	cbz	r2, 800a5d4 <__lshift+0xa4>
 800a5d0:	f108 0602 	add.w	r6, r8, #2
 800a5d4:	3e01      	subs	r6, #1
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	612e      	str	r6, [r5, #16]
 800a5da:	4621      	mov	r1, r4
 800a5dc:	f7ff fd98 	bl	800a110 <_Bfree>
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	e7c5      	b.n	800a57a <__lshift+0x4a>
 800a5ee:	3904      	subs	r1, #4
 800a5f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5f8:	459c      	cmp	ip, r3
 800a5fa:	d8f9      	bhi.n	800a5f0 <__lshift+0xc0>
 800a5fc:	e7ea      	b.n	800a5d4 <__lshift+0xa4>
 800a5fe:	bf00      	nop
 800a600:	0800d9a9 	.word	0x0800d9a9
 800a604:	0800d9ba 	.word	0x0800d9ba

0800a608 <__mcmp>:
 800a608:	690a      	ldr	r2, [r1, #16]
 800a60a:	4603      	mov	r3, r0
 800a60c:	6900      	ldr	r0, [r0, #16]
 800a60e:	1a80      	subs	r0, r0, r2
 800a610:	b530      	push	{r4, r5, lr}
 800a612:	d10e      	bne.n	800a632 <__mcmp+0x2a>
 800a614:	3314      	adds	r3, #20
 800a616:	3114      	adds	r1, #20
 800a618:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a61c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a620:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a624:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a628:	4295      	cmp	r5, r2
 800a62a:	d003      	beq.n	800a634 <__mcmp+0x2c>
 800a62c:	d205      	bcs.n	800a63a <__mcmp+0x32>
 800a62e:	f04f 30ff 	mov.w	r0, #4294967295
 800a632:	bd30      	pop	{r4, r5, pc}
 800a634:	42a3      	cmp	r3, r4
 800a636:	d3f3      	bcc.n	800a620 <__mcmp+0x18>
 800a638:	e7fb      	b.n	800a632 <__mcmp+0x2a>
 800a63a:	2001      	movs	r0, #1
 800a63c:	e7f9      	b.n	800a632 <__mcmp+0x2a>
	...

0800a640 <__mdiff>:
 800a640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	4689      	mov	r9, r1
 800a646:	4606      	mov	r6, r0
 800a648:	4611      	mov	r1, r2
 800a64a:	4648      	mov	r0, r9
 800a64c:	4614      	mov	r4, r2
 800a64e:	f7ff ffdb 	bl	800a608 <__mcmp>
 800a652:	1e05      	subs	r5, r0, #0
 800a654:	d112      	bne.n	800a67c <__mdiff+0x3c>
 800a656:	4629      	mov	r1, r5
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff fd19 	bl	800a090 <_Balloc>
 800a65e:	4602      	mov	r2, r0
 800a660:	b928      	cbnz	r0, 800a66e <__mdiff+0x2e>
 800a662:	4b3f      	ldr	r3, [pc, #252]	@ (800a760 <__mdiff+0x120>)
 800a664:	f240 2137 	movw	r1, #567	@ 0x237
 800a668:	483e      	ldr	r0, [pc, #248]	@ (800a764 <__mdiff+0x124>)
 800a66a:	f001 fb0d 	bl	800bc88 <__assert_func>
 800a66e:	2301      	movs	r3, #1
 800a670:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a674:	4610      	mov	r0, r2
 800a676:	b003      	add	sp, #12
 800a678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67c:	bfbc      	itt	lt
 800a67e:	464b      	movlt	r3, r9
 800a680:	46a1      	movlt	r9, r4
 800a682:	4630      	mov	r0, r6
 800a684:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a688:	bfba      	itte	lt
 800a68a:	461c      	movlt	r4, r3
 800a68c:	2501      	movlt	r5, #1
 800a68e:	2500      	movge	r5, #0
 800a690:	f7ff fcfe 	bl	800a090 <_Balloc>
 800a694:	4602      	mov	r2, r0
 800a696:	b918      	cbnz	r0, 800a6a0 <__mdiff+0x60>
 800a698:	4b31      	ldr	r3, [pc, #196]	@ (800a760 <__mdiff+0x120>)
 800a69a:	f240 2145 	movw	r1, #581	@ 0x245
 800a69e:	e7e3      	b.n	800a668 <__mdiff+0x28>
 800a6a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6a4:	6926      	ldr	r6, [r4, #16]
 800a6a6:	60c5      	str	r5, [r0, #12]
 800a6a8:	f109 0310 	add.w	r3, r9, #16
 800a6ac:	f109 0514 	add.w	r5, r9, #20
 800a6b0:	f104 0e14 	add.w	lr, r4, #20
 800a6b4:	f100 0b14 	add.w	fp, r0, #20
 800a6b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	46d9      	mov	r9, fp
 800a6c4:	f04f 0c00 	mov.w	ip, #0
 800a6c8:	9b01      	ldr	r3, [sp, #4]
 800a6ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a6d2:	9301      	str	r3, [sp, #4]
 800a6d4:	fa1f f38a 	uxth.w	r3, sl
 800a6d8:	4619      	mov	r1, r3
 800a6da:	b283      	uxth	r3, r0
 800a6dc:	1acb      	subs	r3, r1, r3
 800a6de:	0c00      	lsrs	r0, r0, #16
 800a6e0:	4463      	add	r3, ip
 800a6e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a6e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6f0:	4576      	cmp	r6, lr
 800a6f2:	f849 3b04 	str.w	r3, [r9], #4
 800a6f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6fa:	d8e5      	bhi.n	800a6c8 <__mdiff+0x88>
 800a6fc:	1b33      	subs	r3, r6, r4
 800a6fe:	3b15      	subs	r3, #21
 800a700:	f023 0303 	bic.w	r3, r3, #3
 800a704:	3415      	adds	r4, #21
 800a706:	3304      	adds	r3, #4
 800a708:	42a6      	cmp	r6, r4
 800a70a:	bf38      	it	cc
 800a70c:	2304      	movcc	r3, #4
 800a70e:	441d      	add	r5, r3
 800a710:	445b      	add	r3, fp
 800a712:	461e      	mov	r6, r3
 800a714:	462c      	mov	r4, r5
 800a716:	4544      	cmp	r4, r8
 800a718:	d30e      	bcc.n	800a738 <__mdiff+0xf8>
 800a71a:	f108 0103 	add.w	r1, r8, #3
 800a71e:	1b49      	subs	r1, r1, r5
 800a720:	f021 0103 	bic.w	r1, r1, #3
 800a724:	3d03      	subs	r5, #3
 800a726:	45a8      	cmp	r8, r5
 800a728:	bf38      	it	cc
 800a72a:	2100      	movcc	r1, #0
 800a72c:	440b      	add	r3, r1
 800a72e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a732:	b191      	cbz	r1, 800a75a <__mdiff+0x11a>
 800a734:	6117      	str	r7, [r2, #16]
 800a736:	e79d      	b.n	800a674 <__mdiff+0x34>
 800a738:	f854 1b04 	ldr.w	r1, [r4], #4
 800a73c:	46e6      	mov	lr, ip
 800a73e:	0c08      	lsrs	r0, r1, #16
 800a740:	fa1c fc81 	uxtah	ip, ip, r1
 800a744:	4471      	add	r1, lr
 800a746:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a74a:	b289      	uxth	r1, r1
 800a74c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a750:	f846 1b04 	str.w	r1, [r6], #4
 800a754:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a758:	e7dd      	b.n	800a716 <__mdiff+0xd6>
 800a75a:	3f01      	subs	r7, #1
 800a75c:	e7e7      	b.n	800a72e <__mdiff+0xee>
 800a75e:	bf00      	nop
 800a760:	0800d9a9 	.word	0x0800d9a9
 800a764:	0800d9ba 	.word	0x0800d9ba

0800a768 <__ulp>:
 800a768:	b082      	sub	sp, #8
 800a76a:	ed8d 0b00 	vstr	d0, [sp]
 800a76e:	9a01      	ldr	r2, [sp, #4]
 800a770:	4b0f      	ldr	r3, [pc, #60]	@ (800a7b0 <__ulp+0x48>)
 800a772:	4013      	ands	r3, r2
 800a774:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	dc08      	bgt.n	800a78e <__ulp+0x26>
 800a77c:	425b      	negs	r3, r3
 800a77e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a782:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a786:	da04      	bge.n	800a792 <__ulp+0x2a>
 800a788:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a78c:	4113      	asrs	r3, r2
 800a78e:	2200      	movs	r2, #0
 800a790:	e008      	b.n	800a7a4 <__ulp+0x3c>
 800a792:	f1a2 0314 	sub.w	r3, r2, #20
 800a796:	2b1e      	cmp	r3, #30
 800a798:	bfda      	itte	le
 800a79a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a79e:	40da      	lsrle	r2, r3
 800a7a0:	2201      	movgt	r2, #1
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	ec41 0b10 	vmov	d0, r0, r1
 800a7ac:	b002      	add	sp, #8
 800a7ae:	4770      	bx	lr
 800a7b0:	7ff00000 	.word	0x7ff00000

0800a7b4 <__b2d>:
 800a7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b8:	6906      	ldr	r6, [r0, #16]
 800a7ba:	f100 0814 	add.w	r8, r0, #20
 800a7be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a7c2:	1f37      	subs	r7, r6, #4
 800a7c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	f7ff fd53 	bl	800a274 <__hi0bits>
 800a7ce:	f1c0 0320 	rsb	r3, r0, #32
 800a7d2:	280a      	cmp	r0, #10
 800a7d4:	600b      	str	r3, [r1, #0]
 800a7d6:	491b      	ldr	r1, [pc, #108]	@ (800a844 <__b2d+0x90>)
 800a7d8:	dc15      	bgt.n	800a806 <__b2d+0x52>
 800a7da:	f1c0 0c0b 	rsb	ip, r0, #11
 800a7de:	fa22 f30c 	lsr.w	r3, r2, ip
 800a7e2:	45b8      	cmp	r8, r7
 800a7e4:	ea43 0501 	orr.w	r5, r3, r1
 800a7e8:	bf34      	ite	cc
 800a7ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a7ee:	2300      	movcs	r3, #0
 800a7f0:	3015      	adds	r0, #21
 800a7f2:	fa02 f000 	lsl.w	r0, r2, r0
 800a7f6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a7fa:	4303      	orrs	r3, r0
 800a7fc:	461c      	mov	r4, r3
 800a7fe:	ec45 4b10 	vmov	d0, r4, r5
 800a802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a806:	45b8      	cmp	r8, r7
 800a808:	bf3a      	itte	cc
 800a80a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a80e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a812:	2300      	movcs	r3, #0
 800a814:	380b      	subs	r0, #11
 800a816:	d012      	beq.n	800a83e <__b2d+0x8a>
 800a818:	f1c0 0120 	rsb	r1, r0, #32
 800a81c:	fa23 f401 	lsr.w	r4, r3, r1
 800a820:	4082      	lsls	r2, r0
 800a822:	4322      	orrs	r2, r4
 800a824:	4547      	cmp	r7, r8
 800a826:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a82a:	bf8c      	ite	hi
 800a82c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a830:	2200      	movls	r2, #0
 800a832:	4083      	lsls	r3, r0
 800a834:	40ca      	lsrs	r2, r1
 800a836:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a83a:	4313      	orrs	r3, r2
 800a83c:	e7de      	b.n	800a7fc <__b2d+0x48>
 800a83e:	ea42 0501 	orr.w	r5, r2, r1
 800a842:	e7db      	b.n	800a7fc <__b2d+0x48>
 800a844:	3ff00000 	.word	0x3ff00000

0800a848 <__d2b>:
 800a848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a84c:	460f      	mov	r7, r1
 800a84e:	2101      	movs	r1, #1
 800a850:	ec59 8b10 	vmov	r8, r9, d0
 800a854:	4616      	mov	r6, r2
 800a856:	f7ff fc1b 	bl	800a090 <_Balloc>
 800a85a:	4604      	mov	r4, r0
 800a85c:	b930      	cbnz	r0, 800a86c <__d2b+0x24>
 800a85e:	4602      	mov	r2, r0
 800a860:	4b23      	ldr	r3, [pc, #140]	@ (800a8f0 <__d2b+0xa8>)
 800a862:	4824      	ldr	r0, [pc, #144]	@ (800a8f4 <__d2b+0xac>)
 800a864:	f240 310f 	movw	r1, #783	@ 0x30f
 800a868:	f001 fa0e 	bl	800bc88 <__assert_func>
 800a86c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a874:	b10d      	cbz	r5, 800a87a <__d2b+0x32>
 800a876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a87a:	9301      	str	r3, [sp, #4]
 800a87c:	f1b8 0300 	subs.w	r3, r8, #0
 800a880:	d023      	beq.n	800a8ca <__d2b+0x82>
 800a882:	4668      	mov	r0, sp
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	f7ff fd14 	bl	800a2b2 <__lo0bits>
 800a88a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a88e:	b1d0      	cbz	r0, 800a8c6 <__d2b+0x7e>
 800a890:	f1c0 0320 	rsb	r3, r0, #32
 800a894:	fa02 f303 	lsl.w	r3, r2, r3
 800a898:	430b      	orrs	r3, r1
 800a89a:	40c2      	lsrs	r2, r0
 800a89c:	6163      	str	r3, [r4, #20]
 800a89e:	9201      	str	r2, [sp, #4]
 800a8a0:	9b01      	ldr	r3, [sp, #4]
 800a8a2:	61a3      	str	r3, [r4, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bf0c      	ite	eq
 800a8a8:	2201      	moveq	r2, #1
 800a8aa:	2202      	movne	r2, #2
 800a8ac:	6122      	str	r2, [r4, #16]
 800a8ae:	b1a5      	cbz	r5, 800a8da <__d2b+0x92>
 800a8b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a8b4:	4405      	add	r5, r0
 800a8b6:	603d      	str	r5, [r7, #0]
 800a8b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a8bc:	6030      	str	r0, [r6, #0]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	b003      	add	sp, #12
 800a8c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8c6:	6161      	str	r1, [r4, #20]
 800a8c8:	e7ea      	b.n	800a8a0 <__d2b+0x58>
 800a8ca:	a801      	add	r0, sp, #4
 800a8cc:	f7ff fcf1 	bl	800a2b2 <__lo0bits>
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	6163      	str	r3, [r4, #20]
 800a8d4:	3020      	adds	r0, #32
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	e7e8      	b.n	800a8ac <__d2b+0x64>
 800a8da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a8e2:	6038      	str	r0, [r7, #0]
 800a8e4:	6918      	ldr	r0, [r3, #16]
 800a8e6:	f7ff fcc5 	bl	800a274 <__hi0bits>
 800a8ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8ee:	e7e5      	b.n	800a8bc <__d2b+0x74>
 800a8f0:	0800d9a9 	.word	0x0800d9a9
 800a8f4:	0800d9ba 	.word	0x0800d9ba

0800a8f8 <__ratio>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	e9cd 1000 	strd	r1, r0, [sp]
 800a902:	a902      	add	r1, sp, #8
 800a904:	f7ff ff56 	bl	800a7b4 <__b2d>
 800a908:	9800      	ldr	r0, [sp, #0]
 800a90a:	a903      	add	r1, sp, #12
 800a90c:	ec55 4b10 	vmov	r4, r5, d0
 800a910:	f7ff ff50 	bl	800a7b4 <__b2d>
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	6919      	ldr	r1, [r3, #16]
 800a918:	9b00      	ldr	r3, [sp, #0]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	1ac9      	subs	r1, r1, r3
 800a91e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a922:	1a9b      	subs	r3, r3, r2
 800a924:	ec5b ab10 	vmov	sl, fp, d0
 800a928:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bfce      	itee	gt
 800a930:	462a      	movgt	r2, r5
 800a932:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a936:	465a      	movle	r2, fp
 800a938:	462f      	mov	r7, r5
 800a93a:	46d9      	mov	r9, fp
 800a93c:	bfcc      	ite	gt
 800a93e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a942:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a946:	464b      	mov	r3, r9
 800a948:	4652      	mov	r2, sl
 800a94a:	4620      	mov	r0, r4
 800a94c:	4639      	mov	r1, r7
 800a94e:	f7f5 ff85 	bl	800085c <__aeabi_ddiv>
 800a952:	ec41 0b10 	vmov	d0, r0, r1
 800a956:	b005      	add	sp, #20
 800a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a95c <__copybits>:
 800a95c:	3901      	subs	r1, #1
 800a95e:	b570      	push	{r4, r5, r6, lr}
 800a960:	1149      	asrs	r1, r1, #5
 800a962:	6914      	ldr	r4, [r2, #16]
 800a964:	3101      	adds	r1, #1
 800a966:	f102 0314 	add.w	r3, r2, #20
 800a96a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a96e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a972:	1f05      	subs	r5, r0, #4
 800a974:	42a3      	cmp	r3, r4
 800a976:	d30c      	bcc.n	800a992 <__copybits+0x36>
 800a978:	1aa3      	subs	r3, r4, r2
 800a97a:	3b11      	subs	r3, #17
 800a97c:	f023 0303 	bic.w	r3, r3, #3
 800a980:	3211      	adds	r2, #17
 800a982:	42a2      	cmp	r2, r4
 800a984:	bf88      	it	hi
 800a986:	2300      	movhi	r3, #0
 800a988:	4418      	add	r0, r3
 800a98a:	2300      	movs	r3, #0
 800a98c:	4288      	cmp	r0, r1
 800a98e:	d305      	bcc.n	800a99c <__copybits+0x40>
 800a990:	bd70      	pop	{r4, r5, r6, pc}
 800a992:	f853 6b04 	ldr.w	r6, [r3], #4
 800a996:	f845 6f04 	str.w	r6, [r5, #4]!
 800a99a:	e7eb      	b.n	800a974 <__copybits+0x18>
 800a99c:	f840 3b04 	str.w	r3, [r0], #4
 800a9a0:	e7f4      	b.n	800a98c <__copybits+0x30>

0800a9a2 <__any_on>:
 800a9a2:	f100 0214 	add.w	r2, r0, #20
 800a9a6:	6900      	ldr	r0, [r0, #16]
 800a9a8:	114b      	asrs	r3, r1, #5
 800a9aa:	4298      	cmp	r0, r3
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	db11      	blt.n	800a9d4 <__any_on+0x32>
 800a9b0:	dd0a      	ble.n	800a9c8 <__any_on+0x26>
 800a9b2:	f011 011f 	ands.w	r1, r1, #31
 800a9b6:	d007      	beq.n	800a9c8 <__any_on+0x26>
 800a9b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9bc:	fa24 f001 	lsr.w	r0, r4, r1
 800a9c0:	fa00 f101 	lsl.w	r1, r0, r1
 800a9c4:	428c      	cmp	r4, r1
 800a9c6:	d10b      	bne.n	800a9e0 <__any_on+0x3e>
 800a9c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d803      	bhi.n	800a9d8 <__any_on+0x36>
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	bd10      	pop	{r4, pc}
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	e7f7      	b.n	800a9c8 <__any_on+0x26>
 800a9d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	d0f5      	beq.n	800a9cc <__any_on+0x2a>
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	e7f6      	b.n	800a9d2 <__any_on+0x30>

0800a9e4 <sulp>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	ec45 4b10 	vmov	d0, r4, r5
 800a9ee:	4616      	mov	r6, r2
 800a9f0:	f7ff feba 	bl	800a768 <__ulp>
 800a9f4:	ec51 0b10 	vmov	r0, r1, d0
 800a9f8:	b17e      	cbz	r6, 800aa1a <sulp+0x36>
 800a9fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a9fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dd09      	ble.n	800aa1a <sulp+0x36>
 800aa06:	051b      	lsls	r3, r3, #20
 800aa08:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa0c:	2400      	movs	r4, #0
 800aa0e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa12:	4622      	mov	r2, r4
 800aa14:	462b      	mov	r3, r5
 800aa16:	f7f5 fdf7 	bl	8000608 <__aeabi_dmul>
 800aa1a:	ec41 0b10 	vmov	d0, r0, r1
 800aa1e:	bd70      	pop	{r4, r5, r6, pc}

0800aa20 <_strtod_l>:
 800aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa24:	b09f      	sub	sp, #124	@ 0x7c
 800aa26:	460c      	mov	r4, r1
 800aa28:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa2e:	9005      	str	r0, [sp, #20]
 800aa30:	f04f 0a00 	mov.w	sl, #0
 800aa34:	f04f 0b00 	mov.w	fp, #0
 800aa38:	460a      	mov	r2, r1
 800aa3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa3c:	7811      	ldrb	r1, [r2, #0]
 800aa3e:	292b      	cmp	r1, #43	@ 0x2b
 800aa40:	d04a      	beq.n	800aad8 <_strtod_l+0xb8>
 800aa42:	d838      	bhi.n	800aab6 <_strtod_l+0x96>
 800aa44:	290d      	cmp	r1, #13
 800aa46:	d832      	bhi.n	800aaae <_strtod_l+0x8e>
 800aa48:	2908      	cmp	r1, #8
 800aa4a:	d832      	bhi.n	800aab2 <_strtod_l+0x92>
 800aa4c:	2900      	cmp	r1, #0
 800aa4e:	d03b      	beq.n	800aac8 <_strtod_l+0xa8>
 800aa50:	2200      	movs	r2, #0
 800aa52:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aa56:	782a      	ldrb	r2, [r5, #0]
 800aa58:	2a30      	cmp	r2, #48	@ 0x30
 800aa5a:	f040 80b2 	bne.w	800abc2 <_strtod_l+0x1a2>
 800aa5e:	786a      	ldrb	r2, [r5, #1]
 800aa60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa64:	2a58      	cmp	r2, #88	@ 0x58
 800aa66:	d16e      	bne.n	800ab46 <_strtod_l+0x126>
 800aa68:	9302      	str	r3, [sp, #8]
 800aa6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa6c:	9301      	str	r3, [sp, #4]
 800aa6e:	ab1a      	add	r3, sp, #104	@ 0x68
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	4a8f      	ldr	r2, [pc, #572]	@ (800acb0 <_strtod_l+0x290>)
 800aa74:	9805      	ldr	r0, [sp, #20]
 800aa76:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa78:	a919      	add	r1, sp, #100	@ 0x64
 800aa7a:	f001 f99f 	bl	800bdbc <__gethex>
 800aa7e:	f010 060f 	ands.w	r6, r0, #15
 800aa82:	4604      	mov	r4, r0
 800aa84:	d005      	beq.n	800aa92 <_strtod_l+0x72>
 800aa86:	2e06      	cmp	r6, #6
 800aa88:	d128      	bne.n	800aadc <_strtod_l+0xbc>
 800aa8a:	3501      	adds	r5, #1
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa90:	930e      	str	r3, [sp, #56]	@ 0x38
 800aa92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f040 858e 	bne.w	800b5b6 <_strtod_l+0xb96>
 800aa9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa9c:	b1cb      	cbz	r3, 800aad2 <_strtod_l+0xb2>
 800aa9e:	4652      	mov	r2, sl
 800aaa0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aaa4:	ec43 2b10 	vmov	d0, r2, r3
 800aaa8:	b01f      	add	sp, #124	@ 0x7c
 800aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaae:	2920      	cmp	r1, #32
 800aab0:	d1ce      	bne.n	800aa50 <_strtod_l+0x30>
 800aab2:	3201      	adds	r2, #1
 800aab4:	e7c1      	b.n	800aa3a <_strtod_l+0x1a>
 800aab6:	292d      	cmp	r1, #45	@ 0x2d
 800aab8:	d1ca      	bne.n	800aa50 <_strtod_l+0x30>
 800aaba:	2101      	movs	r1, #1
 800aabc:	910e      	str	r1, [sp, #56]	@ 0x38
 800aabe:	1c51      	adds	r1, r2, #1
 800aac0:	9119      	str	r1, [sp, #100]	@ 0x64
 800aac2:	7852      	ldrb	r2, [r2, #1]
 800aac4:	2a00      	cmp	r2, #0
 800aac6:	d1c5      	bne.n	800aa54 <_strtod_l+0x34>
 800aac8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aaca:	9419      	str	r4, [sp, #100]	@ 0x64
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f040 8570 	bne.w	800b5b2 <_strtod_l+0xb92>
 800aad2:	4652      	mov	r2, sl
 800aad4:	465b      	mov	r3, fp
 800aad6:	e7e5      	b.n	800aaa4 <_strtod_l+0x84>
 800aad8:	2100      	movs	r1, #0
 800aada:	e7ef      	b.n	800aabc <_strtod_l+0x9c>
 800aadc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aade:	b13a      	cbz	r2, 800aaf0 <_strtod_l+0xd0>
 800aae0:	2135      	movs	r1, #53	@ 0x35
 800aae2:	a81c      	add	r0, sp, #112	@ 0x70
 800aae4:	f7ff ff3a 	bl	800a95c <__copybits>
 800aae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaea:	9805      	ldr	r0, [sp, #20]
 800aaec:	f7ff fb10 	bl	800a110 <_Bfree>
 800aaf0:	3e01      	subs	r6, #1
 800aaf2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aaf4:	2e04      	cmp	r6, #4
 800aaf6:	d806      	bhi.n	800ab06 <_strtod_l+0xe6>
 800aaf8:	e8df f006 	tbb	[pc, r6]
 800aafc:	201d0314 	.word	0x201d0314
 800ab00:	14          	.byte	0x14
 800ab01:	00          	.byte	0x00
 800ab02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab06:	05e1      	lsls	r1, r4, #23
 800ab08:	bf48      	it	mi
 800ab0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab12:	0d1b      	lsrs	r3, r3, #20
 800ab14:	051b      	lsls	r3, r3, #20
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1bb      	bne.n	800aa92 <_strtod_l+0x72>
 800ab1a:	f7fe fb1d 	bl	8009158 <__errno>
 800ab1e:	2322      	movs	r3, #34	@ 0x22
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	e7b6      	b.n	800aa92 <_strtod_l+0x72>
 800ab24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab34:	e7e7      	b.n	800ab06 <_strtod_l+0xe6>
 800ab36:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800acb8 <_strtod_l+0x298>
 800ab3a:	e7e4      	b.n	800ab06 <_strtod_l+0xe6>
 800ab3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ab40:	f04f 3aff 	mov.w	sl, #4294967295
 800ab44:	e7df      	b.n	800ab06 <_strtod_l+0xe6>
 800ab46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab4c:	785b      	ldrb	r3, [r3, #1]
 800ab4e:	2b30      	cmp	r3, #48	@ 0x30
 800ab50:	d0f9      	beq.n	800ab46 <_strtod_l+0x126>
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d09d      	beq.n	800aa92 <_strtod_l+0x72>
 800ab56:	2301      	movs	r3, #1
 800ab58:	2700      	movs	r7, #0
 800ab5a:	9308      	str	r3, [sp, #32]
 800ab5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab5e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab60:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ab62:	46b9      	mov	r9, r7
 800ab64:	220a      	movs	r2, #10
 800ab66:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ab68:	7805      	ldrb	r5, [r0, #0]
 800ab6a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ab6e:	b2d9      	uxtb	r1, r3
 800ab70:	2909      	cmp	r1, #9
 800ab72:	d928      	bls.n	800abc6 <_strtod_l+0x1a6>
 800ab74:	494f      	ldr	r1, [pc, #316]	@ (800acb4 <_strtod_l+0x294>)
 800ab76:	2201      	movs	r2, #1
 800ab78:	f001 f838 	bl	800bbec <strncmp>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d032      	beq.n	800abe6 <_strtod_l+0x1c6>
 800ab80:	2000      	movs	r0, #0
 800ab82:	462a      	mov	r2, r5
 800ab84:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab86:	464d      	mov	r5, r9
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2a65      	cmp	r2, #101	@ 0x65
 800ab8c:	d001      	beq.n	800ab92 <_strtod_l+0x172>
 800ab8e:	2a45      	cmp	r2, #69	@ 0x45
 800ab90:	d114      	bne.n	800abbc <_strtod_l+0x19c>
 800ab92:	b91d      	cbnz	r5, 800ab9c <_strtod_l+0x17c>
 800ab94:	9a08      	ldr	r2, [sp, #32]
 800ab96:	4302      	orrs	r2, r0
 800ab98:	d096      	beq.n	800aac8 <_strtod_l+0xa8>
 800ab9a:	2500      	movs	r5, #0
 800ab9c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab9e:	1c62      	adds	r2, r4, #1
 800aba0:	9219      	str	r2, [sp, #100]	@ 0x64
 800aba2:	7862      	ldrb	r2, [r4, #1]
 800aba4:	2a2b      	cmp	r2, #43	@ 0x2b
 800aba6:	d07a      	beq.n	800ac9e <_strtod_l+0x27e>
 800aba8:	2a2d      	cmp	r2, #45	@ 0x2d
 800abaa:	d07e      	beq.n	800acaa <_strtod_l+0x28a>
 800abac:	f04f 0c00 	mov.w	ip, #0
 800abb0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800abb4:	2909      	cmp	r1, #9
 800abb6:	f240 8085 	bls.w	800acc4 <_strtod_l+0x2a4>
 800abba:	9419      	str	r4, [sp, #100]	@ 0x64
 800abbc:	f04f 0800 	mov.w	r8, #0
 800abc0:	e0a5      	b.n	800ad0e <_strtod_l+0x2ee>
 800abc2:	2300      	movs	r3, #0
 800abc4:	e7c8      	b.n	800ab58 <_strtod_l+0x138>
 800abc6:	f1b9 0f08 	cmp.w	r9, #8
 800abca:	bfd8      	it	le
 800abcc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800abce:	f100 0001 	add.w	r0, r0, #1
 800abd2:	bfda      	itte	le
 800abd4:	fb02 3301 	mlale	r3, r2, r1, r3
 800abd8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800abda:	fb02 3707 	mlagt	r7, r2, r7, r3
 800abde:	f109 0901 	add.w	r9, r9, #1
 800abe2:	9019      	str	r0, [sp, #100]	@ 0x64
 800abe4:	e7bf      	b.n	800ab66 <_strtod_l+0x146>
 800abe6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	9219      	str	r2, [sp, #100]	@ 0x64
 800abec:	785a      	ldrb	r2, [r3, #1]
 800abee:	f1b9 0f00 	cmp.w	r9, #0
 800abf2:	d03b      	beq.n	800ac6c <_strtod_l+0x24c>
 800abf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800abf6:	464d      	mov	r5, r9
 800abf8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800abfc:	2b09      	cmp	r3, #9
 800abfe:	d912      	bls.n	800ac26 <_strtod_l+0x206>
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7c2      	b.n	800ab8a <_strtod_l+0x16a>
 800ac04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac0a:	785a      	ldrb	r2, [r3, #1]
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	2a30      	cmp	r2, #48	@ 0x30
 800ac10:	d0f8      	beq.n	800ac04 <_strtod_l+0x1e4>
 800ac12:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac16:	2b08      	cmp	r3, #8
 800ac18:	f200 84d2 	bhi.w	800b5c0 <_strtod_l+0xba0>
 800ac1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac1e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac20:	2000      	movs	r0, #0
 800ac22:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac24:	4605      	mov	r5, r0
 800ac26:	3a30      	subs	r2, #48	@ 0x30
 800ac28:	f100 0301 	add.w	r3, r0, #1
 800ac2c:	d018      	beq.n	800ac60 <_strtod_l+0x240>
 800ac2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac30:	4419      	add	r1, r3
 800ac32:	910a      	str	r1, [sp, #40]	@ 0x28
 800ac34:	462e      	mov	r6, r5
 800ac36:	f04f 0e0a 	mov.w	lr, #10
 800ac3a:	1c71      	adds	r1, r6, #1
 800ac3c:	eba1 0c05 	sub.w	ip, r1, r5
 800ac40:	4563      	cmp	r3, ip
 800ac42:	dc15      	bgt.n	800ac70 <_strtod_l+0x250>
 800ac44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ac48:	182b      	adds	r3, r5, r0
 800ac4a:	2b08      	cmp	r3, #8
 800ac4c:	f105 0501 	add.w	r5, r5, #1
 800ac50:	4405      	add	r5, r0
 800ac52:	dc1a      	bgt.n	800ac8a <_strtod_l+0x26a>
 800ac54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac56:	230a      	movs	r3, #10
 800ac58:	fb03 2301 	mla	r3, r3, r1, r2
 800ac5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac62:	1c51      	adds	r1, r2, #1
 800ac64:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac66:	7852      	ldrb	r2, [r2, #1]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	e7c5      	b.n	800abf8 <_strtod_l+0x1d8>
 800ac6c:	4648      	mov	r0, r9
 800ac6e:	e7ce      	b.n	800ac0e <_strtod_l+0x1ee>
 800ac70:	2e08      	cmp	r6, #8
 800ac72:	dc05      	bgt.n	800ac80 <_strtod_l+0x260>
 800ac74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ac76:	fb0e f606 	mul.w	r6, lr, r6
 800ac7a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ac7c:	460e      	mov	r6, r1
 800ac7e:	e7dc      	b.n	800ac3a <_strtod_l+0x21a>
 800ac80:	2910      	cmp	r1, #16
 800ac82:	bfd8      	it	le
 800ac84:	fb0e f707 	mulle.w	r7, lr, r7
 800ac88:	e7f8      	b.n	800ac7c <_strtod_l+0x25c>
 800ac8a:	2b0f      	cmp	r3, #15
 800ac8c:	bfdc      	itt	le
 800ac8e:	230a      	movle	r3, #10
 800ac90:	fb03 2707 	mlale	r7, r3, r7, r2
 800ac94:	e7e3      	b.n	800ac5e <_strtod_l+0x23e>
 800ac96:	2300      	movs	r3, #0
 800ac98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e77a      	b.n	800ab94 <_strtod_l+0x174>
 800ac9e:	f04f 0c00 	mov.w	ip, #0
 800aca2:	1ca2      	adds	r2, r4, #2
 800aca4:	9219      	str	r2, [sp, #100]	@ 0x64
 800aca6:	78a2      	ldrb	r2, [r4, #2]
 800aca8:	e782      	b.n	800abb0 <_strtod_l+0x190>
 800acaa:	f04f 0c01 	mov.w	ip, #1
 800acae:	e7f8      	b.n	800aca2 <_strtod_l+0x282>
 800acb0:	0800dbdc 	.word	0x0800dbdc
 800acb4:	0800da13 	.word	0x0800da13
 800acb8:	7ff00000 	.word	0x7ff00000
 800acbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acbe:	1c51      	adds	r1, r2, #1
 800acc0:	9119      	str	r1, [sp, #100]	@ 0x64
 800acc2:	7852      	ldrb	r2, [r2, #1]
 800acc4:	2a30      	cmp	r2, #48	@ 0x30
 800acc6:	d0f9      	beq.n	800acbc <_strtod_l+0x29c>
 800acc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800accc:	2908      	cmp	r1, #8
 800acce:	f63f af75 	bhi.w	800abbc <_strtod_l+0x19c>
 800acd2:	3a30      	subs	r2, #48	@ 0x30
 800acd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800acd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acd8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800acda:	f04f 080a 	mov.w	r8, #10
 800acde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ace0:	1c56      	adds	r6, r2, #1
 800ace2:	9619      	str	r6, [sp, #100]	@ 0x64
 800ace4:	7852      	ldrb	r2, [r2, #1]
 800ace6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800acea:	f1be 0f09 	cmp.w	lr, #9
 800acee:	d939      	bls.n	800ad64 <_strtod_l+0x344>
 800acf0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800acf2:	1a76      	subs	r6, r6, r1
 800acf4:	2e08      	cmp	r6, #8
 800acf6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800acfa:	dc03      	bgt.n	800ad04 <_strtod_l+0x2e4>
 800acfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acfe:	4588      	cmp	r8, r1
 800ad00:	bfa8      	it	ge
 800ad02:	4688      	movge	r8, r1
 800ad04:	f1bc 0f00 	cmp.w	ip, #0
 800ad08:	d001      	beq.n	800ad0e <_strtod_l+0x2ee>
 800ad0a:	f1c8 0800 	rsb	r8, r8, #0
 800ad0e:	2d00      	cmp	r5, #0
 800ad10:	d14e      	bne.n	800adb0 <_strtod_l+0x390>
 800ad12:	9908      	ldr	r1, [sp, #32]
 800ad14:	4308      	orrs	r0, r1
 800ad16:	f47f aebc 	bne.w	800aa92 <_strtod_l+0x72>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f47f aed4 	bne.w	800aac8 <_strtod_l+0xa8>
 800ad20:	2a69      	cmp	r2, #105	@ 0x69
 800ad22:	d028      	beq.n	800ad76 <_strtod_l+0x356>
 800ad24:	dc25      	bgt.n	800ad72 <_strtod_l+0x352>
 800ad26:	2a49      	cmp	r2, #73	@ 0x49
 800ad28:	d025      	beq.n	800ad76 <_strtod_l+0x356>
 800ad2a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad2c:	f47f aecc 	bne.w	800aac8 <_strtod_l+0xa8>
 800ad30:	499a      	ldr	r1, [pc, #616]	@ (800af9c <_strtod_l+0x57c>)
 800ad32:	a819      	add	r0, sp, #100	@ 0x64
 800ad34:	f001 fa64 	bl	800c200 <__match>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	f43f aec5 	beq.w	800aac8 <_strtod_l+0xa8>
 800ad3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b28      	cmp	r3, #40	@ 0x28
 800ad44:	d12e      	bne.n	800ada4 <_strtod_l+0x384>
 800ad46:	4996      	ldr	r1, [pc, #600]	@ (800afa0 <_strtod_l+0x580>)
 800ad48:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad4a:	a819      	add	r0, sp, #100	@ 0x64
 800ad4c:	f001 fa6c 	bl	800c228 <__hexnan>
 800ad50:	2805      	cmp	r0, #5
 800ad52:	d127      	bne.n	800ada4 <_strtod_l+0x384>
 800ad54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad56:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ad5a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ad5e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ad62:	e696      	b.n	800aa92 <_strtod_l+0x72>
 800ad64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad66:	fb08 2101 	mla	r1, r8, r1, r2
 800ad6a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ad6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad70:	e7b5      	b.n	800acde <_strtod_l+0x2be>
 800ad72:	2a6e      	cmp	r2, #110	@ 0x6e
 800ad74:	e7da      	b.n	800ad2c <_strtod_l+0x30c>
 800ad76:	498b      	ldr	r1, [pc, #556]	@ (800afa4 <_strtod_l+0x584>)
 800ad78:	a819      	add	r0, sp, #100	@ 0x64
 800ad7a:	f001 fa41 	bl	800c200 <__match>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f43f aea2 	beq.w	800aac8 <_strtod_l+0xa8>
 800ad84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad86:	4988      	ldr	r1, [pc, #544]	@ (800afa8 <_strtod_l+0x588>)
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	a819      	add	r0, sp, #100	@ 0x64
 800ad8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad8e:	f001 fa37 	bl	800c200 <__match>
 800ad92:	b910      	cbnz	r0, 800ad9a <_strtod_l+0x37a>
 800ad94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad96:	3301      	adds	r3, #1
 800ad98:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad9a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800afb8 <_strtod_l+0x598>
 800ad9e:	f04f 0a00 	mov.w	sl, #0
 800ada2:	e676      	b.n	800aa92 <_strtod_l+0x72>
 800ada4:	4881      	ldr	r0, [pc, #516]	@ (800afac <_strtod_l+0x58c>)
 800ada6:	f000 ff67 	bl	800bc78 <nan>
 800adaa:	ec5b ab10 	vmov	sl, fp, d0
 800adae:	e670      	b.n	800aa92 <_strtod_l+0x72>
 800adb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adb2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800adb4:	eba8 0303 	sub.w	r3, r8, r3
 800adb8:	f1b9 0f00 	cmp.w	r9, #0
 800adbc:	bf08      	it	eq
 800adbe:	46a9      	moveq	r9, r5
 800adc0:	2d10      	cmp	r5, #16
 800adc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800adc4:	462c      	mov	r4, r5
 800adc6:	bfa8      	it	ge
 800adc8:	2410      	movge	r4, #16
 800adca:	f7f5 fba3 	bl	8000514 <__aeabi_ui2d>
 800adce:	2d09      	cmp	r5, #9
 800add0:	4682      	mov	sl, r0
 800add2:	468b      	mov	fp, r1
 800add4:	dc13      	bgt.n	800adfe <_strtod_l+0x3de>
 800add6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add8:	2b00      	cmp	r3, #0
 800adda:	f43f ae5a 	beq.w	800aa92 <_strtod_l+0x72>
 800adde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade0:	dd78      	ble.n	800aed4 <_strtod_l+0x4b4>
 800ade2:	2b16      	cmp	r3, #22
 800ade4:	dc5f      	bgt.n	800aea6 <_strtod_l+0x486>
 800ade6:	4972      	ldr	r1, [pc, #456]	@ (800afb0 <_strtod_l+0x590>)
 800ade8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf0:	4652      	mov	r2, sl
 800adf2:	465b      	mov	r3, fp
 800adf4:	f7f5 fc08 	bl	8000608 <__aeabi_dmul>
 800adf8:	4682      	mov	sl, r0
 800adfa:	468b      	mov	fp, r1
 800adfc:	e649      	b.n	800aa92 <_strtod_l+0x72>
 800adfe:	4b6c      	ldr	r3, [pc, #432]	@ (800afb0 <_strtod_l+0x590>)
 800ae00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae08:	f7f5 fbfe 	bl	8000608 <__aeabi_dmul>
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	4638      	mov	r0, r7
 800ae10:	468b      	mov	fp, r1
 800ae12:	f7f5 fb7f 	bl	8000514 <__aeabi_ui2d>
 800ae16:	4602      	mov	r2, r0
 800ae18:	460b      	mov	r3, r1
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	f7f5 fa3d 	bl	800029c <__adddf3>
 800ae22:	2d0f      	cmp	r5, #15
 800ae24:	4682      	mov	sl, r0
 800ae26:	468b      	mov	fp, r1
 800ae28:	ddd5      	ble.n	800add6 <_strtod_l+0x3b6>
 800ae2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae2c:	1b2c      	subs	r4, r5, r4
 800ae2e:	441c      	add	r4, r3
 800ae30:	2c00      	cmp	r4, #0
 800ae32:	f340 8093 	ble.w	800af5c <_strtod_l+0x53c>
 800ae36:	f014 030f 	ands.w	r3, r4, #15
 800ae3a:	d00a      	beq.n	800ae52 <_strtod_l+0x432>
 800ae3c:	495c      	ldr	r1, [pc, #368]	@ (800afb0 <_strtod_l+0x590>)
 800ae3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae42:	4652      	mov	r2, sl
 800ae44:	465b      	mov	r3, fp
 800ae46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae4a:	f7f5 fbdd 	bl	8000608 <__aeabi_dmul>
 800ae4e:	4682      	mov	sl, r0
 800ae50:	468b      	mov	fp, r1
 800ae52:	f034 040f 	bics.w	r4, r4, #15
 800ae56:	d073      	beq.n	800af40 <_strtod_l+0x520>
 800ae58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ae5c:	dd49      	ble.n	800aef2 <_strtod_l+0x4d2>
 800ae5e:	2400      	movs	r4, #0
 800ae60:	46a0      	mov	r8, r4
 800ae62:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae64:	46a1      	mov	r9, r4
 800ae66:	9a05      	ldr	r2, [sp, #20]
 800ae68:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800afb8 <_strtod_l+0x598>
 800ae6c:	2322      	movs	r3, #34	@ 0x22
 800ae6e:	6013      	str	r3, [r2, #0]
 800ae70:	f04f 0a00 	mov.w	sl, #0
 800ae74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f43f ae0b 	beq.w	800aa92 <_strtod_l+0x72>
 800ae7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae7e:	9805      	ldr	r0, [sp, #20]
 800ae80:	f7ff f946 	bl	800a110 <_Bfree>
 800ae84:	9805      	ldr	r0, [sp, #20]
 800ae86:	4649      	mov	r1, r9
 800ae88:	f7ff f942 	bl	800a110 <_Bfree>
 800ae8c:	9805      	ldr	r0, [sp, #20]
 800ae8e:	4641      	mov	r1, r8
 800ae90:	f7ff f93e 	bl	800a110 <_Bfree>
 800ae94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae96:	9805      	ldr	r0, [sp, #20]
 800ae98:	f7ff f93a 	bl	800a110 <_Bfree>
 800ae9c:	9805      	ldr	r0, [sp, #20]
 800ae9e:	4621      	mov	r1, r4
 800aea0:	f7ff f936 	bl	800a110 <_Bfree>
 800aea4:	e5f5      	b.n	800aa92 <_strtod_l+0x72>
 800aea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aea8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aeac:	4293      	cmp	r3, r2
 800aeae:	dbbc      	blt.n	800ae2a <_strtod_l+0x40a>
 800aeb0:	4c3f      	ldr	r4, [pc, #252]	@ (800afb0 <_strtod_l+0x590>)
 800aeb2:	f1c5 050f 	rsb	r5, r5, #15
 800aeb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aeba:	4652      	mov	r2, sl
 800aebc:	465b      	mov	r3, fp
 800aebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec2:	f7f5 fba1 	bl	8000608 <__aeabi_dmul>
 800aec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec8:	1b5d      	subs	r5, r3, r5
 800aeca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aece:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aed2:	e78f      	b.n	800adf4 <_strtod_l+0x3d4>
 800aed4:	3316      	adds	r3, #22
 800aed6:	dba8      	blt.n	800ae2a <_strtod_l+0x40a>
 800aed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeda:	eba3 0808 	sub.w	r8, r3, r8
 800aede:	4b34      	ldr	r3, [pc, #208]	@ (800afb0 <_strtod_l+0x590>)
 800aee0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aee4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aee8:	4650      	mov	r0, sl
 800aeea:	4659      	mov	r1, fp
 800aeec:	f7f5 fcb6 	bl	800085c <__aeabi_ddiv>
 800aef0:	e782      	b.n	800adf8 <_strtod_l+0x3d8>
 800aef2:	2300      	movs	r3, #0
 800aef4:	4f2f      	ldr	r7, [pc, #188]	@ (800afb4 <_strtod_l+0x594>)
 800aef6:	1124      	asrs	r4, r4, #4
 800aef8:	4650      	mov	r0, sl
 800aefa:	4659      	mov	r1, fp
 800aefc:	461e      	mov	r6, r3
 800aefe:	2c01      	cmp	r4, #1
 800af00:	dc21      	bgt.n	800af46 <_strtod_l+0x526>
 800af02:	b10b      	cbz	r3, 800af08 <_strtod_l+0x4e8>
 800af04:	4682      	mov	sl, r0
 800af06:	468b      	mov	fp, r1
 800af08:	492a      	ldr	r1, [pc, #168]	@ (800afb4 <_strtod_l+0x594>)
 800af0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af1a:	f7f5 fb75 	bl	8000608 <__aeabi_dmul>
 800af1e:	4b26      	ldr	r3, [pc, #152]	@ (800afb8 <_strtod_l+0x598>)
 800af20:	460a      	mov	r2, r1
 800af22:	400b      	ands	r3, r1
 800af24:	4925      	ldr	r1, [pc, #148]	@ (800afbc <_strtod_l+0x59c>)
 800af26:	428b      	cmp	r3, r1
 800af28:	4682      	mov	sl, r0
 800af2a:	d898      	bhi.n	800ae5e <_strtod_l+0x43e>
 800af2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af30:	428b      	cmp	r3, r1
 800af32:	bf86      	itte	hi
 800af34:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800afc0 <_strtod_l+0x5a0>
 800af38:	f04f 3aff 	movhi.w	sl, #4294967295
 800af3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af40:	2300      	movs	r3, #0
 800af42:	9308      	str	r3, [sp, #32]
 800af44:	e076      	b.n	800b034 <_strtod_l+0x614>
 800af46:	07e2      	lsls	r2, r4, #31
 800af48:	d504      	bpl.n	800af54 <_strtod_l+0x534>
 800af4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af4e:	f7f5 fb5b 	bl	8000608 <__aeabi_dmul>
 800af52:	2301      	movs	r3, #1
 800af54:	3601      	adds	r6, #1
 800af56:	1064      	asrs	r4, r4, #1
 800af58:	3708      	adds	r7, #8
 800af5a:	e7d0      	b.n	800aefe <_strtod_l+0x4de>
 800af5c:	d0f0      	beq.n	800af40 <_strtod_l+0x520>
 800af5e:	4264      	negs	r4, r4
 800af60:	f014 020f 	ands.w	r2, r4, #15
 800af64:	d00a      	beq.n	800af7c <_strtod_l+0x55c>
 800af66:	4b12      	ldr	r3, [pc, #72]	@ (800afb0 <_strtod_l+0x590>)
 800af68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af6c:	4650      	mov	r0, sl
 800af6e:	4659      	mov	r1, fp
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 fc72 	bl	800085c <__aeabi_ddiv>
 800af78:	4682      	mov	sl, r0
 800af7a:	468b      	mov	fp, r1
 800af7c:	1124      	asrs	r4, r4, #4
 800af7e:	d0df      	beq.n	800af40 <_strtod_l+0x520>
 800af80:	2c1f      	cmp	r4, #31
 800af82:	dd1f      	ble.n	800afc4 <_strtod_l+0x5a4>
 800af84:	2400      	movs	r4, #0
 800af86:	46a0      	mov	r8, r4
 800af88:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af8a:	46a1      	mov	r9, r4
 800af8c:	9a05      	ldr	r2, [sp, #20]
 800af8e:	2322      	movs	r3, #34	@ 0x22
 800af90:	f04f 0a00 	mov.w	sl, #0
 800af94:	f04f 0b00 	mov.w	fp, #0
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	e76b      	b.n	800ae74 <_strtod_l+0x454>
 800af9c:	0800d901 	.word	0x0800d901
 800afa0:	0800dbc8 	.word	0x0800dbc8
 800afa4:	0800d8f9 	.word	0x0800d8f9
 800afa8:	0800d930 	.word	0x0800d930
 800afac:	0800da69 	.word	0x0800da69
 800afb0:	0800db00 	.word	0x0800db00
 800afb4:	0800dad8 	.word	0x0800dad8
 800afb8:	7ff00000 	.word	0x7ff00000
 800afbc:	7ca00000 	.word	0x7ca00000
 800afc0:	7fefffff 	.word	0x7fefffff
 800afc4:	f014 0310 	ands.w	r3, r4, #16
 800afc8:	bf18      	it	ne
 800afca:	236a      	movne	r3, #106	@ 0x6a
 800afcc:	4ea9      	ldr	r6, [pc, #676]	@ (800b274 <_strtod_l+0x854>)
 800afce:	9308      	str	r3, [sp, #32]
 800afd0:	4650      	mov	r0, sl
 800afd2:	4659      	mov	r1, fp
 800afd4:	2300      	movs	r3, #0
 800afd6:	07e7      	lsls	r7, r4, #31
 800afd8:	d504      	bpl.n	800afe4 <_strtod_l+0x5c4>
 800afda:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afde:	f7f5 fb13 	bl	8000608 <__aeabi_dmul>
 800afe2:	2301      	movs	r3, #1
 800afe4:	1064      	asrs	r4, r4, #1
 800afe6:	f106 0608 	add.w	r6, r6, #8
 800afea:	d1f4      	bne.n	800afd6 <_strtod_l+0x5b6>
 800afec:	b10b      	cbz	r3, 800aff2 <_strtod_l+0x5d2>
 800afee:	4682      	mov	sl, r0
 800aff0:	468b      	mov	fp, r1
 800aff2:	9b08      	ldr	r3, [sp, #32]
 800aff4:	b1b3      	cbz	r3, 800b024 <_strtod_l+0x604>
 800aff6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800affa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800affe:	2b00      	cmp	r3, #0
 800b000:	4659      	mov	r1, fp
 800b002:	dd0f      	ble.n	800b024 <_strtod_l+0x604>
 800b004:	2b1f      	cmp	r3, #31
 800b006:	dd56      	ble.n	800b0b6 <_strtod_l+0x696>
 800b008:	2b34      	cmp	r3, #52	@ 0x34
 800b00a:	bfde      	ittt	le
 800b00c:	f04f 33ff 	movle.w	r3, #4294967295
 800b010:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b014:	4093      	lslle	r3, r2
 800b016:	f04f 0a00 	mov.w	sl, #0
 800b01a:	bfcc      	ite	gt
 800b01c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b020:	ea03 0b01 	andle.w	fp, r3, r1
 800b024:	2200      	movs	r2, #0
 800b026:	2300      	movs	r3, #0
 800b028:	4650      	mov	r0, sl
 800b02a:	4659      	mov	r1, fp
 800b02c:	f7f5 fd54 	bl	8000ad8 <__aeabi_dcmpeq>
 800b030:	2800      	cmp	r0, #0
 800b032:	d1a7      	bne.n	800af84 <_strtod_l+0x564>
 800b034:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b03a:	9805      	ldr	r0, [sp, #20]
 800b03c:	462b      	mov	r3, r5
 800b03e:	464a      	mov	r2, r9
 800b040:	f7ff f8ce 	bl	800a1e0 <__s2b>
 800b044:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b046:	2800      	cmp	r0, #0
 800b048:	f43f af09 	beq.w	800ae5e <_strtod_l+0x43e>
 800b04c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b04e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b050:	2a00      	cmp	r2, #0
 800b052:	eba3 0308 	sub.w	r3, r3, r8
 800b056:	bfa8      	it	ge
 800b058:	2300      	movge	r3, #0
 800b05a:	9312      	str	r3, [sp, #72]	@ 0x48
 800b05c:	2400      	movs	r4, #0
 800b05e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b062:	9316      	str	r3, [sp, #88]	@ 0x58
 800b064:	46a0      	mov	r8, r4
 800b066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b068:	9805      	ldr	r0, [sp, #20]
 800b06a:	6859      	ldr	r1, [r3, #4]
 800b06c:	f7ff f810 	bl	800a090 <_Balloc>
 800b070:	4681      	mov	r9, r0
 800b072:	2800      	cmp	r0, #0
 800b074:	f43f aef7 	beq.w	800ae66 <_strtod_l+0x446>
 800b078:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b07a:	691a      	ldr	r2, [r3, #16]
 800b07c:	3202      	adds	r2, #2
 800b07e:	f103 010c 	add.w	r1, r3, #12
 800b082:	0092      	lsls	r2, r2, #2
 800b084:	300c      	adds	r0, #12
 800b086:	f7fe f894 	bl	80091b2 <memcpy>
 800b08a:	ec4b ab10 	vmov	d0, sl, fp
 800b08e:	9805      	ldr	r0, [sp, #20]
 800b090:	aa1c      	add	r2, sp, #112	@ 0x70
 800b092:	a91b      	add	r1, sp, #108	@ 0x6c
 800b094:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b098:	f7ff fbd6 	bl	800a848 <__d2b>
 800b09c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f aee1 	beq.w	800ae66 <_strtod_l+0x446>
 800b0a4:	9805      	ldr	r0, [sp, #20]
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	f7ff f930 	bl	800a30c <__i2b>
 800b0ac:	4680      	mov	r8, r0
 800b0ae:	b948      	cbnz	r0, 800b0c4 <_strtod_l+0x6a4>
 800b0b0:	f04f 0800 	mov.w	r8, #0
 800b0b4:	e6d7      	b.n	800ae66 <_strtod_l+0x446>
 800b0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b0be:	ea03 0a0a 	and.w	sl, r3, sl
 800b0c2:	e7af      	b.n	800b024 <_strtod_l+0x604>
 800b0c4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b0c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b0c8:	2d00      	cmp	r5, #0
 800b0ca:	bfab      	itete	ge
 800b0cc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b0ce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b0d0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b0d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b0d4:	bfac      	ite	ge
 800b0d6:	18ef      	addge	r7, r5, r3
 800b0d8:	1b5e      	sublt	r6, r3, r5
 800b0da:	9b08      	ldr	r3, [sp, #32]
 800b0dc:	1aed      	subs	r5, r5, r3
 800b0de:	4415      	add	r5, r2
 800b0e0:	4b65      	ldr	r3, [pc, #404]	@ (800b278 <_strtod_l+0x858>)
 800b0e2:	3d01      	subs	r5, #1
 800b0e4:	429d      	cmp	r5, r3
 800b0e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b0ea:	da50      	bge.n	800b18e <_strtod_l+0x76e>
 800b0ec:	1b5b      	subs	r3, r3, r5
 800b0ee:	2b1f      	cmp	r3, #31
 800b0f0:	eba2 0203 	sub.w	r2, r2, r3
 800b0f4:	f04f 0101 	mov.w	r1, #1
 800b0f8:	dc3d      	bgt.n	800b176 <_strtod_l+0x756>
 800b0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b0fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b100:	2300      	movs	r3, #0
 800b102:	9310      	str	r3, [sp, #64]	@ 0x40
 800b104:	18bd      	adds	r5, r7, r2
 800b106:	9b08      	ldr	r3, [sp, #32]
 800b108:	42af      	cmp	r7, r5
 800b10a:	4416      	add	r6, r2
 800b10c:	441e      	add	r6, r3
 800b10e:	463b      	mov	r3, r7
 800b110:	bfa8      	it	ge
 800b112:	462b      	movge	r3, r5
 800b114:	42b3      	cmp	r3, r6
 800b116:	bfa8      	it	ge
 800b118:	4633      	movge	r3, r6
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	bfc2      	ittt	gt
 800b11e:	1aed      	subgt	r5, r5, r3
 800b120:	1af6      	subgt	r6, r6, r3
 800b122:	1aff      	subgt	r7, r7, r3
 800b124:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b126:	2b00      	cmp	r3, #0
 800b128:	dd16      	ble.n	800b158 <_strtod_l+0x738>
 800b12a:	4641      	mov	r1, r8
 800b12c:	9805      	ldr	r0, [sp, #20]
 800b12e:	461a      	mov	r2, r3
 800b130:	f7ff f9a4 	bl	800a47c <__pow5mult>
 800b134:	4680      	mov	r8, r0
 800b136:	2800      	cmp	r0, #0
 800b138:	d0ba      	beq.n	800b0b0 <_strtod_l+0x690>
 800b13a:	4601      	mov	r1, r0
 800b13c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b13e:	9805      	ldr	r0, [sp, #20]
 800b140:	f7ff f8fa 	bl	800a338 <__multiply>
 800b144:	900a      	str	r0, [sp, #40]	@ 0x28
 800b146:	2800      	cmp	r0, #0
 800b148:	f43f ae8d 	beq.w	800ae66 <_strtod_l+0x446>
 800b14c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b14e:	9805      	ldr	r0, [sp, #20]
 800b150:	f7fe ffde 	bl	800a110 <_Bfree>
 800b154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b156:	931a      	str	r3, [sp, #104]	@ 0x68
 800b158:	2d00      	cmp	r5, #0
 800b15a:	dc1d      	bgt.n	800b198 <_strtod_l+0x778>
 800b15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	dd23      	ble.n	800b1aa <_strtod_l+0x78a>
 800b162:	4649      	mov	r1, r9
 800b164:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b166:	9805      	ldr	r0, [sp, #20]
 800b168:	f7ff f988 	bl	800a47c <__pow5mult>
 800b16c:	4681      	mov	r9, r0
 800b16e:	b9e0      	cbnz	r0, 800b1aa <_strtod_l+0x78a>
 800b170:	f04f 0900 	mov.w	r9, #0
 800b174:	e677      	b.n	800ae66 <_strtod_l+0x446>
 800b176:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b17a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b17e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b182:	35e2      	adds	r5, #226	@ 0xe2
 800b184:	fa01 f305 	lsl.w	r3, r1, r5
 800b188:	9310      	str	r3, [sp, #64]	@ 0x40
 800b18a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b18c:	e7ba      	b.n	800b104 <_strtod_l+0x6e4>
 800b18e:	2300      	movs	r3, #0
 800b190:	9310      	str	r3, [sp, #64]	@ 0x40
 800b192:	2301      	movs	r3, #1
 800b194:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b196:	e7b5      	b.n	800b104 <_strtod_l+0x6e4>
 800b198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b19a:	9805      	ldr	r0, [sp, #20]
 800b19c:	462a      	mov	r2, r5
 800b19e:	f7ff f9c7 	bl	800a530 <__lshift>
 800b1a2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d1d9      	bne.n	800b15c <_strtod_l+0x73c>
 800b1a8:	e65d      	b.n	800ae66 <_strtod_l+0x446>
 800b1aa:	2e00      	cmp	r6, #0
 800b1ac:	dd07      	ble.n	800b1be <_strtod_l+0x79e>
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	9805      	ldr	r0, [sp, #20]
 800b1b2:	4632      	mov	r2, r6
 800b1b4:	f7ff f9bc 	bl	800a530 <__lshift>
 800b1b8:	4681      	mov	r9, r0
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d0d8      	beq.n	800b170 <_strtod_l+0x750>
 800b1be:	2f00      	cmp	r7, #0
 800b1c0:	dd08      	ble.n	800b1d4 <_strtod_l+0x7b4>
 800b1c2:	4641      	mov	r1, r8
 800b1c4:	9805      	ldr	r0, [sp, #20]
 800b1c6:	463a      	mov	r2, r7
 800b1c8:	f7ff f9b2 	bl	800a530 <__lshift>
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f43f ae49 	beq.w	800ae66 <_strtod_l+0x446>
 800b1d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1d6:	9805      	ldr	r0, [sp, #20]
 800b1d8:	464a      	mov	r2, r9
 800b1da:	f7ff fa31 	bl	800a640 <__mdiff>
 800b1de:	4604      	mov	r4, r0
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	f43f ae40 	beq.w	800ae66 <_strtod_l+0x446>
 800b1e6:	68c3      	ldr	r3, [r0, #12]
 800b1e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60c3      	str	r3, [r0, #12]
 800b1ee:	4641      	mov	r1, r8
 800b1f0:	f7ff fa0a 	bl	800a608 <__mcmp>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	da45      	bge.n	800b284 <_strtod_l+0x864>
 800b1f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1fa:	ea53 030a 	orrs.w	r3, r3, sl
 800b1fe:	d16b      	bne.n	800b2d8 <_strtod_l+0x8b8>
 800b200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b204:	2b00      	cmp	r3, #0
 800b206:	d167      	bne.n	800b2d8 <_strtod_l+0x8b8>
 800b208:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b20c:	0d1b      	lsrs	r3, r3, #20
 800b20e:	051b      	lsls	r3, r3, #20
 800b210:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b214:	d960      	bls.n	800b2d8 <_strtod_l+0x8b8>
 800b216:	6963      	ldr	r3, [r4, #20]
 800b218:	b913      	cbnz	r3, 800b220 <_strtod_l+0x800>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	dd5b      	ble.n	800b2d8 <_strtod_l+0x8b8>
 800b220:	4621      	mov	r1, r4
 800b222:	2201      	movs	r2, #1
 800b224:	9805      	ldr	r0, [sp, #20]
 800b226:	f7ff f983 	bl	800a530 <__lshift>
 800b22a:	4641      	mov	r1, r8
 800b22c:	4604      	mov	r4, r0
 800b22e:	f7ff f9eb 	bl	800a608 <__mcmp>
 800b232:	2800      	cmp	r0, #0
 800b234:	dd50      	ble.n	800b2d8 <_strtod_l+0x8b8>
 800b236:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b23a:	9a08      	ldr	r2, [sp, #32]
 800b23c:	0d1b      	lsrs	r3, r3, #20
 800b23e:	051b      	lsls	r3, r3, #20
 800b240:	2a00      	cmp	r2, #0
 800b242:	d06a      	beq.n	800b31a <_strtod_l+0x8fa>
 800b244:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b248:	d867      	bhi.n	800b31a <_strtod_l+0x8fa>
 800b24a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b24e:	f67f ae9d 	bls.w	800af8c <_strtod_l+0x56c>
 800b252:	4b0a      	ldr	r3, [pc, #40]	@ (800b27c <_strtod_l+0x85c>)
 800b254:	4650      	mov	r0, sl
 800b256:	4659      	mov	r1, fp
 800b258:	2200      	movs	r2, #0
 800b25a:	f7f5 f9d5 	bl	8000608 <__aeabi_dmul>
 800b25e:	4b08      	ldr	r3, [pc, #32]	@ (800b280 <_strtod_l+0x860>)
 800b260:	400b      	ands	r3, r1
 800b262:	4682      	mov	sl, r0
 800b264:	468b      	mov	fp, r1
 800b266:	2b00      	cmp	r3, #0
 800b268:	f47f ae08 	bne.w	800ae7c <_strtod_l+0x45c>
 800b26c:	9a05      	ldr	r2, [sp, #20]
 800b26e:	2322      	movs	r3, #34	@ 0x22
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	e603      	b.n	800ae7c <_strtod_l+0x45c>
 800b274:	0800dbf0 	.word	0x0800dbf0
 800b278:	fffffc02 	.word	0xfffffc02
 800b27c:	39500000 	.word	0x39500000
 800b280:	7ff00000 	.word	0x7ff00000
 800b284:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b288:	d165      	bne.n	800b356 <_strtod_l+0x936>
 800b28a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b28c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b290:	b35a      	cbz	r2, 800b2ea <_strtod_l+0x8ca>
 800b292:	4a9f      	ldr	r2, [pc, #636]	@ (800b510 <_strtod_l+0xaf0>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d12b      	bne.n	800b2f0 <_strtod_l+0x8d0>
 800b298:	9b08      	ldr	r3, [sp, #32]
 800b29a:	4651      	mov	r1, sl
 800b29c:	b303      	cbz	r3, 800b2e0 <_strtod_l+0x8c0>
 800b29e:	4b9d      	ldr	r3, [pc, #628]	@ (800b514 <_strtod_l+0xaf4>)
 800b2a0:	465a      	mov	r2, fp
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ac:	d81b      	bhi.n	800b2e6 <_strtod_l+0x8c6>
 800b2ae:	0d1b      	lsrs	r3, r3, #20
 800b2b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	d119      	bne.n	800b2f0 <_strtod_l+0x8d0>
 800b2bc:	4b96      	ldr	r3, [pc, #600]	@ (800b518 <_strtod_l+0xaf8>)
 800b2be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d102      	bne.n	800b2ca <_strtod_l+0x8aa>
 800b2c4:	3101      	adds	r1, #1
 800b2c6:	f43f adce 	beq.w	800ae66 <_strtod_l+0x446>
 800b2ca:	4b92      	ldr	r3, [pc, #584]	@ (800b514 <_strtod_l+0xaf4>)
 800b2cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2ce:	401a      	ands	r2, r3
 800b2d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b2d4:	f04f 0a00 	mov.w	sl, #0
 800b2d8:	9b08      	ldr	r3, [sp, #32]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1b9      	bne.n	800b252 <_strtod_l+0x832>
 800b2de:	e5cd      	b.n	800ae7c <_strtod_l+0x45c>
 800b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e4:	e7e8      	b.n	800b2b8 <_strtod_l+0x898>
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	e7e6      	b.n	800b2b8 <_strtod_l+0x898>
 800b2ea:	ea53 030a 	orrs.w	r3, r3, sl
 800b2ee:	d0a2      	beq.n	800b236 <_strtod_l+0x816>
 800b2f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2f2:	b1db      	cbz	r3, 800b32c <_strtod_l+0x90c>
 800b2f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2f6:	4213      	tst	r3, r2
 800b2f8:	d0ee      	beq.n	800b2d8 <_strtod_l+0x8b8>
 800b2fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2fc:	9a08      	ldr	r2, [sp, #32]
 800b2fe:	4650      	mov	r0, sl
 800b300:	4659      	mov	r1, fp
 800b302:	b1bb      	cbz	r3, 800b334 <_strtod_l+0x914>
 800b304:	f7ff fb6e 	bl	800a9e4 <sulp>
 800b308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b30c:	ec53 2b10 	vmov	r2, r3, d0
 800b310:	f7f4 ffc4 	bl	800029c <__adddf3>
 800b314:	4682      	mov	sl, r0
 800b316:	468b      	mov	fp, r1
 800b318:	e7de      	b.n	800b2d8 <_strtod_l+0x8b8>
 800b31a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b31e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b322:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b326:	f04f 3aff 	mov.w	sl, #4294967295
 800b32a:	e7d5      	b.n	800b2d8 <_strtod_l+0x8b8>
 800b32c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b32e:	ea13 0f0a 	tst.w	r3, sl
 800b332:	e7e1      	b.n	800b2f8 <_strtod_l+0x8d8>
 800b334:	f7ff fb56 	bl	800a9e4 <sulp>
 800b338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b33c:	ec53 2b10 	vmov	r2, r3, d0
 800b340:	f7f4 ffaa 	bl	8000298 <__aeabi_dsub>
 800b344:	2200      	movs	r2, #0
 800b346:	2300      	movs	r3, #0
 800b348:	4682      	mov	sl, r0
 800b34a:	468b      	mov	fp, r1
 800b34c:	f7f5 fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b350:	2800      	cmp	r0, #0
 800b352:	d0c1      	beq.n	800b2d8 <_strtod_l+0x8b8>
 800b354:	e61a      	b.n	800af8c <_strtod_l+0x56c>
 800b356:	4641      	mov	r1, r8
 800b358:	4620      	mov	r0, r4
 800b35a:	f7ff facd 	bl	800a8f8 <__ratio>
 800b35e:	ec57 6b10 	vmov	r6, r7, d0
 800b362:	2200      	movs	r2, #0
 800b364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b368:	4630      	mov	r0, r6
 800b36a:	4639      	mov	r1, r7
 800b36c:	f7f5 fbc8 	bl	8000b00 <__aeabi_dcmple>
 800b370:	2800      	cmp	r0, #0
 800b372:	d06f      	beq.n	800b454 <_strtod_l+0xa34>
 800b374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d17a      	bne.n	800b470 <_strtod_l+0xa50>
 800b37a:	f1ba 0f00 	cmp.w	sl, #0
 800b37e:	d158      	bne.n	800b432 <_strtod_l+0xa12>
 800b380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b386:	2b00      	cmp	r3, #0
 800b388:	d15a      	bne.n	800b440 <_strtod_l+0xa20>
 800b38a:	4b64      	ldr	r3, [pc, #400]	@ (800b51c <_strtod_l+0xafc>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	4630      	mov	r0, r6
 800b390:	4639      	mov	r1, r7
 800b392:	f7f5 fbab 	bl	8000aec <__aeabi_dcmplt>
 800b396:	2800      	cmp	r0, #0
 800b398:	d159      	bne.n	800b44e <_strtod_l+0xa2e>
 800b39a:	4630      	mov	r0, r6
 800b39c:	4639      	mov	r1, r7
 800b39e:	4b60      	ldr	r3, [pc, #384]	@ (800b520 <_strtod_l+0xb00>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f7f5 f931 	bl	8000608 <__aeabi_dmul>
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b3ae:	9606      	str	r6, [sp, #24]
 800b3b0:	9307      	str	r3, [sp, #28]
 800b3b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3b6:	4d57      	ldr	r5, [pc, #348]	@ (800b514 <_strtod_l+0xaf4>)
 800b3b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3be:	401d      	ands	r5, r3
 800b3c0:	4b58      	ldr	r3, [pc, #352]	@ (800b524 <_strtod_l+0xb04>)
 800b3c2:	429d      	cmp	r5, r3
 800b3c4:	f040 80b2 	bne.w	800b52c <_strtod_l+0xb0c>
 800b3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b3ce:	ec4b ab10 	vmov	d0, sl, fp
 800b3d2:	f7ff f9c9 	bl	800a768 <__ulp>
 800b3d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3da:	ec51 0b10 	vmov	r0, r1, d0
 800b3de:	f7f5 f913 	bl	8000608 <__aeabi_dmul>
 800b3e2:	4652      	mov	r2, sl
 800b3e4:	465b      	mov	r3, fp
 800b3e6:	f7f4 ff59 	bl	800029c <__adddf3>
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4949      	ldr	r1, [pc, #292]	@ (800b514 <_strtod_l+0xaf4>)
 800b3ee:	4a4e      	ldr	r2, [pc, #312]	@ (800b528 <_strtod_l+0xb08>)
 800b3f0:	4019      	ands	r1, r3
 800b3f2:	4291      	cmp	r1, r2
 800b3f4:	4682      	mov	sl, r0
 800b3f6:	d942      	bls.n	800b47e <_strtod_l+0xa5e>
 800b3f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3fa:	4b47      	ldr	r3, [pc, #284]	@ (800b518 <_strtod_l+0xaf8>)
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d103      	bne.n	800b408 <_strtod_l+0x9e8>
 800b400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b402:	3301      	adds	r3, #1
 800b404:	f43f ad2f 	beq.w	800ae66 <_strtod_l+0x446>
 800b408:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b518 <_strtod_l+0xaf8>
 800b40c:	f04f 3aff 	mov.w	sl, #4294967295
 800b410:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b412:	9805      	ldr	r0, [sp, #20]
 800b414:	f7fe fe7c 	bl	800a110 <_Bfree>
 800b418:	9805      	ldr	r0, [sp, #20]
 800b41a:	4649      	mov	r1, r9
 800b41c:	f7fe fe78 	bl	800a110 <_Bfree>
 800b420:	9805      	ldr	r0, [sp, #20]
 800b422:	4641      	mov	r1, r8
 800b424:	f7fe fe74 	bl	800a110 <_Bfree>
 800b428:	9805      	ldr	r0, [sp, #20]
 800b42a:	4621      	mov	r1, r4
 800b42c:	f7fe fe70 	bl	800a110 <_Bfree>
 800b430:	e619      	b.n	800b066 <_strtod_l+0x646>
 800b432:	f1ba 0f01 	cmp.w	sl, #1
 800b436:	d103      	bne.n	800b440 <_strtod_l+0xa20>
 800b438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f43f ada6 	beq.w	800af8c <_strtod_l+0x56c>
 800b440:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b4f0 <_strtod_l+0xad0>
 800b444:	4f35      	ldr	r7, [pc, #212]	@ (800b51c <_strtod_l+0xafc>)
 800b446:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b44a:	2600      	movs	r6, #0
 800b44c:	e7b1      	b.n	800b3b2 <_strtod_l+0x992>
 800b44e:	4f34      	ldr	r7, [pc, #208]	@ (800b520 <_strtod_l+0xb00>)
 800b450:	2600      	movs	r6, #0
 800b452:	e7aa      	b.n	800b3aa <_strtod_l+0x98a>
 800b454:	4b32      	ldr	r3, [pc, #200]	@ (800b520 <_strtod_l+0xb00>)
 800b456:	4630      	mov	r0, r6
 800b458:	4639      	mov	r1, r7
 800b45a:	2200      	movs	r2, #0
 800b45c:	f7f5 f8d4 	bl	8000608 <__aeabi_dmul>
 800b460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b462:	4606      	mov	r6, r0
 800b464:	460f      	mov	r7, r1
 800b466:	2b00      	cmp	r3, #0
 800b468:	d09f      	beq.n	800b3aa <_strtod_l+0x98a>
 800b46a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b46e:	e7a0      	b.n	800b3b2 <_strtod_l+0x992>
 800b470:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b4f8 <_strtod_l+0xad8>
 800b474:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b478:	ec57 6b17 	vmov	r6, r7, d7
 800b47c:	e799      	b.n	800b3b2 <_strtod_l+0x992>
 800b47e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1c1      	bne.n	800b410 <_strtod_l+0x9f0>
 800b48c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b490:	0d1b      	lsrs	r3, r3, #20
 800b492:	051b      	lsls	r3, r3, #20
 800b494:	429d      	cmp	r5, r3
 800b496:	d1bb      	bne.n	800b410 <_strtod_l+0x9f0>
 800b498:	4630      	mov	r0, r6
 800b49a:	4639      	mov	r1, r7
 800b49c:	f7f5 fc14 	bl	8000cc8 <__aeabi_d2lz>
 800b4a0:	f7f5 f884 	bl	80005ac <__aeabi_l2d>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	f7f4 fef4 	bl	8000298 <__aeabi_dsub>
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b4b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4be:	ea46 060a 	orr.w	r6, r6, sl
 800b4c2:	431e      	orrs	r6, r3
 800b4c4:	d06f      	beq.n	800b5a6 <_strtod_l+0xb86>
 800b4c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b500 <_strtod_l+0xae0>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f5 fb0e 	bl	8000aec <__aeabi_dcmplt>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	f47f acd3 	bne.w	800ae7c <_strtod_l+0x45c>
 800b4d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b508 <_strtod_l+0xae8>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4e0:	f7f5 fb22 	bl	8000b28 <__aeabi_dcmpgt>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d093      	beq.n	800b410 <_strtod_l+0x9f0>
 800b4e8:	e4c8      	b.n	800ae7c <_strtod_l+0x45c>
 800b4ea:	bf00      	nop
 800b4ec:	f3af 8000 	nop.w
 800b4f0:	00000000 	.word	0x00000000
 800b4f4:	bff00000 	.word	0xbff00000
 800b4f8:	00000000 	.word	0x00000000
 800b4fc:	3ff00000 	.word	0x3ff00000
 800b500:	94a03595 	.word	0x94a03595
 800b504:	3fdfffff 	.word	0x3fdfffff
 800b508:	35afe535 	.word	0x35afe535
 800b50c:	3fe00000 	.word	0x3fe00000
 800b510:	000fffff 	.word	0x000fffff
 800b514:	7ff00000 	.word	0x7ff00000
 800b518:	7fefffff 	.word	0x7fefffff
 800b51c:	3ff00000 	.word	0x3ff00000
 800b520:	3fe00000 	.word	0x3fe00000
 800b524:	7fe00000 	.word	0x7fe00000
 800b528:	7c9fffff 	.word	0x7c9fffff
 800b52c:	9b08      	ldr	r3, [sp, #32]
 800b52e:	b323      	cbz	r3, 800b57a <_strtod_l+0xb5a>
 800b530:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b534:	d821      	bhi.n	800b57a <_strtod_l+0xb5a>
 800b536:	a328      	add	r3, pc, #160	@ (adr r3, 800b5d8 <_strtod_l+0xbb8>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	4630      	mov	r0, r6
 800b53e:	4639      	mov	r1, r7
 800b540:	f7f5 fade 	bl	8000b00 <__aeabi_dcmple>
 800b544:	b1a0      	cbz	r0, 800b570 <_strtod_l+0xb50>
 800b546:	4639      	mov	r1, r7
 800b548:	4630      	mov	r0, r6
 800b54a:	f7f5 fb35 	bl	8000bb8 <__aeabi_d2uiz>
 800b54e:	2801      	cmp	r0, #1
 800b550:	bf38      	it	cc
 800b552:	2001      	movcc	r0, #1
 800b554:	f7f4 ffde 	bl	8000514 <__aeabi_ui2d>
 800b558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b55a:	4606      	mov	r6, r0
 800b55c:	460f      	mov	r7, r1
 800b55e:	b9fb      	cbnz	r3, 800b5a0 <_strtod_l+0xb80>
 800b560:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b564:	9014      	str	r0, [sp, #80]	@ 0x50
 800b566:	9315      	str	r3, [sp, #84]	@ 0x54
 800b568:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b56c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b570:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b572:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b576:	1b5b      	subs	r3, r3, r5
 800b578:	9311      	str	r3, [sp, #68]	@ 0x44
 800b57a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b57e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b582:	f7ff f8f1 	bl	800a768 <__ulp>
 800b586:	4650      	mov	r0, sl
 800b588:	ec53 2b10 	vmov	r2, r3, d0
 800b58c:	4659      	mov	r1, fp
 800b58e:	f7f5 f83b 	bl	8000608 <__aeabi_dmul>
 800b592:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b596:	f7f4 fe81 	bl	800029c <__adddf3>
 800b59a:	4682      	mov	sl, r0
 800b59c:	468b      	mov	fp, r1
 800b59e:	e770      	b.n	800b482 <_strtod_l+0xa62>
 800b5a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b5a4:	e7e0      	b.n	800b568 <_strtod_l+0xb48>
 800b5a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5e0 <_strtod_l+0xbc0>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	f7f5 fa9e 	bl	8000aec <__aeabi_dcmplt>
 800b5b0:	e798      	b.n	800b4e4 <_strtod_l+0xac4>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b5b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b5b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5ba:	6013      	str	r3, [r2, #0]
 800b5bc:	f7ff ba6d 	b.w	800aa9a <_strtod_l+0x7a>
 800b5c0:	2a65      	cmp	r2, #101	@ 0x65
 800b5c2:	f43f ab68 	beq.w	800ac96 <_strtod_l+0x276>
 800b5c6:	2a45      	cmp	r2, #69	@ 0x45
 800b5c8:	f43f ab65 	beq.w	800ac96 <_strtod_l+0x276>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f7ff bba0 	b.w	800ad12 <_strtod_l+0x2f2>
 800b5d2:	bf00      	nop
 800b5d4:	f3af 8000 	nop.w
 800b5d8:	ffc00000 	.word	0xffc00000
 800b5dc:	41dfffff 	.word	0x41dfffff
 800b5e0:	94a03595 	.word	0x94a03595
 800b5e4:	3fcfffff 	.word	0x3fcfffff

0800b5e8 <_strtod_r>:
 800b5e8:	4b01      	ldr	r3, [pc, #4]	@ (800b5f0 <_strtod_r+0x8>)
 800b5ea:	f7ff ba19 	b.w	800aa20 <_strtod_l>
 800b5ee:	bf00      	nop
 800b5f0:	200000d8 	.word	0x200000d8

0800b5f4 <_strtol_l.isra.0>:
 800b5f4:	2b24      	cmp	r3, #36	@ 0x24
 800b5f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fa:	4686      	mov	lr, r0
 800b5fc:	4690      	mov	r8, r2
 800b5fe:	d801      	bhi.n	800b604 <_strtol_l.isra.0+0x10>
 800b600:	2b01      	cmp	r3, #1
 800b602:	d106      	bne.n	800b612 <_strtol_l.isra.0+0x1e>
 800b604:	f7fd fda8 	bl	8009158 <__errno>
 800b608:	2316      	movs	r3, #22
 800b60a:	6003      	str	r3, [r0, #0]
 800b60c:	2000      	movs	r0, #0
 800b60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b612:	4834      	ldr	r0, [pc, #208]	@ (800b6e4 <_strtol_l.isra.0+0xf0>)
 800b614:	460d      	mov	r5, r1
 800b616:	462a      	mov	r2, r5
 800b618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b61c:	5d06      	ldrb	r6, [r0, r4]
 800b61e:	f016 0608 	ands.w	r6, r6, #8
 800b622:	d1f8      	bne.n	800b616 <_strtol_l.isra.0+0x22>
 800b624:	2c2d      	cmp	r4, #45	@ 0x2d
 800b626:	d110      	bne.n	800b64a <_strtol_l.isra.0+0x56>
 800b628:	782c      	ldrb	r4, [r5, #0]
 800b62a:	2601      	movs	r6, #1
 800b62c:	1c95      	adds	r5, r2, #2
 800b62e:	f033 0210 	bics.w	r2, r3, #16
 800b632:	d115      	bne.n	800b660 <_strtol_l.isra.0+0x6c>
 800b634:	2c30      	cmp	r4, #48	@ 0x30
 800b636:	d10d      	bne.n	800b654 <_strtol_l.isra.0+0x60>
 800b638:	782a      	ldrb	r2, [r5, #0]
 800b63a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b63e:	2a58      	cmp	r2, #88	@ 0x58
 800b640:	d108      	bne.n	800b654 <_strtol_l.isra.0+0x60>
 800b642:	786c      	ldrb	r4, [r5, #1]
 800b644:	3502      	adds	r5, #2
 800b646:	2310      	movs	r3, #16
 800b648:	e00a      	b.n	800b660 <_strtol_l.isra.0+0x6c>
 800b64a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b64c:	bf04      	itt	eq
 800b64e:	782c      	ldrbeq	r4, [r5, #0]
 800b650:	1c95      	addeq	r5, r2, #2
 800b652:	e7ec      	b.n	800b62e <_strtol_l.isra.0+0x3a>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1f6      	bne.n	800b646 <_strtol_l.isra.0+0x52>
 800b658:	2c30      	cmp	r4, #48	@ 0x30
 800b65a:	bf14      	ite	ne
 800b65c:	230a      	movne	r3, #10
 800b65e:	2308      	moveq	r3, #8
 800b660:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b664:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b668:	2200      	movs	r2, #0
 800b66a:	fbbc f9f3 	udiv	r9, ip, r3
 800b66e:	4610      	mov	r0, r2
 800b670:	fb03 ca19 	mls	sl, r3, r9, ip
 800b674:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b678:	2f09      	cmp	r7, #9
 800b67a:	d80f      	bhi.n	800b69c <_strtol_l.isra.0+0xa8>
 800b67c:	463c      	mov	r4, r7
 800b67e:	42a3      	cmp	r3, r4
 800b680:	dd1b      	ble.n	800b6ba <_strtol_l.isra.0+0xc6>
 800b682:	1c57      	adds	r7, r2, #1
 800b684:	d007      	beq.n	800b696 <_strtol_l.isra.0+0xa2>
 800b686:	4581      	cmp	r9, r0
 800b688:	d314      	bcc.n	800b6b4 <_strtol_l.isra.0+0xc0>
 800b68a:	d101      	bne.n	800b690 <_strtol_l.isra.0+0x9c>
 800b68c:	45a2      	cmp	sl, r4
 800b68e:	db11      	blt.n	800b6b4 <_strtol_l.isra.0+0xc0>
 800b690:	fb00 4003 	mla	r0, r0, r3, r4
 800b694:	2201      	movs	r2, #1
 800b696:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b69a:	e7eb      	b.n	800b674 <_strtol_l.isra.0+0x80>
 800b69c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b6a0:	2f19      	cmp	r7, #25
 800b6a2:	d801      	bhi.n	800b6a8 <_strtol_l.isra.0+0xb4>
 800b6a4:	3c37      	subs	r4, #55	@ 0x37
 800b6a6:	e7ea      	b.n	800b67e <_strtol_l.isra.0+0x8a>
 800b6a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b6ac:	2f19      	cmp	r7, #25
 800b6ae:	d804      	bhi.n	800b6ba <_strtol_l.isra.0+0xc6>
 800b6b0:	3c57      	subs	r4, #87	@ 0x57
 800b6b2:	e7e4      	b.n	800b67e <_strtol_l.isra.0+0x8a>
 800b6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b8:	e7ed      	b.n	800b696 <_strtol_l.isra.0+0xa2>
 800b6ba:	1c53      	adds	r3, r2, #1
 800b6bc:	d108      	bne.n	800b6d0 <_strtol_l.isra.0+0xdc>
 800b6be:	2322      	movs	r3, #34	@ 0x22
 800b6c0:	f8ce 3000 	str.w	r3, [lr]
 800b6c4:	4660      	mov	r0, ip
 800b6c6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ca:	d0a0      	beq.n	800b60e <_strtol_l.isra.0+0x1a>
 800b6cc:	1e69      	subs	r1, r5, #1
 800b6ce:	e006      	b.n	800b6de <_strtol_l.isra.0+0xea>
 800b6d0:	b106      	cbz	r6, 800b6d4 <_strtol_l.isra.0+0xe0>
 800b6d2:	4240      	negs	r0, r0
 800b6d4:	f1b8 0f00 	cmp.w	r8, #0
 800b6d8:	d099      	beq.n	800b60e <_strtol_l.isra.0+0x1a>
 800b6da:	2a00      	cmp	r2, #0
 800b6dc:	d1f6      	bne.n	800b6cc <_strtol_l.isra.0+0xd8>
 800b6de:	f8c8 1000 	str.w	r1, [r8]
 800b6e2:	e794      	b.n	800b60e <_strtol_l.isra.0+0x1a>
 800b6e4:	0800dc19 	.word	0x0800dc19

0800b6e8 <_strtol_r>:
 800b6e8:	f7ff bf84 	b.w	800b5f4 <_strtol_l.isra.0>

0800b6ec <__ssputs_r>:
 800b6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f0:	688e      	ldr	r6, [r1, #8]
 800b6f2:	461f      	mov	r7, r3
 800b6f4:	42be      	cmp	r6, r7
 800b6f6:	680b      	ldr	r3, [r1, #0]
 800b6f8:	4682      	mov	sl, r0
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	4690      	mov	r8, r2
 800b6fe:	d82d      	bhi.n	800b75c <__ssputs_r+0x70>
 800b700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b704:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b708:	d026      	beq.n	800b758 <__ssputs_r+0x6c>
 800b70a:	6965      	ldr	r5, [r4, #20]
 800b70c:	6909      	ldr	r1, [r1, #16]
 800b70e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b712:	eba3 0901 	sub.w	r9, r3, r1
 800b716:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b71a:	1c7b      	adds	r3, r7, #1
 800b71c:	444b      	add	r3, r9
 800b71e:	106d      	asrs	r5, r5, #1
 800b720:	429d      	cmp	r5, r3
 800b722:	bf38      	it	cc
 800b724:	461d      	movcc	r5, r3
 800b726:	0553      	lsls	r3, r2, #21
 800b728:	d527      	bpl.n	800b77a <__ssputs_r+0x8e>
 800b72a:	4629      	mov	r1, r5
 800b72c:	f7fe fc24 	bl	8009f78 <_malloc_r>
 800b730:	4606      	mov	r6, r0
 800b732:	b360      	cbz	r0, 800b78e <__ssputs_r+0xa2>
 800b734:	6921      	ldr	r1, [r4, #16]
 800b736:	464a      	mov	r2, r9
 800b738:	f7fd fd3b 	bl	80091b2 <memcpy>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	6126      	str	r6, [r4, #16]
 800b74a:	6165      	str	r5, [r4, #20]
 800b74c:	444e      	add	r6, r9
 800b74e:	eba5 0509 	sub.w	r5, r5, r9
 800b752:	6026      	str	r6, [r4, #0]
 800b754:	60a5      	str	r5, [r4, #8]
 800b756:	463e      	mov	r6, r7
 800b758:	42be      	cmp	r6, r7
 800b75a:	d900      	bls.n	800b75e <__ssputs_r+0x72>
 800b75c:	463e      	mov	r6, r7
 800b75e:	6820      	ldr	r0, [r4, #0]
 800b760:	4632      	mov	r2, r6
 800b762:	4641      	mov	r1, r8
 800b764:	f000 fa28 	bl	800bbb8 <memmove>
 800b768:	68a3      	ldr	r3, [r4, #8]
 800b76a:	1b9b      	subs	r3, r3, r6
 800b76c:	60a3      	str	r3, [r4, #8]
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	4433      	add	r3, r6
 800b772:	6023      	str	r3, [r4, #0]
 800b774:	2000      	movs	r0, #0
 800b776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77a:	462a      	mov	r2, r5
 800b77c:	f000 fe01 	bl	800c382 <_realloc_r>
 800b780:	4606      	mov	r6, r0
 800b782:	2800      	cmp	r0, #0
 800b784:	d1e0      	bne.n	800b748 <__ssputs_r+0x5c>
 800b786:	6921      	ldr	r1, [r4, #16]
 800b788:	4650      	mov	r0, sl
 800b78a:	f7fe fb81 	bl	8009e90 <_free_r>
 800b78e:	230c      	movs	r3, #12
 800b790:	f8ca 3000 	str.w	r3, [sl]
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b79a:	81a3      	strh	r3, [r4, #12]
 800b79c:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a0:	e7e9      	b.n	800b776 <__ssputs_r+0x8a>
	...

0800b7a4 <_svfiprintf_r>:
 800b7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a8:	4698      	mov	r8, r3
 800b7aa:	898b      	ldrh	r3, [r1, #12]
 800b7ac:	061b      	lsls	r3, r3, #24
 800b7ae:	b09d      	sub	sp, #116	@ 0x74
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	460d      	mov	r5, r1
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	d510      	bpl.n	800b7da <_svfiprintf_r+0x36>
 800b7b8:	690b      	ldr	r3, [r1, #16]
 800b7ba:	b973      	cbnz	r3, 800b7da <_svfiprintf_r+0x36>
 800b7bc:	2140      	movs	r1, #64	@ 0x40
 800b7be:	f7fe fbdb 	bl	8009f78 <_malloc_r>
 800b7c2:	6028      	str	r0, [r5, #0]
 800b7c4:	6128      	str	r0, [r5, #16]
 800b7c6:	b930      	cbnz	r0, 800b7d6 <_svfiprintf_r+0x32>
 800b7c8:	230c      	movs	r3, #12
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	b01d      	add	sp, #116	@ 0x74
 800b7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d6:	2340      	movs	r3, #64	@ 0x40
 800b7d8:	616b      	str	r3, [r5, #20]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7de:	2320      	movs	r3, #32
 800b7e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e8:	2330      	movs	r3, #48	@ 0x30
 800b7ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b988 <_svfiprintf_r+0x1e4>
 800b7ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7f2:	f04f 0901 	mov.w	r9, #1
 800b7f6:	4623      	mov	r3, r4
 800b7f8:	469a      	mov	sl, r3
 800b7fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7fe:	b10a      	cbz	r2, 800b804 <_svfiprintf_r+0x60>
 800b800:	2a25      	cmp	r2, #37	@ 0x25
 800b802:	d1f9      	bne.n	800b7f8 <_svfiprintf_r+0x54>
 800b804:	ebba 0b04 	subs.w	fp, sl, r4
 800b808:	d00b      	beq.n	800b822 <_svfiprintf_r+0x7e>
 800b80a:	465b      	mov	r3, fp
 800b80c:	4622      	mov	r2, r4
 800b80e:	4629      	mov	r1, r5
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff ff6b 	bl	800b6ec <__ssputs_r>
 800b816:	3001      	adds	r0, #1
 800b818:	f000 80a7 	beq.w	800b96a <_svfiprintf_r+0x1c6>
 800b81c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b81e:	445a      	add	r2, fp
 800b820:	9209      	str	r2, [sp, #36]	@ 0x24
 800b822:	f89a 3000 	ldrb.w	r3, [sl]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 809f 	beq.w	800b96a <_svfiprintf_r+0x1c6>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f04f 32ff 	mov.w	r2, #4294967295
 800b832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b836:	f10a 0a01 	add.w	sl, sl, #1
 800b83a:	9304      	str	r3, [sp, #16]
 800b83c:	9307      	str	r3, [sp, #28]
 800b83e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b842:	931a      	str	r3, [sp, #104]	@ 0x68
 800b844:	4654      	mov	r4, sl
 800b846:	2205      	movs	r2, #5
 800b848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b84c:	484e      	ldr	r0, [pc, #312]	@ (800b988 <_svfiprintf_r+0x1e4>)
 800b84e:	f7f4 fcc7 	bl	80001e0 <memchr>
 800b852:	9a04      	ldr	r2, [sp, #16]
 800b854:	b9d8      	cbnz	r0, 800b88e <_svfiprintf_r+0xea>
 800b856:	06d0      	lsls	r0, r2, #27
 800b858:	bf44      	itt	mi
 800b85a:	2320      	movmi	r3, #32
 800b85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b860:	0711      	lsls	r1, r2, #28
 800b862:	bf44      	itt	mi
 800b864:	232b      	movmi	r3, #43	@ 0x2b
 800b866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b86a:	f89a 3000 	ldrb.w	r3, [sl]
 800b86e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b870:	d015      	beq.n	800b89e <_svfiprintf_r+0xfa>
 800b872:	9a07      	ldr	r2, [sp, #28]
 800b874:	4654      	mov	r4, sl
 800b876:	2000      	movs	r0, #0
 800b878:	f04f 0c0a 	mov.w	ip, #10
 800b87c:	4621      	mov	r1, r4
 800b87e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b882:	3b30      	subs	r3, #48	@ 0x30
 800b884:	2b09      	cmp	r3, #9
 800b886:	d94b      	bls.n	800b920 <_svfiprintf_r+0x17c>
 800b888:	b1b0      	cbz	r0, 800b8b8 <_svfiprintf_r+0x114>
 800b88a:	9207      	str	r2, [sp, #28]
 800b88c:	e014      	b.n	800b8b8 <_svfiprintf_r+0x114>
 800b88e:	eba0 0308 	sub.w	r3, r0, r8
 800b892:	fa09 f303 	lsl.w	r3, r9, r3
 800b896:	4313      	orrs	r3, r2
 800b898:	9304      	str	r3, [sp, #16]
 800b89a:	46a2      	mov	sl, r4
 800b89c:	e7d2      	b.n	800b844 <_svfiprintf_r+0xa0>
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	1d19      	adds	r1, r3, #4
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	9103      	str	r1, [sp, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bfbb      	ittet	lt
 800b8aa:	425b      	neglt	r3, r3
 800b8ac:	f042 0202 	orrlt.w	r2, r2, #2
 800b8b0:	9307      	strge	r3, [sp, #28]
 800b8b2:	9307      	strlt	r3, [sp, #28]
 800b8b4:	bfb8      	it	lt
 800b8b6:	9204      	strlt	r2, [sp, #16]
 800b8b8:	7823      	ldrb	r3, [r4, #0]
 800b8ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8bc:	d10a      	bne.n	800b8d4 <_svfiprintf_r+0x130>
 800b8be:	7863      	ldrb	r3, [r4, #1]
 800b8c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c2:	d132      	bne.n	800b92a <_svfiprintf_r+0x186>
 800b8c4:	9b03      	ldr	r3, [sp, #12]
 800b8c6:	1d1a      	adds	r2, r3, #4
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	9203      	str	r2, [sp, #12]
 800b8cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8d0:	3402      	adds	r4, #2
 800b8d2:	9305      	str	r3, [sp, #20]
 800b8d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b998 <_svfiprintf_r+0x1f4>
 800b8d8:	7821      	ldrb	r1, [r4, #0]
 800b8da:	2203      	movs	r2, #3
 800b8dc:	4650      	mov	r0, sl
 800b8de:	f7f4 fc7f 	bl	80001e0 <memchr>
 800b8e2:	b138      	cbz	r0, 800b8f4 <_svfiprintf_r+0x150>
 800b8e4:	9b04      	ldr	r3, [sp, #16]
 800b8e6:	eba0 000a 	sub.w	r0, r0, sl
 800b8ea:	2240      	movs	r2, #64	@ 0x40
 800b8ec:	4082      	lsls	r2, r0
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	3401      	adds	r4, #1
 800b8f2:	9304      	str	r3, [sp, #16]
 800b8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f8:	4824      	ldr	r0, [pc, #144]	@ (800b98c <_svfiprintf_r+0x1e8>)
 800b8fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8fe:	2206      	movs	r2, #6
 800b900:	f7f4 fc6e 	bl	80001e0 <memchr>
 800b904:	2800      	cmp	r0, #0
 800b906:	d036      	beq.n	800b976 <_svfiprintf_r+0x1d2>
 800b908:	4b21      	ldr	r3, [pc, #132]	@ (800b990 <_svfiprintf_r+0x1ec>)
 800b90a:	bb1b      	cbnz	r3, 800b954 <_svfiprintf_r+0x1b0>
 800b90c:	9b03      	ldr	r3, [sp, #12]
 800b90e:	3307      	adds	r3, #7
 800b910:	f023 0307 	bic.w	r3, r3, #7
 800b914:	3308      	adds	r3, #8
 800b916:	9303      	str	r3, [sp, #12]
 800b918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b91a:	4433      	add	r3, r6
 800b91c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b91e:	e76a      	b.n	800b7f6 <_svfiprintf_r+0x52>
 800b920:	fb0c 3202 	mla	r2, ip, r2, r3
 800b924:	460c      	mov	r4, r1
 800b926:	2001      	movs	r0, #1
 800b928:	e7a8      	b.n	800b87c <_svfiprintf_r+0xd8>
 800b92a:	2300      	movs	r3, #0
 800b92c:	3401      	adds	r4, #1
 800b92e:	9305      	str	r3, [sp, #20]
 800b930:	4619      	mov	r1, r3
 800b932:	f04f 0c0a 	mov.w	ip, #10
 800b936:	4620      	mov	r0, r4
 800b938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93c:	3a30      	subs	r2, #48	@ 0x30
 800b93e:	2a09      	cmp	r2, #9
 800b940:	d903      	bls.n	800b94a <_svfiprintf_r+0x1a6>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0c6      	beq.n	800b8d4 <_svfiprintf_r+0x130>
 800b946:	9105      	str	r1, [sp, #20]
 800b948:	e7c4      	b.n	800b8d4 <_svfiprintf_r+0x130>
 800b94a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b94e:	4604      	mov	r4, r0
 800b950:	2301      	movs	r3, #1
 800b952:	e7f0      	b.n	800b936 <_svfiprintf_r+0x192>
 800b954:	ab03      	add	r3, sp, #12
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	462a      	mov	r2, r5
 800b95a:	4b0e      	ldr	r3, [pc, #56]	@ (800b994 <_svfiprintf_r+0x1f0>)
 800b95c:	a904      	add	r1, sp, #16
 800b95e:	4638      	mov	r0, r7
 800b960:	f7fc facc 	bl	8007efc <_printf_float>
 800b964:	1c42      	adds	r2, r0, #1
 800b966:	4606      	mov	r6, r0
 800b968:	d1d6      	bne.n	800b918 <_svfiprintf_r+0x174>
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	065b      	lsls	r3, r3, #25
 800b96e:	f53f af2d 	bmi.w	800b7cc <_svfiprintf_r+0x28>
 800b972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b974:	e72c      	b.n	800b7d0 <_svfiprintf_r+0x2c>
 800b976:	ab03      	add	r3, sp, #12
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	462a      	mov	r2, r5
 800b97c:	4b05      	ldr	r3, [pc, #20]	@ (800b994 <_svfiprintf_r+0x1f0>)
 800b97e:	a904      	add	r1, sp, #16
 800b980:	4638      	mov	r0, r7
 800b982:	f7fc fd53 	bl	800842c <_printf_i>
 800b986:	e7ed      	b.n	800b964 <_svfiprintf_r+0x1c0>
 800b988:	0800da15 	.word	0x0800da15
 800b98c:	0800da1f 	.word	0x0800da1f
 800b990:	08007efd 	.word	0x08007efd
 800b994:	0800b6ed 	.word	0x0800b6ed
 800b998:	0800da1b 	.word	0x0800da1b

0800b99c <__sflush_r>:
 800b99c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a4:	0716      	lsls	r6, r2, #28
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	460c      	mov	r4, r1
 800b9aa:	d454      	bmi.n	800ba56 <__sflush_r+0xba>
 800b9ac:	684b      	ldr	r3, [r1, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	dc02      	bgt.n	800b9b8 <__sflush_r+0x1c>
 800b9b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	dd48      	ble.n	800ba4a <__sflush_r+0xae>
 800b9b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	d045      	beq.n	800ba4a <__sflush_r+0xae>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9c4:	682f      	ldr	r7, [r5, #0]
 800b9c6:	6a21      	ldr	r1, [r4, #32]
 800b9c8:	602b      	str	r3, [r5, #0]
 800b9ca:	d030      	beq.n	800ba2e <__sflush_r+0x92>
 800b9cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	0759      	lsls	r1, r3, #29
 800b9d2:	d505      	bpl.n	800b9e0 <__sflush_r+0x44>
 800b9d4:	6863      	ldr	r3, [r4, #4]
 800b9d6:	1ad2      	subs	r2, r2, r3
 800b9d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9da:	b10b      	cbz	r3, 800b9e0 <__sflush_r+0x44>
 800b9dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9de:	1ad2      	subs	r2, r2, r3
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9e4:	6a21      	ldr	r1, [r4, #32]
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b0      	blx	r6
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	d106      	bne.n	800b9fe <__sflush_r+0x62>
 800b9f0:	6829      	ldr	r1, [r5, #0]
 800b9f2:	291d      	cmp	r1, #29
 800b9f4:	d82b      	bhi.n	800ba4e <__sflush_r+0xb2>
 800b9f6:	4a2a      	ldr	r2, [pc, #168]	@ (800baa0 <__sflush_r+0x104>)
 800b9f8:	40ca      	lsrs	r2, r1
 800b9fa:	07d6      	lsls	r6, r2, #31
 800b9fc:	d527      	bpl.n	800ba4e <__sflush_r+0xb2>
 800b9fe:	2200      	movs	r2, #0
 800ba00:	6062      	str	r2, [r4, #4]
 800ba02:	04d9      	lsls	r1, r3, #19
 800ba04:	6922      	ldr	r2, [r4, #16]
 800ba06:	6022      	str	r2, [r4, #0]
 800ba08:	d504      	bpl.n	800ba14 <__sflush_r+0x78>
 800ba0a:	1c42      	adds	r2, r0, #1
 800ba0c:	d101      	bne.n	800ba12 <__sflush_r+0x76>
 800ba0e:	682b      	ldr	r3, [r5, #0]
 800ba10:	b903      	cbnz	r3, 800ba14 <__sflush_r+0x78>
 800ba12:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba16:	602f      	str	r7, [r5, #0]
 800ba18:	b1b9      	cbz	r1, 800ba4a <__sflush_r+0xae>
 800ba1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba1e:	4299      	cmp	r1, r3
 800ba20:	d002      	beq.n	800ba28 <__sflush_r+0x8c>
 800ba22:	4628      	mov	r0, r5
 800ba24:	f7fe fa34 	bl	8009e90 <_free_r>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba2c:	e00d      	b.n	800ba4a <__sflush_r+0xae>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	4628      	mov	r0, r5
 800ba32:	47b0      	blx	r6
 800ba34:	4602      	mov	r2, r0
 800ba36:	1c50      	adds	r0, r2, #1
 800ba38:	d1c9      	bne.n	800b9ce <__sflush_r+0x32>
 800ba3a:	682b      	ldr	r3, [r5, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d0c6      	beq.n	800b9ce <__sflush_r+0x32>
 800ba40:	2b1d      	cmp	r3, #29
 800ba42:	d001      	beq.n	800ba48 <__sflush_r+0xac>
 800ba44:	2b16      	cmp	r3, #22
 800ba46:	d11e      	bne.n	800ba86 <__sflush_r+0xea>
 800ba48:	602f      	str	r7, [r5, #0]
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	e022      	b.n	800ba94 <__sflush_r+0xf8>
 800ba4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba52:	b21b      	sxth	r3, r3
 800ba54:	e01b      	b.n	800ba8e <__sflush_r+0xf2>
 800ba56:	690f      	ldr	r7, [r1, #16]
 800ba58:	2f00      	cmp	r7, #0
 800ba5a:	d0f6      	beq.n	800ba4a <__sflush_r+0xae>
 800ba5c:	0793      	lsls	r3, r2, #30
 800ba5e:	680e      	ldr	r6, [r1, #0]
 800ba60:	bf08      	it	eq
 800ba62:	694b      	ldreq	r3, [r1, #20]
 800ba64:	600f      	str	r7, [r1, #0]
 800ba66:	bf18      	it	ne
 800ba68:	2300      	movne	r3, #0
 800ba6a:	eba6 0807 	sub.w	r8, r6, r7
 800ba6e:	608b      	str	r3, [r1, #8]
 800ba70:	f1b8 0f00 	cmp.w	r8, #0
 800ba74:	dde9      	ble.n	800ba4a <__sflush_r+0xae>
 800ba76:	6a21      	ldr	r1, [r4, #32]
 800ba78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba7a:	4643      	mov	r3, r8
 800ba7c:	463a      	mov	r2, r7
 800ba7e:	4628      	mov	r0, r5
 800ba80:	47b0      	blx	r6
 800ba82:	2800      	cmp	r0, #0
 800ba84:	dc08      	bgt.n	800ba98 <__sflush_r+0xfc>
 800ba86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	f04f 30ff 	mov.w	r0, #4294967295
 800ba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba98:	4407      	add	r7, r0
 800ba9a:	eba8 0800 	sub.w	r8, r8, r0
 800ba9e:	e7e7      	b.n	800ba70 <__sflush_r+0xd4>
 800baa0:	20400001 	.word	0x20400001

0800baa4 <_fflush_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	690b      	ldr	r3, [r1, #16]
 800baa8:	4605      	mov	r5, r0
 800baaa:	460c      	mov	r4, r1
 800baac:	b913      	cbnz	r3, 800bab4 <_fflush_r+0x10>
 800baae:	2500      	movs	r5, #0
 800bab0:	4628      	mov	r0, r5
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	b118      	cbz	r0, 800babe <_fflush_r+0x1a>
 800bab6:	6a03      	ldr	r3, [r0, #32]
 800bab8:	b90b      	cbnz	r3, 800babe <_fflush_r+0x1a>
 800baba:	f7fd f86f 	bl	8008b9c <__sinit>
 800babe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d0f3      	beq.n	800baae <_fflush_r+0xa>
 800bac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bac8:	07d0      	lsls	r0, r2, #31
 800baca:	d404      	bmi.n	800bad6 <_fflush_r+0x32>
 800bacc:	0599      	lsls	r1, r3, #22
 800bace:	d402      	bmi.n	800bad6 <_fflush_r+0x32>
 800bad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bad2:	f7fd fb6c 	bl	80091ae <__retarget_lock_acquire_recursive>
 800bad6:	4628      	mov	r0, r5
 800bad8:	4621      	mov	r1, r4
 800bada:	f7ff ff5f 	bl	800b99c <__sflush_r>
 800bade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bae0:	07da      	lsls	r2, r3, #31
 800bae2:	4605      	mov	r5, r0
 800bae4:	d4e4      	bmi.n	800bab0 <_fflush_r+0xc>
 800bae6:	89a3      	ldrh	r3, [r4, #12]
 800bae8:	059b      	lsls	r3, r3, #22
 800baea:	d4e1      	bmi.n	800bab0 <_fflush_r+0xc>
 800baec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baee:	f7fd fb5f 	bl	80091b0 <__retarget_lock_release_recursive>
 800baf2:	e7dd      	b.n	800bab0 <_fflush_r+0xc>

0800baf4 <__swhatbuf_r>:
 800baf4:	b570      	push	{r4, r5, r6, lr}
 800baf6:	460c      	mov	r4, r1
 800baf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafc:	2900      	cmp	r1, #0
 800bafe:	b096      	sub	sp, #88	@ 0x58
 800bb00:	4615      	mov	r5, r2
 800bb02:	461e      	mov	r6, r3
 800bb04:	da0d      	bge.n	800bb22 <__swhatbuf_r+0x2e>
 800bb06:	89a3      	ldrh	r3, [r4, #12]
 800bb08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb0c:	f04f 0100 	mov.w	r1, #0
 800bb10:	bf14      	ite	ne
 800bb12:	2340      	movne	r3, #64	@ 0x40
 800bb14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb18:	2000      	movs	r0, #0
 800bb1a:	6031      	str	r1, [r6, #0]
 800bb1c:	602b      	str	r3, [r5, #0]
 800bb1e:	b016      	add	sp, #88	@ 0x58
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	466a      	mov	r2, sp
 800bb24:	f000 f874 	bl	800bc10 <_fstat_r>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	dbec      	blt.n	800bb06 <__swhatbuf_r+0x12>
 800bb2c:	9901      	ldr	r1, [sp, #4]
 800bb2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb36:	4259      	negs	r1, r3
 800bb38:	4159      	adcs	r1, r3
 800bb3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb3e:	e7eb      	b.n	800bb18 <__swhatbuf_r+0x24>

0800bb40 <__smakebuf_r>:
 800bb40:	898b      	ldrh	r3, [r1, #12]
 800bb42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb44:	079d      	lsls	r5, r3, #30
 800bb46:	4606      	mov	r6, r0
 800bb48:	460c      	mov	r4, r1
 800bb4a:	d507      	bpl.n	800bb5c <__smakebuf_r+0x1c>
 800bb4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	6123      	str	r3, [r4, #16]
 800bb54:	2301      	movs	r3, #1
 800bb56:	6163      	str	r3, [r4, #20]
 800bb58:	b003      	add	sp, #12
 800bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb5c:	ab01      	add	r3, sp, #4
 800bb5e:	466a      	mov	r2, sp
 800bb60:	f7ff ffc8 	bl	800baf4 <__swhatbuf_r>
 800bb64:	9f00      	ldr	r7, [sp, #0]
 800bb66:	4605      	mov	r5, r0
 800bb68:	4639      	mov	r1, r7
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7fe fa04 	bl	8009f78 <_malloc_r>
 800bb70:	b948      	cbnz	r0, 800bb86 <__smakebuf_r+0x46>
 800bb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb76:	059a      	lsls	r2, r3, #22
 800bb78:	d4ee      	bmi.n	800bb58 <__smakebuf_r+0x18>
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	f043 0302 	orr.w	r3, r3, #2
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	e7e2      	b.n	800bb4c <__smakebuf_r+0xc>
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	6020      	str	r0, [r4, #0]
 800bb8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb8e:	81a3      	strh	r3, [r4, #12]
 800bb90:	9b01      	ldr	r3, [sp, #4]
 800bb92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb96:	b15b      	cbz	r3, 800bbb0 <__smakebuf_r+0x70>
 800bb98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f000 f849 	bl	800bc34 <_isatty_r>
 800bba2:	b128      	cbz	r0, 800bbb0 <__smakebuf_r+0x70>
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	f023 0303 	bic.w	r3, r3, #3
 800bbaa:	f043 0301 	orr.w	r3, r3, #1
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	431d      	orrs	r5, r3
 800bbb4:	81a5      	strh	r5, [r4, #12]
 800bbb6:	e7cf      	b.n	800bb58 <__smakebuf_r+0x18>

0800bbb8 <memmove>:
 800bbb8:	4288      	cmp	r0, r1
 800bbba:	b510      	push	{r4, lr}
 800bbbc:	eb01 0402 	add.w	r4, r1, r2
 800bbc0:	d902      	bls.n	800bbc8 <memmove+0x10>
 800bbc2:	4284      	cmp	r4, r0
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	d807      	bhi.n	800bbd8 <memmove+0x20>
 800bbc8:	1e43      	subs	r3, r0, #1
 800bbca:	42a1      	cmp	r1, r4
 800bbcc:	d008      	beq.n	800bbe0 <memmove+0x28>
 800bbce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbd6:	e7f8      	b.n	800bbca <memmove+0x12>
 800bbd8:	4402      	add	r2, r0
 800bbda:	4601      	mov	r1, r0
 800bbdc:	428a      	cmp	r2, r1
 800bbde:	d100      	bne.n	800bbe2 <memmove+0x2a>
 800bbe0:	bd10      	pop	{r4, pc}
 800bbe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbea:	e7f7      	b.n	800bbdc <memmove+0x24>

0800bbec <strncmp>:
 800bbec:	b510      	push	{r4, lr}
 800bbee:	b16a      	cbz	r2, 800bc0c <strncmp+0x20>
 800bbf0:	3901      	subs	r1, #1
 800bbf2:	1884      	adds	r4, r0, r2
 800bbf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d103      	bne.n	800bc08 <strncmp+0x1c>
 800bc00:	42a0      	cmp	r0, r4
 800bc02:	d001      	beq.n	800bc08 <strncmp+0x1c>
 800bc04:	2a00      	cmp	r2, #0
 800bc06:	d1f5      	bne.n	800bbf4 <strncmp+0x8>
 800bc08:	1ad0      	subs	r0, r2, r3
 800bc0a:	bd10      	pop	{r4, pc}
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	e7fc      	b.n	800bc0a <strncmp+0x1e>

0800bc10 <_fstat_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	4d07      	ldr	r5, [pc, #28]	@ (800bc30 <_fstat_r+0x20>)
 800bc14:	2300      	movs	r3, #0
 800bc16:	4604      	mov	r4, r0
 800bc18:	4608      	mov	r0, r1
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	602b      	str	r3, [r5, #0]
 800bc1e:	f7f8 fadf 	bl	80041e0 <_fstat>
 800bc22:	1c43      	adds	r3, r0, #1
 800bc24:	d102      	bne.n	800bc2c <_fstat_r+0x1c>
 800bc26:	682b      	ldr	r3, [r5, #0]
 800bc28:	b103      	cbz	r3, 800bc2c <_fstat_r+0x1c>
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	bd38      	pop	{r3, r4, r5, pc}
 800bc2e:	bf00      	nop
 800bc30:	20000a38 	.word	0x20000a38

0800bc34 <_isatty_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4d06      	ldr	r5, [pc, #24]	@ (800bc50 <_isatty_r+0x1c>)
 800bc38:	2300      	movs	r3, #0
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	602b      	str	r3, [r5, #0]
 800bc40:	f7f8 fade 	bl	8004200 <_isatty>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d102      	bne.n	800bc4e <_isatty_r+0x1a>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	b103      	cbz	r3, 800bc4e <_isatty_r+0x1a>
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	20000a38 	.word	0x20000a38

0800bc54 <_sbrk_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d06      	ldr	r5, [pc, #24]	@ (800bc70 <_sbrk_r+0x1c>)
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	4608      	mov	r0, r1
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	f7f8 fae6 	bl	8004230 <_sbrk>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_sbrk_r+0x1a>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_sbrk_r+0x1a>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	20000a38 	.word	0x20000a38
 800bc74:	00000000 	.word	0x00000000

0800bc78 <nan>:
 800bc78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bc80 <nan+0x8>
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	00000000 	.word	0x00000000
 800bc84:	7ff80000 	.word	0x7ff80000

0800bc88 <__assert_func>:
 800bc88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc8a:	4614      	mov	r4, r2
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4b09      	ldr	r3, [pc, #36]	@ (800bcb4 <__assert_func+0x2c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4605      	mov	r5, r0
 800bc94:	68d8      	ldr	r0, [r3, #12]
 800bc96:	b14c      	cbz	r4, 800bcac <__assert_func+0x24>
 800bc98:	4b07      	ldr	r3, [pc, #28]	@ (800bcb8 <__assert_func+0x30>)
 800bc9a:	9100      	str	r1, [sp, #0]
 800bc9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bca0:	4906      	ldr	r1, [pc, #24]	@ (800bcbc <__assert_func+0x34>)
 800bca2:	462b      	mov	r3, r5
 800bca4:	f000 fba8 	bl	800c3f8 <fiprintf>
 800bca8:	f000 fbb8 	bl	800c41c <abort>
 800bcac:	4b04      	ldr	r3, [pc, #16]	@ (800bcc0 <__assert_func+0x38>)
 800bcae:	461c      	mov	r4, r3
 800bcb0:	e7f3      	b.n	800bc9a <__assert_func+0x12>
 800bcb2:	bf00      	nop
 800bcb4:	20000088 	.word	0x20000088
 800bcb8:	0800da2e 	.word	0x0800da2e
 800bcbc:	0800da3b 	.word	0x0800da3b
 800bcc0:	0800da69 	.word	0x0800da69

0800bcc4 <_calloc_r>:
 800bcc4:	b570      	push	{r4, r5, r6, lr}
 800bcc6:	fba1 5402 	umull	r5, r4, r1, r2
 800bcca:	b934      	cbnz	r4, 800bcda <_calloc_r+0x16>
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7fe f953 	bl	8009f78 <_malloc_r>
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	b928      	cbnz	r0, 800bce2 <_calloc_r+0x1e>
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	bd70      	pop	{r4, r5, r6, pc}
 800bcda:	220c      	movs	r2, #12
 800bcdc:	6002      	str	r2, [r0, #0]
 800bcde:	2600      	movs	r6, #0
 800bce0:	e7f9      	b.n	800bcd6 <_calloc_r+0x12>
 800bce2:	462a      	mov	r2, r5
 800bce4:	4621      	mov	r1, r4
 800bce6:	f7fd f9d1 	bl	800908c <memset>
 800bcea:	e7f4      	b.n	800bcd6 <_calloc_r+0x12>

0800bcec <rshift>:
 800bcec:	6903      	ldr	r3, [r0, #16]
 800bcee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bcf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bcfa:	f100 0414 	add.w	r4, r0, #20
 800bcfe:	dd45      	ble.n	800bd8c <rshift+0xa0>
 800bd00:	f011 011f 	ands.w	r1, r1, #31
 800bd04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd0c:	d10c      	bne.n	800bd28 <rshift+0x3c>
 800bd0e:	f100 0710 	add.w	r7, r0, #16
 800bd12:	4629      	mov	r1, r5
 800bd14:	42b1      	cmp	r1, r6
 800bd16:	d334      	bcc.n	800bd82 <rshift+0x96>
 800bd18:	1a9b      	subs	r3, r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	1eea      	subs	r2, r5, #3
 800bd1e:	4296      	cmp	r6, r2
 800bd20:	bf38      	it	cc
 800bd22:	2300      	movcc	r3, #0
 800bd24:	4423      	add	r3, r4
 800bd26:	e015      	b.n	800bd54 <rshift+0x68>
 800bd28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bd2c:	f1c1 0820 	rsb	r8, r1, #32
 800bd30:	40cf      	lsrs	r7, r1
 800bd32:	f105 0e04 	add.w	lr, r5, #4
 800bd36:	46a1      	mov	r9, r4
 800bd38:	4576      	cmp	r6, lr
 800bd3a:	46f4      	mov	ip, lr
 800bd3c:	d815      	bhi.n	800bd6a <rshift+0x7e>
 800bd3e:	1a9a      	subs	r2, r3, r2
 800bd40:	0092      	lsls	r2, r2, #2
 800bd42:	3a04      	subs	r2, #4
 800bd44:	3501      	adds	r5, #1
 800bd46:	42ae      	cmp	r6, r5
 800bd48:	bf38      	it	cc
 800bd4a:	2200      	movcc	r2, #0
 800bd4c:	18a3      	adds	r3, r4, r2
 800bd4e:	50a7      	str	r7, [r4, r2]
 800bd50:	b107      	cbz	r7, 800bd54 <rshift+0x68>
 800bd52:	3304      	adds	r3, #4
 800bd54:	1b1a      	subs	r2, r3, r4
 800bd56:	42a3      	cmp	r3, r4
 800bd58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd5c:	bf08      	it	eq
 800bd5e:	2300      	moveq	r3, #0
 800bd60:	6102      	str	r2, [r0, #16]
 800bd62:	bf08      	it	eq
 800bd64:	6143      	streq	r3, [r0, #20]
 800bd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd6a:	f8dc c000 	ldr.w	ip, [ip]
 800bd6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd72:	ea4c 0707 	orr.w	r7, ip, r7
 800bd76:	f849 7b04 	str.w	r7, [r9], #4
 800bd7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd7e:	40cf      	lsrs	r7, r1
 800bd80:	e7da      	b.n	800bd38 <rshift+0x4c>
 800bd82:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd86:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd8a:	e7c3      	b.n	800bd14 <rshift+0x28>
 800bd8c:	4623      	mov	r3, r4
 800bd8e:	e7e1      	b.n	800bd54 <rshift+0x68>

0800bd90 <__hexdig_fun>:
 800bd90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bd94:	2b09      	cmp	r3, #9
 800bd96:	d802      	bhi.n	800bd9e <__hexdig_fun+0xe>
 800bd98:	3820      	subs	r0, #32
 800bd9a:	b2c0      	uxtb	r0, r0
 800bd9c:	4770      	bx	lr
 800bd9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bda2:	2b05      	cmp	r3, #5
 800bda4:	d801      	bhi.n	800bdaa <__hexdig_fun+0x1a>
 800bda6:	3847      	subs	r0, #71	@ 0x47
 800bda8:	e7f7      	b.n	800bd9a <__hexdig_fun+0xa>
 800bdaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	d801      	bhi.n	800bdb6 <__hexdig_fun+0x26>
 800bdb2:	3827      	subs	r0, #39	@ 0x27
 800bdb4:	e7f1      	b.n	800bd9a <__hexdig_fun+0xa>
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	4770      	bx	lr
	...

0800bdbc <__gethex>:
 800bdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	468a      	mov	sl, r1
 800bdc4:	9302      	str	r3, [sp, #8]
 800bdc6:	680b      	ldr	r3, [r1, #0]
 800bdc8:	9001      	str	r0, [sp, #4]
 800bdca:	4690      	mov	r8, r2
 800bdcc:	1c9c      	adds	r4, r3, #2
 800bdce:	46a1      	mov	r9, r4
 800bdd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bdd4:	2830      	cmp	r0, #48	@ 0x30
 800bdd6:	d0fa      	beq.n	800bdce <__gethex+0x12>
 800bdd8:	eba9 0303 	sub.w	r3, r9, r3
 800bddc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bde0:	f7ff ffd6 	bl	800bd90 <__hexdig_fun>
 800bde4:	4605      	mov	r5, r0
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d168      	bne.n	800bebc <__gethex+0x100>
 800bdea:	49a0      	ldr	r1, [pc, #640]	@ (800c06c <__gethex+0x2b0>)
 800bdec:	2201      	movs	r2, #1
 800bdee:	4648      	mov	r0, r9
 800bdf0:	f7ff fefc 	bl	800bbec <strncmp>
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d167      	bne.n	800beca <__gethex+0x10e>
 800bdfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bdfe:	4626      	mov	r6, r4
 800be00:	f7ff ffc6 	bl	800bd90 <__hexdig_fun>
 800be04:	2800      	cmp	r0, #0
 800be06:	d062      	beq.n	800bece <__gethex+0x112>
 800be08:	4623      	mov	r3, r4
 800be0a:	7818      	ldrb	r0, [r3, #0]
 800be0c:	2830      	cmp	r0, #48	@ 0x30
 800be0e:	4699      	mov	r9, r3
 800be10:	f103 0301 	add.w	r3, r3, #1
 800be14:	d0f9      	beq.n	800be0a <__gethex+0x4e>
 800be16:	f7ff ffbb 	bl	800bd90 <__hexdig_fun>
 800be1a:	fab0 f580 	clz	r5, r0
 800be1e:	096d      	lsrs	r5, r5, #5
 800be20:	f04f 0b01 	mov.w	fp, #1
 800be24:	464a      	mov	r2, r9
 800be26:	4616      	mov	r6, r2
 800be28:	3201      	adds	r2, #1
 800be2a:	7830      	ldrb	r0, [r6, #0]
 800be2c:	f7ff ffb0 	bl	800bd90 <__hexdig_fun>
 800be30:	2800      	cmp	r0, #0
 800be32:	d1f8      	bne.n	800be26 <__gethex+0x6a>
 800be34:	498d      	ldr	r1, [pc, #564]	@ (800c06c <__gethex+0x2b0>)
 800be36:	2201      	movs	r2, #1
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff fed7 	bl	800bbec <strncmp>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d13f      	bne.n	800bec2 <__gethex+0x106>
 800be42:	b944      	cbnz	r4, 800be56 <__gethex+0x9a>
 800be44:	1c74      	adds	r4, r6, #1
 800be46:	4622      	mov	r2, r4
 800be48:	4616      	mov	r6, r2
 800be4a:	3201      	adds	r2, #1
 800be4c:	7830      	ldrb	r0, [r6, #0]
 800be4e:	f7ff ff9f 	bl	800bd90 <__hexdig_fun>
 800be52:	2800      	cmp	r0, #0
 800be54:	d1f8      	bne.n	800be48 <__gethex+0x8c>
 800be56:	1ba4      	subs	r4, r4, r6
 800be58:	00a7      	lsls	r7, r4, #2
 800be5a:	7833      	ldrb	r3, [r6, #0]
 800be5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800be60:	2b50      	cmp	r3, #80	@ 0x50
 800be62:	d13e      	bne.n	800bee2 <__gethex+0x126>
 800be64:	7873      	ldrb	r3, [r6, #1]
 800be66:	2b2b      	cmp	r3, #43	@ 0x2b
 800be68:	d033      	beq.n	800bed2 <__gethex+0x116>
 800be6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800be6c:	d034      	beq.n	800bed8 <__gethex+0x11c>
 800be6e:	1c71      	adds	r1, r6, #1
 800be70:	2400      	movs	r4, #0
 800be72:	7808      	ldrb	r0, [r1, #0]
 800be74:	f7ff ff8c 	bl	800bd90 <__hexdig_fun>
 800be78:	1e43      	subs	r3, r0, #1
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b18      	cmp	r3, #24
 800be7e:	d830      	bhi.n	800bee2 <__gethex+0x126>
 800be80:	f1a0 0210 	sub.w	r2, r0, #16
 800be84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be88:	f7ff ff82 	bl	800bd90 <__hexdig_fun>
 800be8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800be90:	fa5f fc8c 	uxtb.w	ip, ip
 800be94:	f1bc 0f18 	cmp.w	ip, #24
 800be98:	f04f 030a 	mov.w	r3, #10
 800be9c:	d91e      	bls.n	800bedc <__gethex+0x120>
 800be9e:	b104      	cbz	r4, 800bea2 <__gethex+0xe6>
 800bea0:	4252      	negs	r2, r2
 800bea2:	4417      	add	r7, r2
 800bea4:	f8ca 1000 	str.w	r1, [sl]
 800bea8:	b1ed      	cbz	r5, 800bee6 <__gethex+0x12a>
 800beaa:	f1bb 0f00 	cmp.w	fp, #0
 800beae:	bf0c      	ite	eq
 800beb0:	2506      	moveq	r5, #6
 800beb2:	2500      	movne	r5, #0
 800beb4:	4628      	mov	r0, r5
 800beb6:	b005      	add	sp, #20
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bebc:	2500      	movs	r5, #0
 800bebe:	462c      	mov	r4, r5
 800bec0:	e7b0      	b.n	800be24 <__gethex+0x68>
 800bec2:	2c00      	cmp	r4, #0
 800bec4:	d1c7      	bne.n	800be56 <__gethex+0x9a>
 800bec6:	4627      	mov	r7, r4
 800bec8:	e7c7      	b.n	800be5a <__gethex+0x9e>
 800beca:	464e      	mov	r6, r9
 800becc:	462f      	mov	r7, r5
 800bece:	2501      	movs	r5, #1
 800bed0:	e7c3      	b.n	800be5a <__gethex+0x9e>
 800bed2:	2400      	movs	r4, #0
 800bed4:	1cb1      	adds	r1, r6, #2
 800bed6:	e7cc      	b.n	800be72 <__gethex+0xb6>
 800bed8:	2401      	movs	r4, #1
 800beda:	e7fb      	b.n	800bed4 <__gethex+0x118>
 800bedc:	fb03 0002 	mla	r0, r3, r2, r0
 800bee0:	e7ce      	b.n	800be80 <__gethex+0xc4>
 800bee2:	4631      	mov	r1, r6
 800bee4:	e7de      	b.n	800bea4 <__gethex+0xe8>
 800bee6:	eba6 0309 	sub.w	r3, r6, r9
 800beea:	3b01      	subs	r3, #1
 800beec:	4629      	mov	r1, r5
 800beee:	2b07      	cmp	r3, #7
 800bef0:	dc0a      	bgt.n	800bf08 <__gethex+0x14c>
 800bef2:	9801      	ldr	r0, [sp, #4]
 800bef4:	f7fe f8cc 	bl	800a090 <_Balloc>
 800bef8:	4604      	mov	r4, r0
 800befa:	b940      	cbnz	r0, 800bf0e <__gethex+0x152>
 800befc:	4b5c      	ldr	r3, [pc, #368]	@ (800c070 <__gethex+0x2b4>)
 800befe:	4602      	mov	r2, r0
 800bf00:	21e4      	movs	r1, #228	@ 0xe4
 800bf02:	485c      	ldr	r0, [pc, #368]	@ (800c074 <__gethex+0x2b8>)
 800bf04:	f7ff fec0 	bl	800bc88 <__assert_func>
 800bf08:	3101      	adds	r1, #1
 800bf0a:	105b      	asrs	r3, r3, #1
 800bf0c:	e7ef      	b.n	800beee <__gethex+0x132>
 800bf0e:	f100 0a14 	add.w	sl, r0, #20
 800bf12:	2300      	movs	r3, #0
 800bf14:	4655      	mov	r5, sl
 800bf16:	469b      	mov	fp, r3
 800bf18:	45b1      	cmp	r9, r6
 800bf1a:	d337      	bcc.n	800bf8c <__gethex+0x1d0>
 800bf1c:	f845 bb04 	str.w	fp, [r5], #4
 800bf20:	eba5 050a 	sub.w	r5, r5, sl
 800bf24:	10ad      	asrs	r5, r5, #2
 800bf26:	6125      	str	r5, [r4, #16]
 800bf28:	4658      	mov	r0, fp
 800bf2a:	f7fe f9a3 	bl	800a274 <__hi0bits>
 800bf2e:	016d      	lsls	r5, r5, #5
 800bf30:	f8d8 6000 	ldr.w	r6, [r8]
 800bf34:	1a2d      	subs	r5, r5, r0
 800bf36:	42b5      	cmp	r5, r6
 800bf38:	dd54      	ble.n	800bfe4 <__gethex+0x228>
 800bf3a:	1bad      	subs	r5, r5, r6
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f7fe fd2f 	bl	800a9a2 <__any_on>
 800bf44:	4681      	mov	r9, r0
 800bf46:	b178      	cbz	r0, 800bf68 <__gethex+0x1ac>
 800bf48:	1e6b      	subs	r3, r5, #1
 800bf4a:	1159      	asrs	r1, r3, #5
 800bf4c:	f003 021f 	and.w	r2, r3, #31
 800bf50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bf54:	f04f 0901 	mov.w	r9, #1
 800bf58:	fa09 f202 	lsl.w	r2, r9, r2
 800bf5c:	420a      	tst	r2, r1
 800bf5e:	d003      	beq.n	800bf68 <__gethex+0x1ac>
 800bf60:	454b      	cmp	r3, r9
 800bf62:	dc36      	bgt.n	800bfd2 <__gethex+0x216>
 800bf64:	f04f 0902 	mov.w	r9, #2
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f7ff febe 	bl	800bcec <rshift>
 800bf70:	442f      	add	r7, r5
 800bf72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf76:	42bb      	cmp	r3, r7
 800bf78:	da42      	bge.n	800c000 <__gethex+0x244>
 800bf7a:	9801      	ldr	r0, [sp, #4]
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	f7fe f8c7 	bl	800a110 <_Bfree>
 800bf82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf84:	2300      	movs	r3, #0
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	25a3      	movs	r5, #163	@ 0xa3
 800bf8a:	e793      	b.n	800beb4 <__gethex+0xf8>
 800bf8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bf90:	2a2e      	cmp	r2, #46	@ 0x2e
 800bf92:	d012      	beq.n	800bfba <__gethex+0x1fe>
 800bf94:	2b20      	cmp	r3, #32
 800bf96:	d104      	bne.n	800bfa2 <__gethex+0x1e6>
 800bf98:	f845 bb04 	str.w	fp, [r5], #4
 800bf9c:	f04f 0b00 	mov.w	fp, #0
 800bfa0:	465b      	mov	r3, fp
 800bfa2:	7830      	ldrb	r0, [r6, #0]
 800bfa4:	9303      	str	r3, [sp, #12]
 800bfa6:	f7ff fef3 	bl	800bd90 <__hexdig_fun>
 800bfaa:	9b03      	ldr	r3, [sp, #12]
 800bfac:	f000 000f 	and.w	r0, r0, #15
 800bfb0:	4098      	lsls	r0, r3
 800bfb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	e7ae      	b.n	800bf18 <__gethex+0x15c>
 800bfba:	45b1      	cmp	r9, r6
 800bfbc:	d8ea      	bhi.n	800bf94 <__gethex+0x1d8>
 800bfbe:	492b      	ldr	r1, [pc, #172]	@ (800c06c <__gethex+0x2b0>)
 800bfc0:	9303      	str	r3, [sp, #12]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff fe11 	bl	800bbec <strncmp>
 800bfca:	9b03      	ldr	r3, [sp, #12]
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d1e1      	bne.n	800bf94 <__gethex+0x1d8>
 800bfd0:	e7a2      	b.n	800bf18 <__gethex+0x15c>
 800bfd2:	1ea9      	subs	r1, r5, #2
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f7fe fce4 	bl	800a9a2 <__any_on>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d0c2      	beq.n	800bf64 <__gethex+0x1a8>
 800bfde:	f04f 0903 	mov.w	r9, #3
 800bfe2:	e7c1      	b.n	800bf68 <__gethex+0x1ac>
 800bfe4:	da09      	bge.n	800bffa <__gethex+0x23e>
 800bfe6:	1b75      	subs	r5, r6, r5
 800bfe8:	4621      	mov	r1, r4
 800bfea:	9801      	ldr	r0, [sp, #4]
 800bfec:	462a      	mov	r2, r5
 800bfee:	f7fe fa9f 	bl	800a530 <__lshift>
 800bff2:	1b7f      	subs	r7, r7, r5
 800bff4:	4604      	mov	r4, r0
 800bff6:	f100 0a14 	add.w	sl, r0, #20
 800bffa:	f04f 0900 	mov.w	r9, #0
 800bffe:	e7b8      	b.n	800bf72 <__gethex+0x1b6>
 800c000:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c004:	42bd      	cmp	r5, r7
 800c006:	dd6f      	ble.n	800c0e8 <__gethex+0x32c>
 800c008:	1bed      	subs	r5, r5, r7
 800c00a:	42ae      	cmp	r6, r5
 800c00c:	dc34      	bgt.n	800c078 <__gethex+0x2bc>
 800c00e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c012:	2b02      	cmp	r3, #2
 800c014:	d022      	beq.n	800c05c <__gethex+0x2a0>
 800c016:	2b03      	cmp	r3, #3
 800c018:	d024      	beq.n	800c064 <__gethex+0x2a8>
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d115      	bne.n	800c04a <__gethex+0x28e>
 800c01e:	42ae      	cmp	r6, r5
 800c020:	d113      	bne.n	800c04a <__gethex+0x28e>
 800c022:	2e01      	cmp	r6, #1
 800c024:	d10b      	bne.n	800c03e <__gethex+0x282>
 800c026:	9a02      	ldr	r2, [sp, #8]
 800c028:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c02c:	6013      	str	r3, [r2, #0]
 800c02e:	2301      	movs	r3, #1
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	f8ca 3000 	str.w	r3, [sl]
 800c036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c038:	2562      	movs	r5, #98	@ 0x62
 800c03a:	601c      	str	r4, [r3, #0]
 800c03c:	e73a      	b.n	800beb4 <__gethex+0xf8>
 800c03e:	1e71      	subs	r1, r6, #1
 800c040:	4620      	mov	r0, r4
 800c042:	f7fe fcae 	bl	800a9a2 <__any_on>
 800c046:	2800      	cmp	r0, #0
 800c048:	d1ed      	bne.n	800c026 <__gethex+0x26a>
 800c04a:	9801      	ldr	r0, [sp, #4]
 800c04c:	4621      	mov	r1, r4
 800c04e:	f7fe f85f 	bl	800a110 <_Bfree>
 800c052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c054:	2300      	movs	r3, #0
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	2550      	movs	r5, #80	@ 0x50
 800c05a:	e72b      	b.n	800beb4 <__gethex+0xf8>
 800c05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1f3      	bne.n	800c04a <__gethex+0x28e>
 800c062:	e7e0      	b.n	800c026 <__gethex+0x26a>
 800c064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1dd      	bne.n	800c026 <__gethex+0x26a>
 800c06a:	e7ee      	b.n	800c04a <__gethex+0x28e>
 800c06c:	0800da13 	.word	0x0800da13
 800c070:	0800d9a9 	.word	0x0800d9a9
 800c074:	0800da6a 	.word	0x0800da6a
 800c078:	1e6f      	subs	r7, r5, #1
 800c07a:	f1b9 0f00 	cmp.w	r9, #0
 800c07e:	d130      	bne.n	800c0e2 <__gethex+0x326>
 800c080:	b127      	cbz	r7, 800c08c <__gethex+0x2d0>
 800c082:	4639      	mov	r1, r7
 800c084:	4620      	mov	r0, r4
 800c086:	f7fe fc8c 	bl	800a9a2 <__any_on>
 800c08a:	4681      	mov	r9, r0
 800c08c:	117a      	asrs	r2, r7, #5
 800c08e:	2301      	movs	r3, #1
 800c090:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c094:	f007 071f 	and.w	r7, r7, #31
 800c098:	40bb      	lsls	r3, r7
 800c09a:	4213      	tst	r3, r2
 800c09c:	4629      	mov	r1, r5
 800c09e:	4620      	mov	r0, r4
 800c0a0:	bf18      	it	ne
 800c0a2:	f049 0902 	orrne.w	r9, r9, #2
 800c0a6:	f7ff fe21 	bl	800bcec <rshift>
 800c0aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c0ae:	1b76      	subs	r6, r6, r5
 800c0b0:	2502      	movs	r5, #2
 800c0b2:	f1b9 0f00 	cmp.w	r9, #0
 800c0b6:	d047      	beq.n	800c148 <__gethex+0x38c>
 800c0b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d015      	beq.n	800c0ec <__gethex+0x330>
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d017      	beq.n	800c0f4 <__gethex+0x338>
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d109      	bne.n	800c0dc <__gethex+0x320>
 800c0c8:	f019 0f02 	tst.w	r9, #2
 800c0cc:	d006      	beq.n	800c0dc <__gethex+0x320>
 800c0ce:	f8da 3000 	ldr.w	r3, [sl]
 800c0d2:	ea49 0903 	orr.w	r9, r9, r3
 800c0d6:	f019 0f01 	tst.w	r9, #1
 800c0da:	d10e      	bne.n	800c0fa <__gethex+0x33e>
 800c0dc:	f045 0510 	orr.w	r5, r5, #16
 800c0e0:	e032      	b.n	800c148 <__gethex+0x38c>
 800c0e2:	f04f 0901 	mov.w	r9, #1
 800c0e6:	e7d1      	b.n	800c08c <__gethex+0x2d0>
 800c0e8:	2501      	movs	r5, #1
 800c0ea:	e7e2      	b.n	800c0b2 <__gethex+0x2f6>
 800c0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ee:	f1c3 0301 	rsb	r3, r3, #1
 800c0f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d0f0      	beq.n	800c0dc <__gethex+0x320>
 800c0fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0fe:	f104 0314 	add.w	r3, r4, #20
 800c102:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c106:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c10a:	f04f 0c00 	mov.w	ip, #0
 800c10e:	4618      	mov	r0, r3
 800c110:	f853 2b04 	ldr.w	r2, [r3], #4
 800c114:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c118:	d01b      	beq.n	800c152 <__gethex+0x396>
 800c11a:	3201      	adds	r2, #1
 800c11c:	6002      	str	r2, [r0, #0]
 800c11e:	2d02      	cmp	r5, #2
 800c120:	f104 0314 	add.w	r3, r4, #20
 800c124:	d13c      	bne.n	800c1a0 <__gethex+0x3e4>
 800c126:	f8d8 2000 	ldr.w	r2, [r8]
 800c12a:	3a01      	subs	r2, #1
 800c12c:	42b2      	cmp	r2, r6
 800c12e:	d109      	bne.n	800c144 <__gethex+0x388>
 800c130:	1171      	asrs	r1, r6, #5
 800c132:	2201      	movs	r2, #1
 800c134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c138:	f006 061f 	and.w	r6, r6, #31
 800c13c:	fa02 f606 	lsl.w	r6, r2, r6
 800c140:	421e      	tst	r6, r3
 800c142:	d13a      	bne.n	800c1ba <__gethex+0x3fe>
 800c144:	f045 0520 	orr.w	r5, r5, #32
 800c148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c14a:	601c      	str	r4, [r3, #0]
 800c14c:	9b02      	ldr	r3, [sp, #8]
 800c14e:	601f      	str	r7, [r3, #0]
 800c150:	e6b0      	b.n	800beb4 <__gethex+0xf8>
 800c152:	4299      	cmp	r1, r3
 800c154:	f843 cc04 	str.w	ip, [r3, #-4]
 800c158:	d8d9      	bhi.n	800c10e <__gethex+0x352>
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	459b      	cmp	fp, r3
 800c15e:	db17      	blt.n	800c190 <__gethex+0x3d4>
 800c160:	6861      	ldr	r1, [r4, #4]
 800c162:	9801      	ldr	r0, [sp, #4]
 800c164:	3101      	adds	r1, #1
 800c166:	f7fd ff93 	bl	800a090 <_Balloc>
 800c16a:	4681      	mov	r9, r0
 800c16c:	b918      	cbnz	r0, 800c176 <__gethex+0x3ba>
 800c16e:	4b1a      	ldr	r3, [pc, #104]	@ (800c1d8 <__gethex+0x41c>)
 800c170:	4602      	mov	r2, r0
 800c172:	2184      	movs	r1, #132	@ 0x84
 800c174:	e6c5      	b.n	800bf02 <__gethex+0x146>
 800c176:	6922      	ldr	r2, [r4, #16]
 800c178:	3202      	adds	r2, #2
 800c17a:	f104 010c 	add.w	r1, r4, #12
 800c17e:	0092      	lsls	r2, r2, #2
 800c180:	300c      	adds	r0, #12
 800c182:	f7fd f816 	bl	80091b2 <memcpy>
 800c186:	4621      	mov	r1, r4
 800c188:	9801      	ldr	r0, [sp, #4]
 800c18a:	f7fd ffc1 	bl	800a110 <_Bfree>
 800c18e:	464c      	mov	r4, r9
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c198:	6122      	str	r2, [r4, #16]
 800c19a:	2201      	movs	r2, #1
 800c19c:	615a      	str	r2, [r3, #20]
 800c19e:	e7be      	b.n	800c11e <__gethex+0x362>
 800c1a0:	6922      	ldr	r2, [r4, #16]
 800c1a2:	455a      	cmp	r2, fp
 800c1a4:	dd0b      	ble.n	800c1be <__gethex+0x402>
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f7ff fd9f 	bl	800bcec <rshift>
 800c1ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1b2:	3701      	adds	r7, #1
 800c1b4:	42bb      	cmp	r3, r7
 800c1b6:	f6ff aee0 	blt.w	800bf7a <__gethex+0x1be>
 800c1ba:	2501      	movs	r5, #1
 800c1bc:	e7c2      	b.n	800c144 <__gethex+0x388>
 800c1be:	f016 061f 	ands.w	r6, r6, #31
 800c1c2:	d0fa      	beq.n	800c1ba <__gethex+0x3fe>
 800c1c4:	4453      	add	r3, sl
 800c1c6:	f1c6 0620 	rsb	r6, r6, #32
 800c1ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c1ce:	f7fe f851 	bl	800a274 <__hi0bits>
 800c1d2:	42b0      	cmp	r0, r6
 800c1d4:	dbe7      	blt.n	800c1a6 <__gethex+0x3ea>
 800c1d6:	e7f0      	b.n	800c1ba <__gethex+0x3fe>
 800c1d8:	0800d9a9 	.word	0x0800d9a9

0800c1dc <L_shift>:
 800c1dc:	f1c2 0208 	rsb	r2, r2, #8
 800c1e0:	0092      	lsls	r2, r2, #2
 800c1e2:	b570      	push	{r4, r5, r6, lr}
 800c1e4:	f1c2 0620 	rsb	r6, r2, #32
 800c1e8:	6843      	ldr	r3, [r0, #4]
 800c1ea:	6804      	ldr	r4, [r0, #0]
 800c1ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c1f0:	432c      	orrs	r4, r5
 800c1f2:	40d3      	lsrs	r3, r2
 800c1f4:	6004      	str	r4, [r0, #0]
 800c1f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1fa:	4288      	cmp	r0, r1
 800c1fc:	d3f4      	bcc.n	800c1e8 <L_shift+0xc>
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}

0800c200 <__match>:
 800c200:	b530      	push	{r4, r5, lr}
 800c202:	6803      	ldr	r3, [r0, #0]
 800c204:	3301      	adds	r3, #1
 800c206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c20a:	b914      	cbnz	r4, 800c212 <__match+0x12>
 800c20c:	6003      	str	r3, [r0, #0]
 800c20e:	2001      	movs	r0, #1
 800c210:	bd30      	pop	{r4, r5, pc}
 800c212:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c216:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c21a:	2d19      	cmp	r5, #25
 800c21c:	bf98      	it	ls
 800c21e:	3220      	addls	r2, #32
 800c220:	42a2      	cmp	r2, r4
 800c222:	d0f0      	beq.n	800c206 <__match+0x6>
 800c224:	2000      	movs	r0, #0
 800c226:	e7f3      	b.n	800c210 <__match+0x10>

0800c228 <__hexnan>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	680b      	ldr	r3, [r1, #0]
 800c22e:	6801      	ldr	r1, [r0, #0]
 800c230:	115e      	asrs	r6, r3, #5
 800c232:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c236:	f013 031f 	ands.w	r3, r3, #31
 800c23a:	b087      	sub	sp, #28
 800c23c:	bf18      	it	ne
 800c23e:	3604      	addne	r6, #4
 800c240:	2500      	movs	r5, #0
 800c242:	1f37      	subs	r7, r6, #4
 800c244:	4682      	mov	sl, r0
 800c246:	4690      	mov	r8, r2
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c24e:	46b9      	mov	r9, r7
 800c250:	463c      	mov	r4, r7
 800c252:	9502      	str	r5, [sp, #8]
 800c254:	46ab      	mov	fp, r5
 800c256:	784a      	ldrb	r2, [r1, #1]
 800c258:	1c4b      	adds	r3, r1, #1
 800c25a:	9303      	str	r3, [sp, #12]
 800c25c:	b342      	cbz	r2, 800c2b0 <__hexnan+0x88>
 800c25e:	4610      	mov	r0, r2
 800c260:	9105      	str	r1, [sp, #20]
 800c262:	9204      	str	r2, [sp, #16]
 800c264:	f7ff fd94 	bl	800bd90 <__hexdig_fun>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d151      	bne.n	800c310 <__hexnan+0xe8>
 800c26c:	9a04      	ldr	r2, [sp, #16]
 800c26e:	9905      	ldr	r1, [sp, #20]
 800c270:	2a20      	cmp	r2, #32
 800c272:	d818      	bhi.n	800c2a6 <__hexnan+0x7e>
 800c274:	9b02      	ldr	r3, [sp, #8]
 800c276:	459b      	cmp	fp, r3
 800c278:	dd13      	ble.n	800c2a2 <__hexnan+0x7a>
 800c27a:	454c      	cmp	r4, r9
 800c27c:	d206      	bcs.n	800c28c <__hexnan+0x64>
 800c27e:	2d07      	cmp	r5, #7
 800c280:	dc04      	bgt.n	800c28c <__hexnan+0x64>
 800c282:	462a      	mov	r2, r5
 800c284:	4649      	mov	r1, r9
 800c286:	4620      	mov	r0, r4
 800c288:	f7ff ffa8 	bl	800c1dc <L_shift>
 800c28c:	4544      	cmp	r4, r8
 800c28e:	d952      	bls.n	800c336 <__hexnan+0x10e>
 800c290:	2300      	movs	r3, #0
 800c292:	f1a4 0904 	sub.w	r9, r4, #4
 800c296:	f844 3c04 	str.w	r3, [r4, #-4]
 800c29a:	f8cd b008 	str.w	fp, [sp, #8]
 800c29e:	464c      	mov	r4, r9
 800c2a0:	461d      	mov	r5, r3
 800c2a2:	9903      	ldr	r1, [sp, #12]
 800c2a4:	e7d7      	b.n	800c256 <__hexnan+0x2e>
 800c2a6:	2a29      	cmp	r2, #41	@ 0x29
 800c2a8:	d157      	bne.n	800c35a <__hexnan+0x132>
 800c2aa:	3102      	adds	r1, #2
 800c2ac:	f8ca 1000 	str.w	r1, [sl]
 800c2b0:	f1bb 0f00 	cmp.w	fp, #0
 800c2b4:	d051      	beq.n	800c35a <__hexnan+0x132>
 800c2b6:	454c      	cmp	r4, r9
 800c2b8:	d206      	bcs.n	800c2c8 <__hexnan+0xa0>
 800c2ba:	2d07      	cmp	r5, #7
 800c2bc:	dc04      	bgt.n	800c2c8 <__hexnan+0xa0>
 800c2be:	462a      	mov	r2, r5
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f7ff ff8a 	bl	800c1dc <L_shift>
 800c2c8:	4544      	cmp	r4, r8
 800c2ca:	d936      	bls.n	800c33a <__hexnan+0x112>
 800c2cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c2d0:	4623      	mov	r3, r4
 800c2d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2da:	429f      	cmp	r7, r3
 800c2dc:	d2f9      	bcs.n	800c2d2 <__hexnan+0xaa>
 800c2de:	1b3b      	subs	r3, r7, r4
 800c2e0:	f023 0303 	bic.w	r3, r3, #3
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	3401      	adds	r4, #1
 800c2e8:	3e03      	subs	r6, #3
 800c2ea:	42b4      	cmp	r4, r6
 800c2ec:	bf88      	it	hi
 800c2ee:	2304      	movhi	r3, #4
 800c2f0:	4443      	add	r3, r8
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f843 2b04 	str.w	r2, [r3], #4
 800c2f8:	429f      	cmp	r7, r3
 800c2fa:	d2fb      	bcs.n	800c2f4 <__hexnan+0xcc>
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	b91b      	cbnz	r3, 800c308 <__hexnan+0xe0>
 800c300:	4547      	cmp	r7, r8
 800c302:	d128      	bne.n	800c356 <__hexnan+0x12e>
 800c304:	2301      	movs	r3, #1
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	2005      	movs	r0, #5
 800c30a:	b007      	add	sp, #28
 800c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c310:	3501      	adds	r5, #1
 800c312:	2d08      	cmp	r5, #8
 800c314:	f10b 0b01 	add.w	fp, fp, #1
 800c318:	dd06      	ble.n	800c328 <__hexnan+0x100>
 800c31a:	4544      	cmp	r4, r8
 800c31c:	d9c1      	bls.n	800c2a2 <__hexnan+0x7a>
 800c31e:	2300      	movs	r3, #0
 800c320:	f844 3c04 	str.w	r3, [r4, #-4]
 800c324:	2501      	movs	r5, #1
 800c326:	3c04      	subs	r4, #4
 800c328:	6822      	ldr	r2, [r4, #0]
 800c32a:	f000 000f 	and.w	r0, r0, #15
 800c32e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c332:	6020      	str	r0, [r4, #0]
 800c334:	e7b5      	b.n	800c2a2 <__hexnan+0x7a>
 800c336:	2508      	movs	r5, #8
 800c338:	e7b3      	b.n	800c2a2 <__hexnan+0x7a>
 800c33a:	9b01      	ldr	r3, [sp, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d0dd      	beq.n	800c2fc <__hexnan+0xd4>
 800c340:	f1c3 0320 	rsb	r3, r3, #32
 800c344:	f04f 32ff 	mov.w	r2, #4294967295
 800c348:	40da      	lsrs	r2, r3
 800c34a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c34e:	4013      	ands	r3, r2
 800c350:	f846 3c04 	str.w	r3, [r6, #-4]
 800c354:	e7d2      	b.n	800c2fc <__hexnan+0xd4>
 800c356:	3f04      	subs	r7, #4
 800c358:	e7d0      	b.n	800c2fc <__hexnan+0xd4>
 800c35a:	2004      	movs	r0, #4
 800c35c:	e7d5      	b.n	800c30a <__hexnan+0xe2>

0800c35e <__ascii_mbtowc>:
 800c35e:	b082      	sub	sp, #8
 800c360:	b901      	cbnz	r1, 800c364 <__ascii_mbtowc+0x6>
 800c362:	a901      	add	r1, sp, #4
 800c364:	b142      	cbz	r2, 800c378 <__ascii_mbtowc+0x1a>
 800c366:	b14b      	cbz	r3, 800c37c <__ascii_mbtowc+0x1e>
 800c368:	7813      	ldrb	r3, [r2, #0]
 800c36a:	600b      	str	r3, [r1, #0]
 800c36c:	7812      	ldrb	r2, [r2, #0]
 800c36e:	1e10      	subs	r0, r2, #0
 800c370:	bf18      	it	ne
 800c372:	2001      	movne	r0, #1
 800c374:	b002      	add	sp, #8
 800c376:	4770      	bx	lr
 800c378:	4610      	mov	r0, r2
 800c37a:	e7fb      	b.n	800c374 <__ascii_mbtowc+0x16>
 800c37c:	f06f 0001 	mvn.w	r0, #1
 800c380:	e7f8      	b.n	800c374 <__ascii_mbtowc+0x16>

0800c382 <_realloc_r>:
 800c382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c386:	4607      	mov	r7, r0
 800c388:	4614      	mov	r4, r2
 800c38a:	460d      	mov	r5, r1
 800c38c:	b921      	cbnz	r1, 800c398 <_realloc_r+0x16>
 800c38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c392:	4611      	mov	r1, r2
 800c394:	f7fd bdf0 	b.w	8009f78 <_malloc_r>
 800c398:	b92a      	cbnz	r2, 800c3a6 <_realloc_r+0x24>
 800c39a:	f7fd fd79 	bl	8009e90 <_free_r>
 800c39e:	4625      	mov	r5, r4
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a6:	f000 f840 	bl	800c42a <_malloc_usable_size_r>
 800c3aa:	4284      	cmp	r4, r0
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	d802      	bhi.n	800c3b6 <_realloc_r+0x34>
 800c3b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3b4:	d8f4      	bhi.n	800c3a0 <_realloc_r+0x1e>
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	f7fd fddd 	bl	8009f78 <_malloc_r>
 800c3be:	4680      	mov	r8, r0
 800c3c0:	b908      	cbnz	r0, 800c3c6 <_realloc_r+0x44>
 800c3c2:	4645      	mov	r5, r8
 800c3c4:	e7ec      	b.n	800c3a0 <_realloc_r+0x1e>
 800c3c6:	42b4      	cmp	r4, r6
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	bf28      	it	cs
 800c3ce:	4632      	movcs	r2, r6
 800c3d0:	f7fc feef 	bl	80091b2 <memcpy>
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f7fd fd5a 	bl	8009e90 <_free_r>
 800c3dc:	e7f1      	b.n	800c3c2 <_realloc_r+0x40>

0800c3de <__ascii_wctomb>:
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4608      	mov	r0, r1
 800c3e2:	b141      	cbz	r1, 800c3f6 <__ascii_wctomb+0x18>
 800c3e4:	2aff      	cmp	r2, #255	@ 0xff
 800c3e6:	d904      	bls.n	800c3f2 <__ascii_wctomb+0x14>
 800c3e8:	228a      	movs	r2, #138	@ 0x8a
 800c3ea:	601a      	str	r2, [r3, #0]
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	4770      	bx	lr
 800c3f2:	700a      	strb	r2, [r1, #0]
 800c3f4:	2001      	movs	r0, #1
 800c3f6:	4770      	bx	lr

0800c3f8 <fiprintf>:
 800c3f8:	b40e      	push	{r1, r2, r3}
 800c3fa:	b503      	push	{r0, r1, lr}
 800c3fc:	4601      	mov	r1, r0
 800c3fe:	ab03      	add	r3, sp, #12
 800c400:	4805      	ldr	r0, [pc, #20]	@ (800c418 <fiprintf+0x20>)
 800c402:	f853 2b04 	ldr.w	r2, [r3], #4
 800c406:	6800      	ldr	r0, [r0, #0]
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	f000 f83f 	bl	800c48c <_vfiprintf_r>
 800c40e:	b002      	add	sp, #8
 800c410:	f85d eb04 	ldr.w	lr, [sp], #4
 800c414:	b003      	add	sp, #12
 800c416:	4770      	bx	lr
 800c418:	20000088 	.word	0x20000088

0800c41c <abort>:
 800c41c:	b508      	push	{r3, lr}
 800c41e:	2006      	movs	r0, #6
 800c420:	f000 f974 	bl	800c70c <raise>
 800c424:	2001      	movs	r0, #1
 800c426:	f7f7 fea7 	bl	8004178 <_exit>

0800c42a <_malloc_usable_size_r>:
 800c42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c42e:	1f18      	subs	r0, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	bfbc      	itt	lt
 800c434:	580b      	ldrlt	r3, [r1, r0]
 800c436:	18c0      	addlt	r0, r0, r3
 800c438:	4770      	bx	lr

0800c43a <__sfputc_r>:
 800c43a:	6893      	ldr	r3, [r2, #8]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	2b00      	cmp	r3, #0
 800c440:	b410      	push	{r4}
 800c442:	6093      	str	r3, [r2, #8]
 800c444:	da08      	bge.n	800c458 <__sfputc_r+0x1e>
 800c446:	6994      	ldr	r4, [r2, #24]
 800c448:	42a3      	cmp	r3, r4
 800c44a:	db01      	blt.n	800c450 <__sfputc_r+0x16>
 800c44c:	290a      	cmp	r1, #10
 800c44e:	d103      	bne.n	800c458 <__sfputc_r+0x1e>
 800c450:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c454:	f7fc bd85 	b.w	8008f62 <__swbuf_r>
 800c458:	6813      	ldr	r3, [r2, #0]
 800c45a:	1c58      	adds	r0, r3, #1
 800c45c:	6010      	str	r0, [r2, #0]
 800c45e:	7019      	strb	r1, [r3, #0]
 800c460:	4608      	mov	r0, r1
 800c462:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <__sfputs_r>:
 800c468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46a:	4606      	mov	r6, r0
 800c46c:	460f      	mov	r7, r1
 800c46e:	4614      	mov	r4, r2
 800c470:	18d5      	adds	r5, r2, r3
 800c472:	42ac      	cmp	r4, r5
 800c474:	d101      	bne.n	800c47a <__sfputs_r+0x12>
 800c476:	2000      	movs	r0, #0
 800c478:	e007      	b.n	800c48a <__sfputs_r+0x22>
 800c47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47e:	463a      	mov	r2, r7
 800c480:	4630      	mov	r0, r6
 800c482:	f7ff ffda 	bl	800c43a <__sfputc_r>
 800c486:	1c43      	adds	r3, r0, #1
 800c488:	d1f3      	bne.n	800c472 <__sfputs_r+0xa>
 800c48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c48c <_vfiprintf_r>:
 800c48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c490:	460d      	mov	r5, r1
 800c492:	b09d      	sub	sp, #116	@ 0x74
 800c494:	4614      	mov	r4, r2
 800c496:	4698      	mov	r8, r3
 800c498:	4606      	mov	r6, r0
 800c49a:	b118      	cbz	r0, 800c4a4 <_vfiprintf_r+0x18>
 800c49c:	6a03      	ldr	r3, [r0, #32]
 800c49e:	b90b      	cbnz	r3, 800c4a4 <_vfiprintf_r+0x18>
 800c4a0:	f7fc fb7c 	bl	8008b9c <__sinit>
 800c4a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4a6:	07d9      	lsls	r1, r3, #31
 800c4a8:	d405      	bmi.n	800c4b6 <_vfiprintf_r+0x2a>
 800c4aa:	89ab      	ldrh	r3, [r5, #12]
 800c4ac:	059a      	lsls	r2, r3, #22
 800c4ae:	d402      	bmi.n	800c4b6 <_vfiprintf_r+0x2a>
 800c4b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4b2:	f7fc fe7c 	bl	80091ae <__retarget_lock_acquire_recursive>
 800c4b6:	89ab      	ldrh	r3, [r5, #12]
 800c4b8:	071b      	lsls	r3, r3, #28
 800c4ba:	d501      	bpl.n	800c4c0 <_vfiprintf_r+0x34>
 800c4bc:	692b      	ldr	r3, [r5, #16]
 800c4be:	b99b      	cbnz	r3, 800c4e8 <_vfiprintf_r+0x5c>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7fc fd8c 	bl	8008fe0 <__swsetup_r>
 800c4c8:	b170      	cbz	r0, 800c4e8 <_vfiprintf_r+0x5c>
 800c4ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4cc:	07dc      	lsls	r4, r3, #31
 800c4ce:	d504      	bpl.n	800c4da <_vfiprintf_r+0x4e>
 800c4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d4:	b01d      	add	sp, #116	@ 0x74
 800c4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4da:	89ab      	ldrh	r3, [r5, #12]
 800c4dc:	0598      	lsls	r0, r3, #22
 800c4de:	d4f7      	bmi.n	800c4d0 <_vfiprintf_r+0x44>
 800c4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4e2:	f7fc fe65 	bl	80091b0 <__retarget_lock_release_recursive>
 800c4e6:	e7f3      	b.n	800c4d0 <_vfiprintf_r+0x44>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ec:	2320      	movs	r3, #32
 800c4ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4f6:	2330      	movs	r3, #48	@ 0x30
 800c4f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c6a8 <_vfiprintf_r+0x21c>
 800c4fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c500:	f04f 0901 	mov.w	r9, #1
 800c504:	4623      	mov	r3, r4
 800c506:	469a      	mov	sl, r3
 800c508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c50c:	b10a      	cbz	r2, 800c512 <_vfiprintf_r+0x86>
 800c50e:	2a25      	cmp	r2, #37	@ 0x25
 800c510:	d1f9      	bne.n	800c506 <_vfiprintf_r+0x7a>
 800c512:	ebba 0b04 	subs.w	fp, sl, r4
 800c516:	d00b      	beq.n	800c530 <_vfiprintf_r+0xa4>
 800c518:	465b      	mov	r3, fp
 800c51a:	4622      	mov	r2, r4
 800c51c:	4629      	mov	r1, r5
 800c51e:	4630      	mov	r0, r6
 800c520:	f7ff ffa2 	bl	800c468 <__sfputs_r>
 800c524:	3001      	adds	r0, #1
 800c526:	f000 80a7 	beq.w	800c678 <_vfiprintf_r+0x1ec>
 800c52a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c52c:	445a      	add	r2, fp
 800c52e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c530:	f89a 3000 	ldrb.w	r3, [sl]
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 809f 	beq.w	800c678 <_vfiprintf_r+0x1ec>
 800c53a:	2300      	movs	r3, #0
 800c53c:	f04f 32ff 	mov.w	r2, #4294967295
 800c540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c544:	f10a 0a01 	add.w	sl, sl, #1
 800c548:	9304      	str	r3, [sp, #16]
 800c54a:	9307      	str	r3, [sp, #28]
 800c54c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c550:	931a      	str	r3, [sp, #104]	@ 0x68
 800c552:	4654      	mov	r4, sl
 800c554:	2205      	movs	r2, #5
 800c556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55a:	4853      	ldr	r0, [pc, #332]	@ (800c6a8 <_vfiprintf_r+0x21c>)
 800c55c:	f7f3 fe40 	bl	80001e0 <memchr>
 800c560:	9a04      	ldr	r2, [sp, #16]
 800c562:	b9d8      	cbnz	r0, 800c59c <_vfiprintf_r+0x110>
 800c564:	06d1      	lsls	r1, r2, #27
 800c566:	bf44      	itt	mi
 800c568:	2320      	movmi	r3, #32
 800c56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c56e:	0713      	lsls	r3, r2, #28
 800c570:	bf44      	itt	mi
 800c572:	232b      	movmi	r3, #43	@ 0x2b
 800c574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c578:	f89a 3000 	ldrb.w	r3, [sl]
 800c57c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c57e:	d015      	beq.n	800c5ac <_vfiprintf_r+0x120>
 800c580:	9a07      	ldr	r2, [sp, #28]
 800c582:	4654      	mov	r4, sl
 800c584:	2000      	movs	r0, #0
 800c586:	f04f 0c0a 	mov.w	ip, #10
 800c58a:	4621      	mov	r1, r4
 800c58c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c590:	3b30      	subs	r3, #48	@ 0x30
 800c592:	2b09      	cmp	r3, #9
 800c594:	d94b      	bls.n	800c62e <_vfiprintf_r+0x1a2>
 800c596:	b1b0      	cbz	r0, 800c5c6 <_vfiprintf_r+0x13a>
 800c598:	9207      	str	r2, [sp, #28]
 800c59a:	e014      	b.n	800c5c6 <_vfiprintf_r+0x13a>
 800c59c:	eba0 0308 	sub.w	r3, r0, r8
 800c5a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	9304      	str	r3, [sp, #16]
 800c5a8:	46a2      	mov	sl, r4
 800c5aa:	e7d2      	b.n	800c552 <_vfiprintf_r+0xc6>
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	1d19      	adds	r1, r3, #4
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	9103      	str	r1, [sp, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	bfbb      	ittet	lt
 800c5b8:	425b      	neglt	r3, r3
 800c5ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c5be:	9307      	strge	r3, [sp, #28]
 800c5c0:	9307      	strlt	r3, [sp, #28]
 800c5c2:	bfb8      	it	lt
 800c5c4:	9204      	strlt	r2, [sp, #16]
 800c5c6:	7823      	ldrb	r3, [r4, #0]
 800c5c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5ca:	d10a      	bne.n	800c5e2 <_vfiprintf_r+0x156>
 800c5cc:	7863      	ldrb	r3, [r4, #1]
 800c5ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5d0:	d132      	bne.n	800c638 <_vfiprintf_r+0x1ac>
 800c5d2:	9b03      	ldr	r3, [sp, #12]
 800c5d4:	1d1a      	adds	r2, r3, #4
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	9203      	str	r2, [sp, #12]
 800c5da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5de:	3402      	adds	r4, #2
 800c5e0:	9305      	str	r3, [sp, #20]
 800c5e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c6b8 <_vfiprintf_r+0x22c>
 800c5e6:	7821      	ldrb	r1, [r4, #0]
 800c5e8:	2203      	movs	r2, #3
 800c5ea:	4650      	mov	r0, sl
 800c5ec:	f7f3 fdf8 	bl	80001e0 <memchr>
 800c5f0:	b138      	cbz	r0, 800c602 <_vfiprintf_r+0x176>
 800c5f2:	9b04      	ldr	r3, [sp, #16]
 800c5f4:	eba0 000a 	sub.w	r0, r0, sl
 800c5f8:	2240      	movs	r2, #64	@ 0x40
 800c5fa:	4082      	lsls	r2, r0
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	3401      	adds	r4, #1
 800c600:	9304      	str	r3, [sp, #16]
 800c602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c606:	4829      	ldr	r0, [pc, #164]	@ (800c6ac <_vfiprintf_r+0x220>)
 800c608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c60c:	2206      	movs	r2, #6
 800c60e:	f7f3 fde7 	bl	80001e0 <memchr>
 800c612:	2800      	cmp	r0, #0
 800c614:	d03f      	beq.n	800c696 <_vfiprintf_r+0x20a>
 800c616:	4b26      	ldr	r3, [pc, #152]	@ (800c6b0 <_vfiprintf_r+0x224>)
 800c618:	bb1b      	cbnz	r3, 800c662 <_vfiprintf_r+0x1d6>
 800c61a:	9b03      	ldr	r3, [sp, #12]
 800c61c:	3307      	adds	r3, #7
 800c61e:	f023 0307 	bic.w	r3, r3, #7
 800c622:	3308      	adds	r3, #8
 800c624:	9303      	str	r3, [sp, #12]
 800c626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c628:	443b      	add	r3, r7
 800c62a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c62c:	e76a      	b.n	800c504 <_vfiprintf_r+0x78>
 800c62e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c632:	460c      	mov	r4, r1
 800c634:	2001      	movs	r0, #1
 800c636:	e7a8      	b.n	800c58a <_vfiprintf_r+0xfe>
 800c638:	2300      	movs	r3, #0
 800c63a:	3401      	adds	r4, #1
 800c63c:	9305      	str	r3, [sp, #20]
 800c63e:	4619      	mov	r1, r3
 800c640:	f04f 0c0a 	mov.w	ip, #10
 800c644:	4620      	mov	r0, r4
 800c646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c64a:	3a30      	subs	r2, #48	@ 0x30
 800c64c:	2a09      	cmp	r2, #9
 800c64e:	d903      	bls.n	800c658 <_vfiprintf_r+0x1cc>
 800c650:	2b00      	cmp	r3, #0
 800c652:	d0c6      	beq.n	800c5e2 <_vfiprintf_r+0x156>
 800c654:	9105      	str	r1, [sp, #20]
 800c656:	e7c4      	b.n	800c5e2 <_vfiprintf_r+0x156>
 800c658:	fb0c 2101 	mla	r1, ip, r1, r2
 800c65c:	4604      	mov	r4, r0
 800c65e:	2301      	movs	r3, #1
 800c660:	e7f0      	b.n	800c644 <_vfiprintf_r+0x1b8>
 800c662:	ab03      	add	r3, sp, #12
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	462a      	mov	r2, r5
 800c668:	4b12      	ldr	r3, [pc, #72]	@ (800c6b4 <_vfiprintf_r+0x228>)
 800c66a:	a904      	add	r1, sp, #16
 800c66c:	4630      	mov	r0, r6
 800c66e:	f7fb fc45 	bl	8007efc <_printf_float>
 800c672:	4607      	mov	r7, r0
 800c674:	1c78      	adds	r0, r7, #1
 800c676:	d1d6      	bne.n	800c626 <_vfiprintf_r+0x19a>
 800c678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c67a:	07d9      	lsls	r1, r3, #31
 800c67c:	d405      	bmi.n	800c68a <_vfiprintf_r+0x1fe>
 800c67e:	89ab      	ldrh	r3, [r5, #12]
 800c680:	059a      	lsls	r2, r3, #22
 800c682:	d402      	bmi.n	800c68a <_vfiprintf_r+0x1fe>
 800c684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c686:	f7fc fd93 	bl	80091b0 <__retarget_lock_release_recursive>
 800c68a:	89ab      	ldrh	r3, [r5, #12]
 800c68c:	065b      	lsls	r3, r3, #25
 800c68e:	f53f af1f 	bmi.w	800c4d0 <_vfiprintf_r+0x44>
 800c692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c694:	e71e      	b.n	800c4d4 <_vfiprintf_r+0x48>
 800c696:	ab03      	add	r3, sp, #12
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	462a      	mov	r2, r5
 800c69c:	4b05      	ldr	r3, [pc, #20]	@ (800c6b4 <_vfiprintf_r+0x228>)
 800c69e:	a904      	add	r1, sp, #16
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f7fb fec3 	bl	800842c <_printf_i>
 800c6a6:	e7e4      	b.n	800c672 <_vfiprintf_r+0x1e6>
 800c6a8:	0800da15 	.word	0x0800da15
 800c6ac:	0800da1f 	.word	0x0800da1f
 800c6b0:	08007efd 	.word	0x08007efd
 800c6b4:	0800c469 	.word	0x0800c469
 800c6b8:	0800da1b 	.word	0x0800da1b

0800c6bc <_raise_r>:
 800c6bc:	291f      	cmp	r1, #31
 800c6be:	b538      	push	{r3, r4, r5, lr}
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	d904      	bls.n	800c6d0 <_raise_r+0x14>
 800c6c6:	2316      	movs	r3, #22
 800c6c8:	6003      	str	r3, [r0, #0]
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ce:	bd38      	pop	{r3, r4, r5, pc}
 800c6d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6d2:	b112      	cbz	r2, 800c6da <_raise_r+0x1e>
 800c6d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6d8:	b94b      	cbnz	r3, 800c6ee <_raise_r+0x32>
 800c6da:	4628      	mov	r0, r5
 800c6dc:	f000 f830 	bl	800c740 <_getpid_r>
 800c6e0:	4622      	mov	r2, r4
 800c6e2:	4601      	mov	r1, r0
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ea:	f000 b817 	b.w	800c71c <_kill_r>
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d00a      	beq.n	800c708 <_raise_r+0x4c>
 800c6f2:	1c59      	adds	r1, r3, #1
 800c6f4:	d103      	bne.n	800c6fe <_raise_r+0x42>
 800c6f6:	2316      	movs	r3, #22
 800c6f8:	6003      	str	r3, [r0, #0]
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	e7e7      	b.n	800c6ce <_raise_r+0x12>
 800c6fe:	2100      	movs	r1, #0
 800c700:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c704:	4620      	mov	r0, r4
 800c706:	4798      	blx	r3
 800c708:	2000      	movs	r0, #0
 800c70a:	e7e0      	b.n	800c6ce <_raise_r+0x12>

0800c70c <raise>:
 800c70c:	4b02      	ldr	r3, [pc, #8]	@ (800c718 <raise+0xc>)
 800c70e:	4601      	mov	r1, r0
 800c710:	6818      	ldr	r0, [r3, #0]
 800c712:	f7ff bfd3 	b.w	800c6bc <_raise_r>
 800c716:	bf00      	nop
 800c718:	20000088 	.word	0x20000088

0800c71c <_kill_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4d07      	ldr	r5, [pc, #28]	@ (800c73c <_kill_r+0x20>)
 800c720:	2300      	movs	r3, #0
 800c722:	4604      	mov	r4, r0
 800c724:	4608      	mov	r0, r1
 800c726:	4611      	mov	r1, r2
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	f7f7 fd15 	bl	8004158 <_kill>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	d102      	bne.n	800c738 <_kill_r+0x1c>
 800c732:	682b      	ldr	r3, [r5, #0]
 800c734:	b103      	cbz	r3, 800c738 <_kill_r+0x1c>
 800c736:	6023      	str	r3, [r4, #0]
 800c738:	bd38      	pop	{r3, r4, r5, pc}
 800c73a:	bf00      	nop
 800c73c:	20000a38 	.word	0x20000a38

0800c740 <_getpid_r>:
 800c740:	f7f7 bd02 	b.w	8004148 <_getpid>

0800c744 <_init>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	bf00      	nop
 800c748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74a:	bc08      	pop	{r3}
 800c74c:	469e      	mov	lr, r3
 800c74e:	4770      	bx	lr

0800c750 <_fini>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	bf00      	nop
 800c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c756:	bc08      	pop	{r3}
 800c758:	469e      	mov	lr, r3
 800c75a:	4770      	bx	lr
